
bug3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000039e  00800200  00004554  000045e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004554  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a92  0080059e  0080059e  00004986  2**0
                  ALLOC
  3 .debug_aranges 000005a0  00000000  00000000  00004986  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000100f  00000000  00000000  00004f26  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00012a17  00000000  00000000  00005f35  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00004cc3  00000000  00000000  0001894c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004cf7  00000000  00000000  0001d60f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ad0  00000000  00000000  00022308  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002522  00000000  00000000  00022dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002915  00000000  00000000  000252fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00027c0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a0 02 	jmp	0x540	; 0x540 <__ctors_end>
       4:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
       8:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
       c:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      10:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      14:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      18:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      1c:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      20:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      24:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      28:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      2c:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      30:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      34:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      38:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      3c:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      40:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      44:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      48:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      4c:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      50:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      54:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__vector_21>
      58:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <__vector_22>
      5c:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      60:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      64:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      68:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      6c:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      70:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      74:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      78:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      7c:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      80:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      84:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      88:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      8c:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      90:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__vector_36>
      94:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      98:	0c 94 4b 0c 	jmp	0x1896	; 0x1896 <__vector_38>
      9c:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      a0:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      a4:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      a8:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      ac:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      b0:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      b4:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      b8:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      bc:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      c0:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      c4:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      c8:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      cc:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      d0:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      d4:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      d8:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      dc:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      e0:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>

000000e4 <__c.1776>:
      e4:	45 46 47 65 66 67 00                                EFGefg.

000000eb <__c.1770>:
      eb:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

000000fb <__timer0Compare>:
      fb:	3a 07 00 6e 00 02 47 00 35 00 02 44 00 06 78 03     :..n..G.5..D..x.
     10b:	3e 07 00 6e 00 04 48 00 35 00 04 44 00 04 a8 03     >..n..H.5..D....

0000011b <__timer1Compare>:
     11b:	42 07 01 6f 00 02 88 00 36 00 02 80 00 06 72 03     B..o....6.....r.
     12b:	46 07 01 6f 00 04 8a 00 36 00 04 80 00 04 75 03     F..o....6.....u.
     13b:	4a 07 01 6f 00 08 8c 00 36 00 08 80 00 02 78 03     J..o....6.....x.

0000014b <__timer2Compare>:
     14b:	4e 07 02 70 00 02 b3 00 37 00 02 b0 00 06 6f 03     N..p....7.....o.
     15b:	52 07 02 70 00 04 b4 00 37 00 04 b0 00 04 b4 03     R..p....7.......

0000016b <__timer3Compare>:
     16b:	56 07 03 71 00 02 98 00 38 00 02 90 00 06 9c 03     V..q....8.......
     17b:	5a 07 03 71 00 04 9a 00 38 00 04 90 00 04 9f 03     Z..q....8.......
     18b:	5e 07 03 71 00 08 9c 00 38 00 08 90 00 02 a2 03     ^..q....8.......

0000019b <__timer4Compare>:
     19b:	62 07 04 72 00 02 a8 00 39 00 02 a0 00 06 ab 03     b..r....9.......
     1ab:	66 07 04 72 00 04 aa 00 39 00 04 a0 00 04 ae 03     f..r....9.......
     1bb:	6a 07 04 72 00 08 ac 00 39 00 08 a0 00 02 b1 03     j..r....9.......

000001cb <__timer5Compare>:
     1cb:	6e 07 05 73 00 02 28 01 3a 00 02 20 01 06 bd 03     n..s..(.:.. ....
     1db:	72 07 05 73 00 04 2a 01 3a 00 04 20 01 04 c0 03     r..s..*.:.. ....
     1eb:	76 07 05 73 00 08 2c 01 3a 00 08 20 01 02 c3 03     v..s..,.:.. ....

000001fb <pgm_Timers>:
     1fb:	7a 07 46 00 45 00 07 00 02 10 15 03 44 00 01 44     z.F.E.......D..D
     20b:	00 02 45 00 08 00 00 01 fb 00 6e 00 01 35 00 01     ..E.......n..5..
     21b:	00 00 00 00 01 00 00 01 00 00 01 00 00 25 03 85     .............%..
     22b:	07 84 00 81 00 07 ff 03 10 33 03 80 00 01 80 00     .........3......
     23b:	02 81 00 08 81 00 10 1b 01 6f 00 01 36 00 01 86     .........o..6...
     24b:	00 6f 00 20 36 00 20 81 00 40 00 00 25 03 90 07     .o. 6. ..@..%...
     25b:	b2 00 b1 00 07 00 02 10 15 03 b0 00 01 b0 00 02     ................
     26b:	b1 00 08 00 00 01 4b 01 70 00 01 37 00 01 00 00     ......K.p..7....
     27b:	00 00 01 00 00 01 00 00 01 00 00 43 03 9b 07 94     ...........C....
     28b:	00 91 00 07 ff 03 10 33 03 90 00 01 90 00 02 91     .......3........
     29b:	00 08 91 00 10 6b 01 71 00 01 38 00 01 96 00 71     .....k.q..8....q
     2ab:	00 20 38 00 20 91 00 40 a5 03 25 03 a6 07 a4 00     . 8. ..@..%.....
     2bb:	a1 00 07 ff 03 10 33 03 a0 00 01 a0 00 02 a1 00     ......3.........
     2cb:	08 a1 00 10 9b 01 72 00 01 39 00 01 a6 00 72 00     ......r..9....r.
     2db:	20 39 00 20 a1 00 40 b7 03 25 03 b1 07 24 01 21      9. ..@..%...$.!
     2eb:	01 07 ff 03 10 33 03 20 01 01 20 01 02 21 01 08     .....3. .. ..!..
     2fb:	21 01 10 cb 01 73 00 01 3a 00 01 26 01 73 00 20     !....s..:..&.s. 
     30b:	3a 00 20 21 01 40 ba 03 25 03                       :. !.@..%.

00000315 <mode2WGM_a>:
     315:	00 01 ff ff 02 03 ff ff ff ff ff 05 ff ff ff 07     ................

00000325 <prescale_a>:
     325:	06 00 00 00 01 00 08 00 40 00 00 01 00 04           ........@.....

00000333 <mode2WGM_b>:
     333:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c ff 0e 0f     ................

00000343 <prescale_b>:
     343:	08 00 00 00 01 00 08 00 20 00 40 00 80 00 00 01     ........ .@.....
     353:	00 04                                               ..

00000355 <marquee_list>:
     355:	01 04                                               ..

00000357 <Servos1_list>:
     357:	29 04 3f 04 55 04 6b 04 81 04 97 04                 ).?.U.k.....

00000363 <servos2_list>:
     363:	b9 04 cf 04 e5 04 fb 04 11 05 27 05                 ..........'.

0000036f <_B4>:
     36f:	c8 03 10                                            ...

00000372 <_B5>:
     372:	c8 03 20                                            .. 

00000375 <_B6>:
     375:	c8 03 40                                            ..@

00000378 <_B7>:
     378:	c8 03 80                                            ...

0000037b <_C0>:
     37b:	ce 03 01                                            ...

0000037e <_C1>:
     37e:	ce 03 02                                            ...

00000381 <_C2>:
     381:	ce 03 04                                            ...

00000384 <_C3>:
     384:	ce 03 08                                            ...

00000387 <_C4>:
     387:	ce 03 10                                            ...

0000038a <_C5>:
     38a:	ce 03 20                                            .. 

0000038d <_D2>:
     38d:	d4 03 04                                            ...

00000390 <_D3>:
     390:	d4 03 08                                            ...

00000393 <_D5>:
     393:	d4 03 20                                            .. 

00000396 <_D6>:
     396:	d4 03 40                                            ..@

00000399 <_D7>:
     399:	d4 03 80                                            ...

0000039c <_E3>:
     39c:	da 03 08                                            ...

0000039f <_E4>:
     39f:	da 03 10                                            ...

000003a2 <_E5>:
     3a2:	da 03 20                                            .. 

000003a5 <_E7>:
     3a5:	da 03 80                                            ...

000003a8 <_G5>:
     3a8:	e0 03 20                                            .. 

000003ab <_H3>:
     3ab:	e6 03 08                                            ...

000003ae <_H4>:
     3ae:	e6 03 10                                            ...

000003b1 <_H5>:
     3b1:	e6 03 20                                            .. 

000003b4 <_H6>:
     3b4:	e6 03 40                                            ..@

000003b7 <_L0>:
     3b7:	ec 03 01                                            ...

000003ba <_L1>:
     3ba:	ec 03 02                                            ...

000003bd <_L3>:
     3bd:	ec 03 08                                            ...

000003c0 <_L4>:
     3c0:	ec 03 10                                            ...

000003c3 <_L5>:
     3c3:	ec 03 20                                            .. 

000003c6 <AVcc_MV>:
     3c6:	88 13                                               ..

000003c8 <_PORTB>:
     3c8:	25 00 24 00 23 00                                   %.$.#.

000003ce <_PORTC>:
     3ce:	28 00 27 00 26 00                                   (.'.&.

000003d4 <_PORTD>:
     3d4:	2b 00 2a 00 29 00                                   +.*.).

000003da <_PORTE>:
     3da:	2e 00 2d 00 2c 00                                   ..-.,.

000003e0 <_PORTG>:
     3e0:	34 00 33 00 32 00                                   4.3.2.

000003e6 <_PORTH>:
     3e6:	02 01 01 01 00 01                                   ......

000003ec <_PORTL>:
     3ec:	0b 01 0a 01 09 01                                   ......

000003f2 <c_servoPWM>:
     3f2:	ee 0e e6 0e                                         ....

000003f6 <__c.1912>:
     3f6:	20 45 72 72 6f 72 3a 25 64 0d 0a 00                  Error:%d...

00000402 <__c.1910>:
     402:	55 73 65 72 00                                      User.

00000407 <__c.1908>:
     407:	57 65 62 62 6f 74 4c 69 62 00                       WebbotLib.

00000411 <atoz>:
     411:	ee 3e 9c 7a 9e 8e f6 2e 0c 78 ae 1c aa 2a 3a ce     .>.z.....x...*:.
     421:	e6 0a b6 1e 38 7c b8 6e 76 da                       ....8|.nv.

0000042b <digits>:
     42b:	fc 60 da f2 66 b6 3e e0 fe e6                       .`..f.>...

00000435 <c_hw_uart>:
     435:	ea 15 a0 16 bc 16 75 16 a7 16 8b 16 00 40 7a 10     ......u......@z.
     445:	f3 5a 00 a0 72 4e 18 09 00 10 a5 d4 e8 00 00 e8     .Z..rN..........
     455:	76 48 17 00 00 e4 0b 54 02 00 00 ca 9a 3b 00 00     vH.....T.....;..
     465:	00 e1 f5 05 00 00 80 96 98 00 00 00 40 42 0f 00     ............@B..
     475:	00 00 a0 86 01 00 00 00 10 27 00 00 00 00 e8 03     .........'......
     485:	00 00 00 00 64 00 00 00 00 00 0a 00 00 00 00 00     ....d...........
     495:	01 00 00 00 00 00 2c 76 d8 88 dc 67 4f 08 23 df     ......,v...gO.#.
     4a5:	c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51     ...Y.......S.:.Q
     4b5:	99 76 96 e8 e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c     .v.....&....b.@|
     4c5:	6f fc ef bc 9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a     o.....@...o....Z
     4d5:	2a f7 5c 93 6b 6c f9 67 6d c1 1b fc e0 e4 0d 47     *.\.kl.gm......G
     4e5:	fe f5 20 e6 b5 00 d0 ed 90 2e 03 00 94 35 77 05     .. ..........5w.
     4f5:	00 80 84 1e 08 00 00 20 4e 0a 00 00 00 c8 0c 33     ....... N......3
     505:	33 33 33 0f 98 6e 12 83 11 41 ef 8d 21 14 89 3b     333..n...A..!..;
     515:	e6 55 16 cf fe e6 db 18 d1 84 4b 38 1b f7 7c 1d     .U........K8..|.
     525:	90 1d a4 bb e4 24 20 32 84 72 5e 22 81 00 c9 f1     .....$ 2.r^"....
     535:	24 ec a1 e5 3d 27 00                                $...='.

0000053c <__ctors_start>:
     53c:	a9 0c       	add	r10, r9
     53e:	b9 0c       	add	r11, r9

00000540 <__ctors_end>:
     540:	11 24       	eor	r1, r1
     542:	1f be       	out	0x3f, r1	; 63
     544:	cf ef       	ldi	r28, 0xFF	; 255
     546:	d1 e2       	ldi	r29, 0x21	; 33
     548:	de bf       	out	0x3e, r29	; 62
     54a:	cd bf       	out	0x3d, r28	; 61

0000054c <__do_copy_data>:
     54c:	15 e0       	ldi	r17, 0x05	; 5
     54e:	a0 e0       	ldi	r26, 0x00	; 0
     550:	b2 e0       	ldi	r27, 0x02	; 2
     552:	e4 e5       	ldi	r30, 0x54	; 84
     554:	f5 e4       	ldi	r31, 0x45	; 69
     556:	02 c0       	rjmp	.+4      	; 0x55c <.do_copy_data_start>

00000558 <.do_copy_data_loop>:
     558:	05 90       	lpm	r0, Z+
     55a:	0d 92       	st	X+, r0

0000055c <.do_copy_data_start>:
     55c:	ae 39       	cpi	r26, 0x9E	; 158
     55e:	b1 07       	cpc	r27, r17
     560:	d9 f7       	brne	.-10     	; 0x558 <.do_copy_data_loop>

00000562 <__do_clear_bss>:
     562:	10 e1       	ldi	r17, 0x10	; 16
     564:	ae e9       	ldi	r26, 0x9E	; 158
     566:	b5 e0       	ldi	r27, 0x05	; 5
     568:	01 c0       	rjmp	.+2      	; 0x56c <.do_clear_bss_start>

0000056a <.do_clear_bss_loop>:
     56a:	1d 92       	st	X+, r1

0000056c <.do_clear_bss_start>:
     56c:	a0 33       	cpi	r26, 0x30	; 48
     56e:	b1 07       	cpc	r27, r17
     570:	e1 f7       	brne	.-8      	; 0x56a <.do_clear_bss_loop>

00000572 <__do_global_ctors>:
     572:	15 e0       	ldi	r17, 0x05	; 5
     574:	c0 e4       	ldi	r28, 0x40	; 64
     576:	d5 e0       	ldi	r29, 0x05	; 5
     578:	04 c0       	rjmp	.+8      	; 0x582 <.do_global_ctors_start>

0000057a <.do_global_ctors_loop>:
     57a:	22 97       	sbiw	r28, 0x02	; 2
     57c:	fe 01       	movw	r30, r28
     57e:	0e 94 a4 22 	call	0x4548	; 0x4548 <__tablejump__>

00000582 <.do_global_ctors_start>:
     582:	cc 33       	cpi	r28, 0x3C	; 60
     584:	d1 07       	cpc	r29, r17
     586:	c9 f7       	brne	.-14     	; 0x57a <.do_global_ctors_loop>
     588:	0e 94 49 12 	call	0x2492	; 0x2492 <main>
     58c:	0c 94 9a 1e 	jmp	0x3d34	; 0x3d34 <exit>

00000590 <__bad_interrupt>:
     590:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000594 <__iCliRetVal>:
#endif  /* C++ */
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
     594:	df 93       	push	r29
     596:	cf 93       	push	r28
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
     59c:	f8 94       	cli
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	cf 91       	pop	r28
     5a2:	df 91       	pop	r29
     5a4:	08 95       	ret

000005a6 <__iRestore>:
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
     5a6:	df 93       	push	r29
     5a8:	cf 93       	push	r28
     5aa:	00 d0       	rcall	.+0      	; 0x5ac <__iRestore+0x6>
     5ac:	cd b7       	in	r28, 0x3d	; 61
     5ae:	de b7       	in	r29, 0x3e	; 62
     5b0:	9a 83       	std	Y+2, r25	; 0x02
     5b2:	89 83       	std	Y+1, r24	; 0x01
     5b4:	ef e5       	ldi	r30, 0x5F	; 95
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	a9 81       	ldd	r26, Y+1	; 0x01
     5ba:	ba 81       	ldd	r27, Y+2	; 0x02
     5bc:	8c 91       	ld	r24, X
     5be:	80 83       	st	Z, r24
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	cf 91       	pop	r28
     5c6:	df 91       	pop	r29
     5c8:	08 95       	ret

000005ca <__uartAttach>:
	return (uart->rxOverflow) ? TRUE : FALSE;
}

// Redirects received data to a user function.
#define uartAttach(uart,fn, device) __uartAttach(&((uart)->_uart_),fn, device)
static __inline__ void __uartAttach(UART* uart, void (*rx_func)(unsigned char, void*),void *device){
     5ca:	df 93       	push	r29
     5cc:	cf 93       	push	r28
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
     5d2:	28 97       	sbiw	r28, 0x08	; 8
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	f8 94       	cli
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	cd bf       	out	0x3d, r28	; 61
     5de:	9c 83       	std	Y+4, r25	; 0x04
     5e0:	8b 83       	std	Y+3, r24	; 0x03
     5e2:	7e 83       	std	Y+6, r23	; 0x06
     5e4:	6d 83       	std	Y+5, r22	; 0x05
     5e6:	58 87       	std	Y+8, r21	; 0x08
     5e8:	4f 83       	std	Y+7, r20	; 0x07
	CRITICAL_SECTION{
     5ea:	ef e5       	ldi	r30, 0x5F	; 95
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	80 81       	ld	r24, Z
     5f0:	8a 83       	std	Y+2, r24	; 0x02
     5f2:	0e 94 ca 02 	call	0x594	; 0x594 <__iCliRetVal>
     5f6:	89 83       	std	Y+1, r24	; 0x01
     5f8:	0d c0       	rjmp	.+26     	; 0x614 <__uartAttach+0x4a>
		uart->rxFunc = rx_func;
     5fa:	eb 81       	ldd	r30, Y+3	; 0x03
     5fc:	fc 81       	ldd	r31, Y+4	; 0x04
     5fe:	8d 81       	ldd	r24, Y+5	; 0x05
     600:	9e 81       	ldd	r25, Y+6	; 0x06
     602:	95 83       	std	Z+5, r25	; 0x05
     604:	84 83       	std	Z+4, r24	; 0x04
		uart->rxFuncData = device;
     606:	eb 81       	ldd	r30, Y+3	; 0x03
     608:	fc 81       	ldd	r31, Y+4	; 0x04
     60a:	8f 81       	ldd	r24, Y+7	; 0x07
     60c:	98 85       	ldd	r25, Y+8	; 0x08
     60e:	97 83       	std	Z+7, r25	; 0x07
     610:	86 83       	std	Z+6, r24	; 0x06
}

// Redirects received data to a user function.
#define uartAttach(uart,fn, device) __uartAttach(&((uart)->_uart_),fn, device)
static __inline__ void __uartAttach(UART* uart, void (*rx_func)(unsigned char, void*),void *device){
	CRITICAL_SECTION{
     612:	19 82       	std	Y+1, r1	; 0x01
     614:	89 81       	ldd	r24, Y+1	; 0x01
     616:	88 23       	and	r24, r24
     618:	81 f7       	brne	.-32     	; 0x5fa <__uartAttach+0x30>
		uart->rxFunc = rx_func;
		uart->rxFuncData = device;
	}
     61a:	ce 01       	movw	r24, r28
     61c:	02 96       	adiw	r24, 0x02	; 2
     61e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__iRestore>
}
     622:	28 96       	adiw	r28, 0x08	; 8
     624:	0f b6       	in	r0, 0x3f	; 63
     626:	f8 94       	cli
     628:	de bf       	out	0x3e, r29	; 62
     62a:	0f be       	out	0x3f, r0	; 63
     62c:	cd bf       	out	0x3d, r28	; 61
     62e:	cf 91       	pop	r28
     630:	df 91       	pop	r29
     632:	08 95       	ret

00000634 <_ZN4Uart6attachEPFvhRS_PvES1_>:
	}
	void off(void) const {
		_uartOff(m_cstr);
	}

	void attach(void (*rx_func)(unsigned char, Uart&, void*), void* param = NULL){
     634:	df 93       	push	r29
     636:	cf 93       	push	r28
     638:	00 d0       	rcall	.+0      	; 0x63a <_ZN4Uart6attachEPFvhRS_PvES1_+0x6>
     63a:	00 d0       	rcall	.+0      	; 0x63c <_ZN4Uart6attachEPFvhRS_PvES1_+0x8>
     63c:	00 d0       	rcall	.+0      	; 0x63e <_ZN4Uart6attachEPFvhRS_PvES1_+0xa>
     63e:	cd b7       	in	r28, 0x3d	; 61
     640:	de b7       	in	r29, 0x3e	; 62
     642:	9a 83       	std	Y+2, r25	; 0x02
     644:	89 83       	std	Y+1, r24	; 0x01
     646:	7c 83       	std	Y+4, r23	; 0x04
     648:	6b 83       	std	Y+3, r22	; 0x03
     64a:	5e 83       	std	Y+6, r21	; 0x06
     64c:	4d 83       	std	Y+5, r20	; 0x05
		m_rx_func = rx_func;						// Remember the user routine
     64e:	e9 81       	ldd	r30, Y+1	; 0x01
     650:	fa 81       	ldd	r31, Y+2	; 0x02
     652:	8b 81       	ldd	r24, Y+3	; 0x03
     654:	9c 81       	ldd	r25, Y+4	; 0x04
     656:	93 8b       	std	Z+19, r25	; 0x13
     658:	82 8b       	std	Z+18, r24	; 0x12
		m_param = param;
     65a:	e9 81       	ldd	r30, Y+1	; 0x01
     65c:	fa 81       	ldd	r31, Y+2	; 0x02
     65e:	8d 81       	ldd	r24, Y+5	; 0x05
     660:	9e 81       	ldd	r25, Y+6	; 0x06
     662:	95 8b       	std	Z+21, r25	; 0x15
     664:	84 8b       	std	Z+20, r24	; 0x14
		__uartAttach(m_cstr,&Uart::rx_func,this);	// Callback my static method
     666:	e9 81       	ldd	r30, Y+1	; 0x01
     668:	fa 81       	ldd	r31, Y+2	; 0x02
     66a:	80 89       	ldd	r24, Z+16	; 0x10
     66c:	91 89       	ldd	r25, Z+17	; 0x11
     66e:	27 e4       	ldi	r18, 0x47	; 71
     670:	33 e0       	ldi	r19, 0x03	; 3
     672:	49 81       	ldd	r20, Y+1	; 0x01
     674:	5a 81       	ldd	r21, Y+2	; 0x02
     676:	b9 01       	movw	r22, r18
     678:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__uartAttach>

	}
     67c:	26 96       	adiw	r28, 0x06	; 6
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	f8 94       	cli
     682:	de bf       	out	0x3e, r29	; 62
     684:	0f be       	out	0x3f, r0	; 63
     686:	cd bf       	out	0x3d, r28	; 61
     688:	cf 91       	pop	r28
     68a:	df 91       	pop	r29
     68c:	08 95       	ret

0000068e <_ZN4Uart7rx_funcEhPv>:
		return __uartGetByte(m_cstr);
	}

protected:
	// Generic call back
	static void rx_func(unsigned char c, void * device){
     68e:	df 93       	push	r29
     690:	cf 93       	push	r28
     692:	00 d0       	rcall	.+0      	; 0x694 <_ZN4Uart7rx_funcEhPv+0x6>
     694:	00 d0       	rcall	.+0      	; 0x696 <_ZN4Uart7rx_funcEhPv+0x8>
     696:	0f 92       	push	r0
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	8b 83       	std	Y+3, r24	; 0x03
     69e:	7d 83       	std	Y+5, r23	; 0x05
     6a0:	6c 83       	std	Y+4, r22	; 0x04
		Uart* inst = (Uart*)(device);
     6a2:	8c 81       	ldd	r24, Y+4	; 0x04
     6a4:	9d 81       	ldd	r25, Y+5	; 0x05
     6a6:	9a 83       	std	Y+2, r25	; 0x02
     6a8:	89 83       	std	Y+1, r24	; 0x01
		if(inst->m_rx_func){
     6aa:	e9 81       	ldd	r30, Y+1	; 0x01
     6ac:	fa 81       	ldd	r31, Y+2	; 0x02
     6ae:	82 89       	ldd	r24, Z+18	; 0x12
     6b0:	93 89       	ldd	r25, Z+19	; 0x13
     6b2:	00 97       	sbiw	r24, 0x00	; 0
     6b4:	71 f0       	breq	.+28     	; 0x6d2 <_ZN4Uart7rx_funcEhPv+0x44>
			inst->m_rx_func(c,*inst, inst->m_param);
     6b6:	e9 81       	ldd	r30, Y+1	; 0x01
     6b8:	fa 81       	ldd	r31, Y+2	; 0x02
     6ba:	a2 89       	ldd	r26, Z+18	; 0x12
     6bc:	b3 89       	ldd	r27, Z+19	; 0x13
     6be:	e9 81       	ldd	r30, Y+1	; 0x01
     6c0:	fa 81       	ldd	r31, Y+2	; 0x02
     6c2:	44 89       	ldd	r20, Z+20	; 0x14
     6c4:	55 89       	ldd	r21, Z+21	; 0x15
     6c6:	29 81       	ldd	r18, Y+1	; 0x01
     6c8:	3a 81       	ldd	r19, Y+2	; 0x02
     6ca:	8b 81       	ldd	r24, Y+3	; 0x03
     6cc:	b9 01       	movw	r22, r18
     6ce:	fd 01       	movw	r30, r26
     6d0:	09 95       	icall
		}
	}
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	cf 91       	pop	r28
     6de:	df 91       	pop	r29
     6e0:	08 95       	ret

000006e2 <__act_getSpeed>:
* Define methods common to all actuators
-----------------------------------------------------------------------------------------*/

void __act_setSpeed(__ACTUATOR* act, DRIVE_SPEED speed);

static __inline__ DRIVE_SPEED __act_getSpeed(const __ACTUATOR* act){
     6e2:	df 93       	push	r29
     6e4:	cf 93       	push	r28
     6e6:	00 d0       	rcall	.+0      	; 0x6e8 <__act_getSpeed+0x6>
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
     6ec:	9a 83       	std	Y+2, r25	; 0x02
     6ee:	89 83       	std	Y+1, r24	; 0x01
	return act->required_speed;
     6f0:	e9 81       	ldd	r30, Y+1	; 0x01
     6f2:	fa 81       	ldd	r31, Y+2	; 0x02
     6f4:	82 81       	ldd	r24, Z+2	; 0x02
}
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	cf 91       	pop	r28
     6fc:	df 91       	pop	r29
     6fe:	08 95       	ret

00000700 <_ZNK8Actuator8getSpeedEv>:
		m_cstr = cstr;
	}
	void setSpeed(DRIVE_SPEED speed){
		__act_setSpeed(m_cstr,speed);
	}
	DRIVE_SPEED getSpeed(void) const{
     700:	df 93       	push	r29
     702:	cf 93       	push	r28
     704:	00 d0       	rcall	.+0      	; 0x706 <_ZNK8Actuator8getSpeedEv+0x6>
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
     70a:	9a 83       	std	Y+2, r25	; 0x02
     70c:	89 83       	std	Y+1, r24	; 0x01
		return __act_getSpeed(m_cstr);
     70e:	e9 81       	ldd	r30, Y+1	; 0x01
     710:	fa 81       	ldd	r31, Y+2	; 0x02
     712:	80 81       	ld	r24, Z
     714:	91 81       	ldd	r25, Z+1	; 0x01
     716:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__act_getSpeed>
	}
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	cf 91       	pop	r28
     720:	df 91       	pop	r29
     722:	08 95       	ret

00000724 <_Z18initialize_commandP7command>:
char r_curr_subcommand;
int8_t r_curr_servo;

TICK_COUNT last_loop_time;

void initialize_command (struct command* command) {
     724:	df 93       	push	r29
     726:	cf 93       	push	r28
     728:	00 d0       	rcall	.+0      	; 0x72a <_Z18initialize_commandP7command+0x6>
     72a:	00 d0       	rcall	.+0      	; 0x72c <_Z18initialize_commandP7command+0x8>
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	9c 83       	std	Y+4, r25	; 0x04
     732:	8b 83       	std	Y+3, r24	; 0x03
	(*command).time = 1;
     734:	8b 81       	ldd	r24, Y+3	; 0x03
     736:	9c 81       	ldd	r25, Y+4	; 0x04
     738:	fc 01       	movw	r30, r24
     73a:	e5 54       	subi	r30, 0x45	; 69
     73c:	ff 4f       	sbci	r31, 0xFF	; 255
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	91 83       	std	Z+1, r25	; 0x01
     744:	80 83       	st	Z, r24
	for(int16_t i=0;i<=SERVOS_NUMBER;i++) {
     746:	1a 82       	std	Y+2, r1	; 0x02
     748:	19 82       	std	Y+1, r1	; 0x01
     74a:	5f c0       	rjmp	.+190    	; 0x80a <_Z18initialize_commandP7command+0xe6>
		(*command).has_changed[i]=0;
     74c:	29 81       	ldd	r18, Y+1	; 0x01
     74e:	3a 81       	ldd	r19, Y+2	; 0x02
     750:	8b 81       	ldd	r24, Y+3	; 0x03
     752:	9c 81       	ldd	r25, Y+4	; 0x04
     754:	fc 01       	movw	r30, r24
     756:	e2 0f       	add	r30, r18
     758:	f3 1f       	adc	r31, r19
     75a:	10 82       	st	Z, r1
		(*command).servo_target_positions[i]=MY_DRIVE_SPEED_AVERAGE;
     75c:	89 81       	ldd	r24, Y+1	; 0x01
     75e:	9a 81       	ldd	r25, Y+2	; 0x02
     760:	2b 81       	ldd	r18, Y+3	; 0x03
     762:	3c 81       	ldd	r19, Y+4	; 0x04
     764:	88 0f       	add	r24, r24
     766:	99 1f       	adc	r25, r25
     768:	88 0f       	add	r24, r24
     76a:	99 1f       	adc	r25, r25
     76c:	82 0f       	add	r24, r18
     76e:	93 1f       	adc	r25, r19
     770:	fc 01       	movw	r30, r24
     772:	3b 96       	adiw	r30, 0x0b	; 11
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	90 e8       	ldi	r25, 0x80	; 128
     778:	ab eb       	ldi	r26, 0xBB	; 187
     77a:	b4 e4       	ldi	r27, 0x44	; 68
     77c:	80 83       	st	Z, r24
     77e:	91 83       	std	Z+1, r25	; 0x01
     780:	a2 83       	std	Z+2, r26	; 0x02
     782:	b3 83       	std	Z+3, r27	; 0x03
		(*command).servo_current_positions[i]=MY_DRIVE_SPEED_AVERAGE;
     784:	89 81       	ldd	r24, Y+1	; 0x01
     786:	9a 81       	ldd	r25, Y+2	; 0x02
     788:	2b 81       	ldd	r18, Y+3	; 0x03
     78a:	3c 81       	ldd	r19, Y+4	; 0x04
     78c:	88 0f       	add	r24, r24
     78e:	99 1f       	adc	r25, r25
     790:	88 0f       	add	r24, r24
     792:	99 1f       	adc	r25, r25
     794:	82 0f       	add	r24, r18
     796:	93 1f       	adc	r25, r19
     798:	fc 01       	movw	r30, r24
     79a:	f7 96       	adiw	r30, 0x37	; 55
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	90 e8       	ldi	r25, 0x80	; 128
     7a0:	ab eb       	ldi	r26, 0xBB	; 187
     7a2:	b4 e4       	ldi	r27, 0x44	; 68
     7a4:	80 83       	st	Z, r24
     7a6:	91 83       	std	Z+1, r25	; 0x01
     7a8:	a2 83       	std	Z+2, r26	; 0x02
     7aa:	b3 83       	std	Z+3, r27	; 0x03
		(*command).servo_speeds[i]=10;
     7ac:	89 81       	ldd	r24, Y+1	; 0x01
     7ae:	9a 81       	ldd	r25, Y+2	; 0x02
     7b0:	2b 81       	ldd	r18, Y+3	; 0x03
     7b2:	3c 81       	ldd	r19, Y+4	; 0x04
     7b4:	88 0f       	add	r24, r24
     7b6:	99 1f       	adc	r25, r25
     7b8:	88 0f       	add	r24, r24
     7ba:	99 1f       	adc	r25, r25
     7bc:	82 0f       	add	r24, r18
     7be:	93 1f       	adc	r25, r19
     7c0:	fc 01       	movw	r30, r24
     7c2:	ed 59       	subi	r30, 0x9D	; 157
     7c4:	ff 4f       	sbci	r31, 0xFF	; 255
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	a0 e2       	ldi	r26, 0x20	; 32
     7cc:	b1 e4       	ldi	r27, 0x41	; 65
     7ce:	80 83       	st	Z, r24
     7d0:	91 83       	std	Z+1, r25	; 0x01
     7d2:	a2 83       	std	Z+2, r26	; 0x02
     7d4:	b3 83       	std	Z+3, r27	; 0x03
		(*command).servo_speed_per_tick[i]=100;
     7d6:	89 81       	ldd	r24, Y+1	; 0x01
     7d8:	9a 81       	ldd	r25, Y+2	; 0x02
     7da:	2b 81       	ldd	r18, Y+3	; 0x03
     7dc:	3c 81       	ldd	r19, Y+4	; 0x04
     7de:	88 0f       	add	r24, r24
     7e0:	99 1f       	adc	r25, r25
     7e2:	88 0f       	add	r24, r24
     7e4:	99 1f       	adc	r25, r25
     7e6:	82 0f       	add	r24, r18
     7e8:	93 1f       	adc	r25, r19
     7ea:	fc 01       	movw	r30, r24
     7ec:	e1 57       	subi	r30, 0x71	; 113
     7ee:	ff 4f       	sbci	r31, 0xFF	; 255
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	a8 ec       	ldi	r26, 0xC8	; 200
     7f6:	b2 e4       	ldi	r27, 0x42	; 66
     7f8:	80 83       	st	Z, r24
     7fa:	91 83       	std	Z+1, r25	; 0x01
     7fc:	a2 83       	std	Z+2, r26	; 0x02
     7fe:	b3 83       	std	Z+3, r27	; 0x03

TICK_COUNT last_loop_time;

void initialize_command (struct command* command) {
	(*command).time = 1;
	for(int16_t i=0;i<=SERVOS_NUMBER;i++) {
     800:	89 81       	ldd	r24, Y+1	; 0x01
     802:	9a 81       	ldd	r25, Y+2	; 0x02
     804:	01 96       	adiw	r24, 0x01	; 1
     806:	9a 83       	std	Y+2, r25	; 0x02
     808:	89 83       	std	Y+1, r24	; 0x01
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	9a 81       	ldd	r25, Y+2	; 0x02
     80e:	8c 30       	cpi	r24, 0x0C	; 12
     810:	91 05       	cpc	r25, r1
     812:	0c f4       	brge	.+2      	; 0x816 <_Z18initialize_commandP7command+0xf2>
     814:	9b cf       	rjmp	.-202    	; 0x74c <_Z18initialize_commandP7command+0x28>
		(*command).servo_target_positions[i]=MY_DRIVE_SPEED_AVERAGE;
		(*command).servo_current_positions[i]=MY_DRIVE_SPEED_AVERAGE;
		(*command).servo_speeds[i]=10;
		(*command).servo_speed_per_tick[i]=100;
	}
}
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	cf 91       	pop	r28
     820:	df 91       	pop	r29
     822:	08 95       	ret

00000824 <appInitSoftware>:
	servos[11] = &servo12;
	initialize_command(&command_receiving);
	initialize_command(&command_in_process);
}
// Initialise the software
TICK_COUNT appInitSoftware(TICK_COUNT loopStart){
     824:	df 93       	push	r29
     826:	cf 93       	push	r28
     828:	00 d0       	rcall	.+0      	; 0x82a <appInitSoftware+0x6>
     82a:	00 d0       	rcall	.+0      	; 0x82c <appInitSoftware+0x8>
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
     830:	69 83       	std	Y+1, r22	; 0x01
     832:	7a 83       	std	Y+2, r23	; 0x02
     834:	8b 83       	std	Y+3, r24	; 0x03
     836:	9c 83       	std	Y+4, r25	; 0x04
	uart1.attach(&reader, NULL);
     838:	88 ed       	ldi	r24, 0xD8	; 216
     83a:	9f e0       	ldi	r25, 0x0F	; 15
     83c:	25 e4       	ldi	r18, 0x45	; 69
     83e:	37 e0       	ldi	r19, 0x07	; 7
     840:	b9 01       	movw	r22, r18
     842:	40 e0       	ldi	r20, 0x00	; 0
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	0e 94 1a 03 	call	0x634	; 0x634 <_ZN4Uart6attachEPFvhRS_PvES1_>
	return 0;
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	a0 e0       	ldi	r26, 0x00	; 0
     850:	b0 e0       	ldi	r27, 0x00	; 0
}
     852:	bc 01       	movw	r22, r24
     854:	cd 01       	movw	r24, r26
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	cf 91       	pop	r28
     860:	df 91       	pop	r29
     862:	08 95       	ret

00000864 <_ZN8Actuator8setSpeedEa>:
class Actuator{
public:
	Actuator(__ACTUATOR* cstr){
		m_cstr = cstr;
	}
	void setSpeed(DRIVE_SPEED speed){
     864:	df 93       	push	r29
     866:	cf 93       	push	r28
     868:	00 d0       	rcall	.+0      	; 0x86a <_ZN8Actuator8setSpeedEa+0x6>
     86a:	0f 92       	push	r0
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	9a 83       	std	Y+2, r25	; 0x02
     872:	89 83       	std	Y+1, r24	; 0x01
     874:	6b 83       	std	Y+3, r22	; 0x03
		__act_setSpeed(m_cstr,speed);
     876:	e9 81       	ldd	r30, Y+1	; 0x01
     878:	fa 81       	ldd	r31, Y+2	; 0x02
     87a:	80 81       	ld	r24, Z
     87c:	91 81       	ldd	r25, Z+1	; 0x01
     87e:	6b 81       	ldd	r22, Y+3	; 0x03
     880:	0e 94 96 10 	call	0x212c	; 0x212c <__act_setSpeed>
	}
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	cf 91       	pop	r28
     88c:	df 91       	pop	r29
     88e:	08 95       	ret

00000890 <appControl>:
// This is the main loop
TICK_COUNT appControl(LOOP_COUNT loopCount, TICK_COUNT loopStart) {
     890:	0f 93       	push	r16
     892:	1f 93       	push	r17
     894:	df 93       	push	r29
     896:	cf 93       	push	r28
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62
     89c:	2a 97       	sbiw	r28, 0x0a	; 10
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	f8 94       	cli
     8a2:	de bf       	out	0x3e, r29	; 62
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	cd bf       	out	0x3d, r28	; 61
     8a8:	6b 83       	std	Y+3, r22	; 0x03
     8aa:	7c 83       	std	Y+4, r23	; 0x04
     8ac:	8d 83       	std	Y+5, r24	; 0x05
     8ae:	9e 83       	std	Y+6, r25	; 0x06
     8b0:	2f 83       	std	Y+7, r18	; 0x07
     8b2:	38 87       	std	Y+8, r19	; 0x08
     8b4:	49 87       	std	Y+9, r20	; 0x09
     8b6:	5a 87       	std	Y+10, r21	; 0x0a
	if (loopStart > (last_loop_time + SSC_RESOLUTION)) {   
     8b8:	80 91 31 07 	lds	r24, 0x0731
     8bc:	90 91 32 07 	lds	r25, 0x0732
     8c0:	a0 91 33 07 	lds	r26, 0x0733
     8c4:	b0 91 34 07 	lds	r27, 0x0734
     8c8:	9c 01       	movw	r18, r24
     8ca:	ad 01       	movw	r20, r26
     8cc:	28 51       	subi	r18, 0x18	; 24
     8ce:	3c 4f       	sbci	r19, 0xFC	; 252
     8d0:	4f 4f       	sbci	r20, 0xFF	; 255
     8d2:	5f 4f       	sbci	r21, 0xFF	; 255
     8d4:	8f 81       	ldd	r24, Y+7	; 0x07
     8d6:	98 85       	ldd	r25, Y+8	; 0x08
     8d8:	a9 85       	ldd	r26, Y+9	; 0x09
     8da:	ba 85       	ldd	r27, Y+10	; 0x0a
     8dc:	28 17       	cp	r18, r24
     8de:	39 07       	cpc	r19, r25
     8e0:	4a 07       	cpc	r20, r26
     8e2:	5b 07       	cpc	r21, r27
     8e4:	08 f0       	brcs	.+2      	; 0x8e8 <appControl+0x58>
     8e6:	55 c0       	rjmp	.+170    	; 0x992 <appControl+0x102>
		last_loop_time = loopStart;
     8e8:	8f 81       	ldd	r24, Y+7	; 0x07
     8ea:	98 85       	ldd	r25, Y+8	; 0x08
     8ec:	a9 85       	ldd	r26, Y+9	; 0x09
     8ee:	ba 85       	ldd	r27, Y+10	; 0x0a
     8f0:	80 93 31 07 	sts	0x0731, r24
     8f4:	90 93 32 07 	sts	0x0732, r25
     8f8:	a0 93 33 07 	sts	0x0733, r26
     8fc:	b0 93 34 07 	sts	0x0734, r27
			command_in_process.time--;
		}


*/
		for (int8_t j=0; j <= SERVOS_NUMBER; j++) {
     900:	1a 82       	std	Y+2, r1	; 0x02
     902:	43 c0       	rjmp	.+134    	; 0x98a <appControl+0xfa>
			if (command_in_process.has_changed[j] == 1) {
     904:	8a 81       	ldd	r24, Y+2	; 0x02
     906:	99 27       	eor	r25, r25
     908:	87 fd       	sbrc	r24, 7
     90a:	90 95       	com	r25
     90c:	fc 01       	movw	r30, r24
     90e:	ee 58       	subi	r30, 0x8E	; 142
     910:	f9 4f       	sbci	r31, 0xF9	; 249
     912:	80 81       	ld	r24, Z
     914:	81 30       	cpi	r24, 0x01	; 1
     916:	b1 f5       	brne	.+108    	; 0x984 <appControl+0xf4>
				DRIVE_SPEED speed = interpolate((int16_t)command_in_process.servo_target_positions[j], MY_DRIVE_SPEED_MIN, MY_DRIVE_SPEED_MAX, DRIVE_SPEED_MIN,DRIVE_SPEED_MAX);
     918:	8a 81       	ldd	r24, Y+2	; 0x02
     91a:	99 27       	eor	r25, r25
     91c:	87 fd       	sbrc	r24, 7
     91e:	90 95       	com	r25
     920:	88 0f       	add	r24, r24
     922:	99 1f       	adc	r25, r25
     924:	88 0f       	add	r24, r24
     926:	99 1f       	adc	r25, r25
     928:	fc 01       	movw	r30, r24
     92a:	e3 58       	subi	r30, 0x83	; 131
     92c:	f9 4f       	sbci	r31, 0xF9	; 249
     92e:	80 81       	ld	r24, Z
     930:	91 81       	ldd	r25, Z+1	; 0x01
     932:	a2 81       	ldd	r26, Z+2	; 0x02
     934:	b3 81       	ldd	r27, Z+3	; 0x03
     936:	bc 01       	movw	r22, r24
     938:	cd 01       	movw	r24, r26
     93a:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <__fixsfsi>
     93e:	dc 01       	movw	r26, r24
     940:	cb 01       	movw	r24, r22
     942:	64 ef       	ldi	r22, 0xF4	; 244
     944:	71 e0       	ldi	r23, 0x01	; 1
     946:	44 ec       	ldi	r20, 0xC4	; 196
     948:	59 e0       	ldi	r21, 0x09	; 9
     94a:	21 e8       	ldi	r18, 0x81	; 129
     94c:	3f ef       	ldi	r19, 0xFF	; 255
     94e:	0f e7       	ldi	r16, 0x7F	; 127
     950:	10 e0       	ldi	r17, 0x00	; 0
     952:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <interpolate>
     956:	89 83       	std	Y+1, r24	; 0x01
				(*servos[j]).setSpeed(speed);  
     958:	8a 81       	ldd	r24, Y+2	; 0x02
     95a:	99 27       	eor	r25, r25
     95c:	87 fd       	sbrc	r24, 7
     95e:	90 95       	com	r25
     960:	88 0f       	add	r24, r24
     962:	99 1f       	adc	r25, r25
     964:	fc 01       	movw	r30, r24
     966:	e2 56       	subi	r30, 0x62	; 98
     968:	fa 4f       	sbci	r31, 0xFA	; 250
     96a:	80 81       	ld	r24, Z
     96c:	91 81       	ldd	r25, Z+1	; 0x01
     96e:	69 81       	ldd	r22, Y+1	; 0x01
     970:	0e 94 32 04 	call	0x864	; 0x864 <_ZN8Actuator8setSpeedEa>
				command_in_process.has_changed[j] = 0;
     974:	8a 81       	ldd	r24, Y+2	; 0x02
     976:	99 27       	eor	r25, r25
     978:	87 fd       	sbrc	r24, 7
     97a:	90 95       	com	r25
     97c:	fc 01       	movw	r30, r24
     97e:	ee 58       	subi	r30, 0x8E	; 142
     980:	f9 4f       	sbci	r31, 0xF9	; 249
     982:	10 82       	st	Z, r1
			command_in_process.time--;
		}


*/
		for (int8_t j=0; j <= SERVOS_NUMBER; j++) {
     984:	8a 81       	ldd	r24, Y+2	; 0x02
     986:	8f 5f       	subi	r24, 0xFF	; 255
     988:	8a 83       	std	Y+2, r24	; 0x02
     98a:	8a 81       	ldd	r24, Y+2	; 0x02
     98c:	8c 30       	cpi	r24, 0x0C	; 12
     98e:	0c f4       	brge	.+2      	; 0x992 <appControl+0x102>
     990:	b9 cf       	rjmp	.-142    	; 0x904 <appControl+0x74>
				command_in_process.has_changed[j] = 0;
			}
		}
		
	}
	return 0;
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	a0 e0       	ldi	r26, 0x00	; 0
     998:	b0 e0       	ldi	r27, 0x00	; 0
}
     99a:	bc 01       	movw	r22, r24
     99c:	cd 01       	movw	r24, r26
     99e:	2a 96       	adiw	r28, 0x0a	; 10
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	f8 94       	cli
     9a4:	de bf       	out	0x3e, r29	; 62
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	cd bf       	out	0x3d, r28	; 61
     9aa:	cf 91       	pop	r28
     9ac:	df 91       	pop	r29
     9ae:	1f 91       	pop	r17
     9b0:	0f 91       	pop	r16
     9b2:	08 95       	ret

000009b4 <appInitHardware>:
	}
}


// Initialise the hardware
void appInitHardware(void) {
     9b4:	df 93       	push	r29
     9b6:	cf 93       	push	r28
     9b8:	cd b7       	in	r28, 0x3d	; 61
     9ba:	de b7       	in	r29, 0x3e	; 62
	initHardware();
     9bc:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <initHardware>
	servos[0] = &servo;
     9c0:	84 ea       	ldi	r24, 0xA4	; 164
     9c2:	9f e0       	ldi	r25, 0x0F	; 15
     9c4:	90 93 9f 05 	sts	0x059F, r25
     9c8:	80 93 9e 05 	sts	0x059E, r24
	servos[1] = &servo2;
     9cc:	88 ea       	ldi	r24, 0xA8	; 168
     9ce:	9f e0       	ldi	r25, 0x0F	; 15
     9d0:	90 93 a1 05 	sts	0x05A1, r25
     9d4:	80 93 a0 05 	sts	0x05A0, r24
	servos[2] = &servo3;
     9d8:	8c ea       	ldi	r24, 0xAC	; 172
     9da:	9f e0       	ldi	r25, 0x0F	; 15
     9dc:	90 93 a3 05 	sts	0x05A3, r25
     9e0:	80 93 a2 05 	sts	0x05A2, r24
	servos[3] = &servo4;
     9e4:	80 eb       	ldi	r24, 0xB0	; 176
     9e6:	9f e0       	ldi	r25, 0x0F	; 15
     9e8:	90 93 a5 05 	sts	0x05A5, r25
     9ec:	80 93 a4 05 	sts	0x05A4, r24
	servos[4] = &servo5;
     9f0:	84 eb       	ldi	r24, 0xB4	; 180
     9f2:	9f e0       	ldi	r25, 0x0F	; 15
     9f4:	90 93 a7 05 	sts	0x05A7, r25
     9f8:	80 93 a6 05 	sts	0x05A6, r24
	servos[5] = &servo6;
     9fc:	88 eb       	ldi	r24, 0xB8	; 184
     9fe:	9f e0       	ldi	r25, 0x0F	; 15
     a00:	90 93 a9 05 	sts	0x05A9, r25
     a04:	80 93 a8 05 	sts	0x05A8, r24
	servos[6] = &servo7;
     a08:	8e eb       	ldi	r24, 0xBE	; 190
     a0a:	9f e0       	ldi	r25, 0x0F	; 15
     a0c:	90 93 ab 05 	sts	0x05AB, r25
     a10:	80 93 aa 05 	sts	0x05AA, r24
	servos[7] = &servo8;
     a14:	82 ec       	ldi	r24, 0xC2	; 194
     a16:	9f e0       	ldi	r25, 0x0F	; 15
     a18:	90 93 ad 05 	sts	0x05AD, r25
     a1c:	80 93 ac 05 	sts	0x05AC, r24
	servos[8] = &servo9;
     a20:	86 ec       	ldi	r24, 0xC6	; 198
     a22:	9f e0       	ldi	r25, 0x0F	; 15
     a24:	90 93 af 05 	sts	0x05AF, r25
     a28:	80 93 ae 05 	sts	0x05AE, r24
	servos[9] = &servo10;
     a2c:	8a ec       	ldi	r24, 0xCA	; 202
     a2e:	9f e0       	ldi	r25, 0x0F	; 15
     a30:	90 93 b1 05 	sts	0x05B1, r25
     a34:	80 93 b0 05 	sts	0x05B0, r24
	servos[10] = &servo11;
     a38:	8e ec       	ldi	r24, 0xCE	; 206
     a3a:	9f e0       	ldi	r25, 0x0F	; 15
     a3c:	90 93 b3 05 	sts	0x05B3, r25
     a40:	80 93 b2 05 	sts	0x05B2, r24
	servos[11] = &servo12;
     a44:	82 ed       	ldi	r24, 0xD2	; 210
     a46:	9f e0       	ldi	r25, 0x0F	; 15
     a48:	90 93 b5 05 	sts	0x05B5, r25
     a4c:	80 93 b4 05 	sts	0x05B4, r24
	initialize_command(&command_receiving);
     a50:	85 eb       	ldi	r24, 0xB5	; 181
     a52:	95 e0       	ldi	r25, 0x05	; 5
     a54:	0e 94 92 03 	call	0x724	; 0x724 <_Z18initialize_commandP7command>
	initialize_command(&command_in_process);
     a58:	82 e7       	ldi	r24, 0x72	; 114
     a5a:	96 e0       	ldi	r25, 0x06	; 6
     a5c:	0e 94 92 03 	call	0x724	; 0x724 <_Z18initialize_commandP7command>
}
     a60:	cf 91       	pop	r28
     a62:	df 91       	pop	r29
     a64:	08 95       	ret

00000a66 <_ZN6StreamlsEh>:
		return print(str);
	}
	Stream& operator<< (char c ){
		return print(c);
	}
	Stream& operator<< (uint8_t num ){
     a66:	df 93       	push	r29
     a68:	cf 93       	push	r28
     a6a:	00 d0       	rcall	.+0      	; 0xa6c <_ZN6StreamlsEh+0x6>
     a6c:	0f 92       	push	r0
     a6e:	cd b7       	in	r28, 0x3d	; 61
     a70:	de b7       	in	r29, 0x3e	; 62
     a72:	9a 83       	std	Y+2, r25	; 0x02
     a74:	89 83       	std	Y+1, r24	; 0x01
     a76:	6b 83       	std	Y+3, r22	; 0x03
		return print(num);
     a78:	89 81       	ldd	r24, Y+1	; 0x01
     a7a:	9a 81       	ldd	r25, Y+2	; 0x02
     a7c:	6b 81       	ldd	r22, Y+3	; 0x03
     a7e:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <_ZN6Stream5printEh>
	}
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	0f 90       	pop	r0
     a88:	cf 91       	pop	r28
     a8a:	df 91       	pop	r29
     a8c:	08 95       	ret

00000a8e <_ZN6StreamlsEc>:
	}

	Stream& operator<< (const char str[] ){
		return print(str);
	}
	Stream& operator<< (char c ){
     a8e:	df 93       	push	r29
     a90:	cf 93       	push	r28
     a92:	00 d0       	rcall	.+0      	; 0xa94 <_ZN6StreamlsEc+0x6>
     a94:	0f 92       	push	r0
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
     a9a:	9a 83       	std	Y+2, r25	; 0x02
     a9c:	89 83       	std	Y+1, r24	; 0x01
     a9e:	6b 83       	std	Y+3, r22	; 0x03
		return print(c);
     aa0:	89 81       	ldd	r24, Y+1	; 0x01
     aa2:	9a 81       	ldd	r25, Y+2	; 0x02
     aa4:	6b 81       	ldd	r22, Y+3	; 0x03
     aa6:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <_ZN6Stream5printEc>
	}
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	cf 91       	pop	r28
     ab2:	df 91       	pop	r29
     ab4:	08 95       	ret

00000ab6 <_ZN6StreamlsEa>:
		return print(num);
	}
	Stream& operator<< (uint32_t num ){
		return print(num);
	}
	Stream& operator<< (int8_t num ){
     ab6:	df 93       	push	r29
     ab8:	cf 93       	push	r28
     aba:	00 d0       	rcall	.+0      	; 0xabc <_ZN6StreamlsEa+0x6>
     abc:	0f 92       	push	r0
     abe:	cd b7       	in	r28, 0x3d	; 61
     ac0:	de b7       	in	r29, 0x3e	; 62
     ac2:	9a 83       	std	Y+2, r25	; 0x02
     ac4:	89 83       	std	Y+1, r24	; 0x01
     ac6:	6b 83       	std	Y+3, r22	; 0x03
		return print(num);
     ac8:	89 81       	ldd	r24, Y+1	; 0x01
     aca:	9a 81       	ldd	r25, Y+2	; 0x02
     acc:	6b 81       	ldd	r22, Y+3	; 0x03
     ace:	0e 94 10 10 	call	0x2020	; 0x2020 <_ZN6Stream5printEa>
	}
     ad2:	0f 90       	pop	r0
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	cf 91       	pop	r28
     ada:	df 91       	pop	r29
     adc:	08 95       	ret

00000ade <_ZN6StreamlsEd>:
		return print(num);
	}
	Stream& operator<< (int32_t num ){
		return print(num);
	}
	Stream& operator<< (double num ){
     ade:	df 93       	push	r29
     ae0:	cf 93       	push	r28
     ae2:	00 d0       	rcall	.+0      	; 0xae4 <_ZN6StreamlsEd+0x6>
     ae4:	00 d0       	rcall	.+0      	; 0xae6 <_ZN6StreamlsEd+0x8>
     ae6:	00 d0       	rcall	.+0      	; 0xae8 <_ZN6StreamlsEd+0xa>
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	9a 83       	std	Y+2, r25	; 0x02
     aee:	89 83       	std	Y+1, r24	; 0x01
     af0:	4b 83       	std	Y+3, r20	; 0x03
     af2:	5c 83       	std	Y+4, r21	; 0x04
     af4:	6d 83       	std	Y+5, r22	; 0x05
     af6:	7e 83       	std	Y+6, r23	; 0x06
		return print(num);
     af8:	89 81       	ldd	r24, Y+1	; 0x01
     afa:	9a 81       	ldd	r25, Y+2	; 0x02
     afc:	2b 81       	ldd	r18, Y+3	; 0x03
     afe:	3c 81       	ldd	r19, Y+4	; 0x04
     b00:	4d 81       	ldd	r20, Y+5	; 0x05
     b02:	5e 81       	ldd	r21, Y+6	; 0x06
     b04:	ba 01       	movw	r22, r20
     b06:	a9 01       	movw	r20, r18
     b08:	22 e0       	ldi	r18, 0x02	; 2
     b0a:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <_ZN6Stream5printEdh>
	}
     b0e:	26 96       	adiw	r28, 0x06	; 6
     b10:	0f b6       	in	r0, 0x3f	; 63
     b12:	f8 94       	cli
     b14:	de bf       	out	0x3e, r29	; 62
     b16:	0f be       	out	0x3f, r0	; 63
     b18:	cd bf       	out	0x3d, r28	; 61
     b1a:	cf 91       	pop	r28
     b1c:	df 91       	pop	r29
     b1e:	08 95       	ret

00000b20 <_ZN6StreamlsEi>:
		return print(num);
	}
	Stream& operator<< (int8_t num ){
		return print(num);
	}
	Stream& operator<< (int16_t num ){
     b20:	df 93       	push	r29
     b22:	cf 93       	push	r28
     b24:	00 d0       	rcall	.+0      	; 0xb26 <_ZN6StreamlsEi+0x6>
     b26:	00 d0       	rcall	.+0      	; 0xb28 <_ZN6StreamlsEi+0x8>
     b28:	cd b7       	in	r28, 0x3d	; 61
     b2a:	de b7       	in	r29, 0x3e	; 62
     b2c:	9a 83       	std	Y+2, r25	; 0x02
     b2e:	89 83       	std	Y+1, r24	; 0x01
     b30:	7c 83       	std	Y+4, r23	; 0x04
     b32:	6b 83       	std	Y+3, r22	; 0x03
		return print(num);
     b34:	89 81       	ldd	r24, Y+1	; 0x01
     b36:	9a 81       	ldd	r25, Y+2	; 0x02
     b38:	2b 81       	ldd	r18, Y+3	; 0x03
     b3a:	3c 81       	ldd	r19, Y+4	; 0x04
     b3c:	b9 01       	movw	r22, r18
     b3e:	0e 94 07 10 	call	0x200e	; 0x200e <_ZN6Stream5printEi>
	}
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	0f 90       	pop	r0
     b4a:	cf 91       	pop	r28
     b4c:	df 91       	pop	r29
     b4e:	08 95       	ret

00000b50 <_ZN6StreamlsEPKc>:
	// Dump the value of a sensor
	Stream& operator<< (Sensor& sensor ){
		return print(sensor);
	}

	Stream& operator<< (const char str[] ){
     b50:	df 93       	push	r29
     b52:	cf 93       	push	r28
     b54:	00 d0       	rcall	.+0      	; 0xb56 <_ZN6StreamlsEPKc+0x6>
     b56:	00 d0       	rcall	.+0      	; 0xb58 <_ZN6StreamlsEPKc+0x8>
     b58:	cd b7       	in	r28, 0x3d	; 61
     b5a:	de b7       	in	r29, 0x3e	; 62
     b5c:	9a 83       	std	Y+2, r25	; 0x02
     b5e:	89 83       	std	Y+1, r24	; 0x01
     b60:	7c 83       	std	Y+4, r23	; 0x04
     b62:	6b 83       	std	Y+3, r22	; 0x03
		return print(str);
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	9a 81       	ldd	r25, Y+2	; 0x02
     b68:	2b 81       	ldd	r18, Y+3	; 0x03
     b6a:	3c 81       	ldd	r19, Y+4	; 0x04
     b6c:	b9 01       	movw	r22, r18
     b6e:	0e 94 2e 10 	call	0x205c	; 0x205c <_ZN6Stream5printEPKc>
	}
     b72:	0f 90       	pop	r0
     b74:	0f 90       	pop	r0
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <_Z6to_intc>:
		cout << "  Servo #" << ia << "Has changed?:" << (*command).has_changed[ia] << ": Target pos: " << (*command).servo_target_positions[ia] << ": Current pos: " << (*command).servo_current_positions[ia] << " Speed: " << (*command).servo_speeds[ia] << " Spt: " << (*command).servo_speed_per_tick[ia] << "\n";
	}
}


int to_int (char chr) {
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	00 d0       	rcall	.+0      	; 0xb86 <_Z6to_intc+0x6>
     b86:	00 d0       	rcall	.+0      	; 0xb88 <_Z6to_intc+0x8>
     b88:	0f 92       	push	r0
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
     b8e:	8b 83       	std	Y+3, r24	; 0x03
	int i = chr - '0';
     b90:	8b 81       	ldd	r24, Y+3	; 0x03
     b92:	88 2f       	mov	r24, r24
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	c0 97       	sbiw	r24, 0x30	; 48
     b98:	9a 83       	std	Y+2, r25	; 0x02
     b9a:	89 83       	std	Y+1, r24	; 0x01
	if (VERBOSE==1) {
     b9c:	80 91 b4 05 	lds	r24, 0x05B4
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	19 f5       	brne	.+70     	; 0xbea <_Z6to_intc+0x6a>
		cout << "\n To_int'd number:" << i << "\n";
     ba4:	80 91 2c 10 	lds	r24, 0x102C
     ba8:	90 91 2d 10 	lds	r25, 0x102D
     bac:	00 97       	sbiw	r24, 0x00	; 0
     bae:	51 f0       	breq	.+20     	; 0xbc4 <_Z6to_intc+0x44>
     bb0:	80 91 2c 10 	lds	r24, 0x102C
     bb4:	90 91 2d 10 	lds	r25, 0x102D
     bb8:	9c 01       	movw	r18, r24
     bba:	22 50       	subi	r18, 0x02	; 2
     bbc:	30 40       	sbci	r19, 0x00	; 0
     bbe:	3d 83       	std	Y+5, r19	; 0x05
     bc0:	2c 83       	std	Y+4, r18	; 0x04
     bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <_Z6to_intc+0x48>
     bc4:	1d 82       	std	Y+5, r1	; 0x05
     bc6:	1c 82       	std	Y+4, r1	; 0x04
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	32 e0       	ldi	r19, 0x02	; 2
     bcc:	8c 81       	ldd	r24, Y+4	; 0x04
     bce:	9d 81       	ldd	r25, Y+5	; 0x05
     bd0:	b9 01       	movw	r22, r18
     bd2:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
     bd6:	29 81       	ldd	r18, Y+1	; 0x01
     bd8:	3a 81       	ldd	r19, Y+2	; 0x02
     bda:	b9 01       	movw	r22, r18
     bdc:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN6StreamlsEi>
     be0:	23 e1       	ldi	r18, 0x13	; 19
     be2:	32 e0       	ldi	r19, 0x02	; 2
     be4:	b9 01       	movw	r22, r18
     be6:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
	}
	return i;
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	9a 81       	ldd	r25, Y+2	; 0x02
}
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	cf 91       	pop	r28
     bfa:	df 91       	pop	r29
     bfc:	08 95       	ret

00000bfe <_ZN6StreamlsEm>:
		return print(num);
	}
	Stream& operator<< (uint16_t num ){
		return print(num);
	}
	Stream& operator<< (uint32_t num ){
     bfe:	df 93       	push	r29
     c00:	cf 93       	push	r28
     c02:	00 d0       	rcall	.+0      	; 0xc04 <_ZN6StreamlsEm+0x6>
     c04:	00 d0       	rcall	.+0      	; 0xc06 <_ZN6StreamlsEm+0x8>
     c06:	00 d0       	rcall	.+0      	; 0xc08 <_ZN6StreamlsEm+0xa>
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
     c0c:	9a 83       	std	Y+2, r25	; 0x02
     c0e:	89 83       	std	Y+1, r24	; 0x01
     c10:	4b 83       	std	Y+3, r20	; 0x03
     c12:	5c 83       	std	Y+4, r21	; 0x04
     c14:	6d 83       	std	Y+5, r22	; 0x05
     c16:	7e 83       	std	Y+6, r23	; 0x06
		return print(num);
     c18:	89 81       	ldd	r24, Y+1	; 0x01
     c1a:	9a 81       	ldd	r25, Y+2	; 0x02
     c1c:	2b 81       	ldd	r18, Y+3	; 0x03
     c1e:	3c 81       	ldd	r19, Y+4	; 0x04
     c20:	4d 81       	ldd	r20, Y+5	; 0x05
     c22:	5e 81       	ldd	r21, Y+6	; 0x06
     c24:	ba 01       	movw	r22, r20
     c26:	a9 01       	movw	r20, r18
     c28:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <_ZN6Stream5printEm>
	}
     c2c:	26 96       	adiw	r28, 0x06	; 6
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	f8 94       	cli
     c32:	de bf       	out	0x3e, r29	; 62
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	cd bf       	out	0x3d, r28	; 61
     c38:	cf 91       	pop	r28
     c3a:	df 91       	pop	r29
     c3c:	08 95       	ret

00000c3e <_Z13print_commandP7commandm>:
		(*command).servo_speed_per_tick[i]=100;
	}
}


void print_command (struct command* command, TICK_COUNT loop_number) {
     c3e:	df 93       	push	r29
     c40:	cf 93       	push	r28
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	2d 97       	sbiw	r28, 0x0d	; 13
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	f8 94       	cli
     c4c:	de bf       	out	0x3e, r29	; 62
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	cd bf       	out	0x3d, r28	; 61
     c52:	9b 83       	std	Y+3, r25	; 0x03
     c54:	8a 83       	std	Y+2, r24	; 0x02
     c56:	4c 83       	std	Y+4, r20	; 0x04
     c58:	5d 83       	std	Y+5, r21	; 0x05
     c5a:	6e 83       	std	Y+6, r22	; 0x06
     c5c:	7f 83       	std	Y+7, r23	; 0x07
	if (loop_number) {
     c5e:	8c 81       	ldd	r24, Y+4	; 0x04
     c60:	9d 81       	ldd	r25, Y+5	; 0x05
     c62:	ae 81       	ldd	r26, Y+6	; 0x06
     c64:	bf 81       	ldd	r27, Y+7	; 0x07
     c66:	00 97       	sbiw	r24, 0x00	; 0
     c68:	a1 05       	cpc	r26, r1
     c6a:	b1 05       	cpc	r27, r1
     c6c:	31 f1       	breq	.+76     	; 0xcba <_Z13print_commandP7commandm+0x7c>
		cout << "Loop " << loop_number << "\n";
     c6e:	80 91 2c 10 	lds	r24, 0x102C
     c72:	90 91 2d 10 	lds	r25, 0x102D
     c76:	00 97       	sbiw	r24, 0x00	; 0
     c78:	51 f0       	breq	.+20     	; 0xc8e <_Z13print_commandP7commandm+0x50>
     c7a:	80 91 2c 10 	lds	r24, 0x102C
     c7e:	90 91 2d 10 	lds	r25, 0x102D
     c82:	9c 01       	movw	r18, r24
     c84:	22 50       	subi	r18, 0x02	; 2
     c86:	30 40       	sbci	r19, 0x00	; 0
     c88:	3d 87       	std	Y+13, r19	; 0x0d
     c8a:	2c 87       	std	Y+12, r18	; 0x0c
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <_Z13print_commandP7commandm+0x54>
     c8e:	1d 86       	std	Y+13, r1	; 0x0d
     c90:	1c 86       	std	Y+12, r1	; 0x0c
     c92:	25 e1       	ldi	r18, 0x15	; 21
     c94:	32 e0       	ldi	r19, 0x02	; 2
     c96:	8c 85       	ldd	r24, Y+12	; 0x0c
     c98:	9d 85       	ldd	r25, Y+13	; 0x0d
     c9a:	b9 01       	movw	r22, r18
     c9c:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
     ca0:	2c 81       	ldd	r18, Y+4	; 0x04
     ca2:	3d 81       	ldd	r19, Y+5	; 0x05
     ca4:	4e 81       	ldd	r20, Y+6	; 0x06
     ca6:	5f 81       	ldd	r21, Y+7	; 0x07
     ca8:	ba 01       	movw	r22, r20
     caa:	a9 01       	movw	r20, r18
     cac:	0e 94 ff 05 	call	0xbfe	; 0xbfe <_ZN6StreamlsEm>
     cb0:	23 e1       	ldi	r18, 0x13	; 19
     cb2:	32 e0       	ldi	r19, 0x02	; 2
     cb4:	b9 01       	movw	r22, r18
     cb6:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
	}
	cout << "command:\nTime to execute: " << (*command).time << "\r\n";
     cba:	80 91 2c 10 	lds	r24, 0x102C
     cbe:	90 91 2d 10 	lds	r25, 0x102D
     cc2:	00 97       	sbiw	r24, 0x00	; 0
     cc4:	51 f0       	breq	.+20     	; 0xcda <_Z13print_commandP7commandm+0x9c>
     cc6:	80 91 2c 10 	lds	r24, 0x102C
     cca:	90 91 2d 10 	lds	r25, 0x102D
     cce:	9c 01       	movw	r18, r24
     cd0:	22 50       	subi	r18, 0x02	; 2
     cd2:	30 40       	sbci	r19, 0x00	; 0
     cd4:	3b 87       	std	Y+11, r19	; 0x0b
     cd6:	2a 87       	std	Y+10, r18	; 0x0a
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <_Z13print_commandP7commandm+0xa0>
     cda:	1b 86       	std	Y+11, r1	; 0x0b
     cdc:	1a 86       	std	Y+10, r1	; 0x0a
     cde:	2b e1       	ldi	r18, 0x1B	; 27
     ce0:	32 e0       	ldi	r19, 0x02	; 2
     ce2:	8a 85       	ldd	r24, Y+10	; 0x0a
     ce4:	9b 85       	ldd	r25, Y+11	; 0x0b
     ce6:	b9 01       	movw	r22, r18
     ce8:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
     cec:	ac 01       	movw	r20, r24
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	9b 81       	ldd	r25, Y+3	; 0x03
     cf2:	fc 01       	movw	r30, r24
     cf4:	e5 54       	subi	r30, 0x45	; 69
     cf6:	ff 4f       	sbci	r31, 0xFF	; 255
     cf8:	20 81       	ld	r18, Z
     cfa:	31 81       	ldd	r19, Z+1	; 0x01
     cfc:	ca 01       	movw	r24, r20
     cfe:	b9 01       	movw	r22, r18
     d00:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN6StreamlsEi>
     d04:	26 e3       	ldi	r18, 0x36	; 54
     d06:	32 e0       	ldi	r19, 0x02	; 2
     d08:	b9 01       	movw	r22, r18
     d0a:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
	int8_t ia;
	for (ia=0; ia <= SERVOS_NUMBER; ia++) {
     d0e:	19 82       	std	Y+1, r1	; 0x01
     d10:	af c0       	rjmp	.+350    	; 0xe70 <_Z13print_commandP7commandm+0x232>
		cout << "  Servo #" << ia << "Has changed?:" << (*command).has_changed[ia] << ": Target pos: " << (*command).servo_target_positions[ia] << ": Current pos: " << (*command).servo_current_positions[ia] << " Speed: " << (*command).servo_speeds[ia] << " Spt: " << (*command).servo_speed_per_tick[ia] << "\n";
     d12:	80 91 2c 10 	lds	r24, 0x102C
     d16:	90 91 2d 10 	lds	r25, 0x102D
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	51 f0       	breq	.+20     	; 0xd32 <_Z13print_commandP7commandm+0xf4>
     d1e:	80 91 2c 10 	lds	r24, 0x102C
     d22:	90 91 2d 10 	lds	r25, 0x102D
     d26:	9c 01       	movw	r18, r24
     d28:	22 50       	subi	r18, 0x02	; 2
     d2a:	30 40       	sbci	r19, 0x00	; 0
     d2c:	39 87       	std	Y+9, r19	; 0x09
     d2e:	28 87       	std	Y+8, r18	; 0x08
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <_Z13print_commandP7commandm+0xf8>
     d32:	19 86       	std	Y+9, r1	; 0x09
     d34:	18 86       	std	Y+8, r1	; 0x08
     d36:	29 e3       	ldi	r18, 0x39	; 57
     d38:	32 e0       	ldi	r19, 0x02	; 2
     d3a:	88 85       	ldd	r24, Y+8	; 0x08
     d3c:	99 85       	ldd	r25, Y+9	; 0x09
     d3e:	b9 01       	movw	r22, r18
     d40:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
     d44:	69 81       	ldd	r22, Y+1	; 0x01
     d46:	0e 94 5b 05 	call	0xab6	; 0xab6 <_ZN6StreamlsEa>
     d4a:	23 e4       	ldi	r18, 0x43	; 67
     d4c:	32 e0       	ldi	r19, 0x02	; 2
     d4e:	b9 01       	movw	r22, r18
     d50:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
     d54:	ac 01       	movw	r20, r24
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	28 2f       	mov	r18, r24
     d5a:	33 27       	eor	r19, r19
     d5c:	27 fd       	sbrc	r18, 7
     d5e:	30 95       	com	r19
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	9b 81       	ldd	r25, Y+3	; 0x03
     d64:	fc 01       	movw	r30, r24
     d66:	e2 0f       	add	r30, r18
     d68:	f3 1f       	adc	r31, r19
     d6a:	20 81       	ld	r18, Z
     d6c:	ca 01       	movw	r24, r20
     d6e:	62 2f       	mov	r22, r18
     d70:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN6StreamlsEh>
     d74:	21 e5       	ldi	r18, 0x51	; 81
     d76:	32 e0       	ldi	r19, 0x02	; 2
     d78:	b9 01       	movw	r22, r18
     d7a:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
     d7e:	bc 01       	movw	r22, r24
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	99 27       	eor	r25, r25
     d84:	87 fd       	sbrc	r24, 7
     d86:	90 95       	com	r25
     d88:	2a 81       	ldd	r18, Y+2	; 0x02
     d8a:	3b 81       	ldd	r19, Y+3	; 0x03
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	82 0f       	add	r24, r18
     d96:	93 1f       	adc	r25, r19
     d98:	fc 01       	movw	r30, r24
     d9a:	3b 96       	adiw	r30, 0x0b	; 11
     d9c:	20 81       	ld	r18, Z
     d9e:	31 81       	ldd	r19, Z+1	; 0x01
     da0:	42 81       	ldd	r20, Z+2	; 0x02
     da2:	53 81       	ldd	r21, Z+3	; 0x03
     da4:	cb 01       	movw	r24, r22
     da6:	ba 01       	movw	r22, r20
     da8:	a9 01       	movw	r20, r18
     daa:	0e 94 6f 05 	call	0xade	; 0xade <_ZN6StreamlsEd>
     dae:	20 e6       	ldi	r18, 0x60	; 96
     db0:	32 e0       	ldi	r19, 0x02	; 2
     db2:	b9 01       	movw	r22, r18
     db4:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
     db8:	bc 01       	movw	r22, r24
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	99 27       	eor	r25, r25
     dbe:	87 fd       	sbrc	r24, 7
     dc0:	90 95       	com	r25
     dc2:	2a 81       	ldd	r18, Y+2	; 0x02
     dc4:	3b 81       	ldd	r19, Y+3	; 0x03
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	82 0f       	add	r24, r18
     dd0:	93 1f       	adc	r25, r19
     dd2:	fc 01       	movw	r30, r24
     dd4:	f7 96       	adiw	r30, 0x37	; 55
     dd6:	20 81       	ld	r18, Z
     dd8:	31 81       	ldd	r19, Z+1	; 0x01
     dda:	42 81       	ldd	r20, Z+2	; 0x02
     ddc:	53 81       	ldd	r21, Z+3	; 0x03
     dde:	cb 01       	movw	r24, r22
     de0:	ba 01       	movw	r22, r20
     de2:	a9 01       	movw	r20, r18
     de4:	0e 94 6f 05 	call	0xade	; 0xade <_ZN6StreamlsEd>
     de8:	20 e7       	ldi	r18, 0x70	; 112
     dea:	32 e0       	ldi	r19, 0x02	; 2
     dec:	b9 01       	movw	r22, r18
     dee:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
     df2:	bc 01       	movw	r22, r24
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	99 27       	eor	r25, r25
     df8:	87 fd       	sbrc	r24, 7
     dfa:	90 95       	com	r25
     dfc:	2a 81       	ldd	r18, Y+2	; 0x02
     dfe:	3b 81       	ldd	r19, Y+3	; 0x03
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	82 0f       	add	r24, r18
     e0a:	93 1f       	adc	r25, r19
     e0c:	fc 01       	movw	r30, r24
     e0e:	ed 59       	subi	r30, 0x9D	; 157
     e10:	ff 4f       	sbci	r31, 0xFF	; 255
     e12:	20 81       	ld	r18, Z
     e14:	31 81       	ldd	r19, Z+1	; 0x01
     e16:	42 81       	ldd	r20, Z+2	; 0x02
     e18:	53 81       	ldd	r21, Z+3	; 0x03
     e1a:	cb 01       	movw	r24, r22
     e1c:	ba 01       	movw	r22, r20
     e1e:	a9 01       	movw	r20, r18
     e20:	0e 94 6f 05 	call	0xade	; 0xade <_ZN6StreamlsEd>
     e24:	29 e7       	ldi	r18, 0x79	; 121
     e26:	32 e0       	ldi	r19, 0x02	; 2
     e28:	b9 01       	movw	r22, r18
     e2a:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
     e2e:	bc 01       	movw	r22, r24
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	99 27       	eor	r25, r25
     e34:	87 fd       	sbrc	r24, 7
     e36:	90 95       	com	r25
     e38:	2a 81       	ldd	r18, Y+2	; 0x02
     e3a:	3b 81       	ldd	r19, Y+3	; 0x03
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	82 0f       	add	r24, r18
     e46:	93 1f       	adc	r25, r19
     e48:	fc 01       	movw	r30, r24
     e4a:	e1 57       	subi	r30, 0x71	; 113
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	20 81       	ld	r18, Z
     e50:	31 81       	ldd	r19, Z+1	; 0x01
     e52:	42 81       	ldd	r20, Z+2	; 0x02
     e54:	53 81       	ldd	r21, Z+3	; 0x03
     e56:	cb 01       	movw	r24, r22
     e58:	ba 01       	movw	r22, r20
     e5a:	a9 01       	movw	r20, r18
     e5c:	0e 94 6f 05 	call	0xade	; 0xade <_ZN6StreamlsEd>
     e60:	23 e1       	ldi	r18, 0x13	; 19
     e62:	32 e0       	ldi	r19, 0x02	; 2
     e64:	b9 01       	movw	r22, r18
     e66:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
	if (loop_number) {
		cout << "Loop " << loop_number << "\n";
	}
	cout << "command:\nTime to execute: " << (*command).time << "\r\n";
	int8_t ia;
	for (ia=0; ia <= SERVOS_NUMBER; ia++) {
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	8f 5f       	subi	r24, 0xFF	; 255
     e6e:	89 83       	std	Y+1, r24	; 0x01
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	8c 30       	cpi	r24, 0x0C	; 12
     e74:	0c f4       	brge	.+2      	; 0xe78 <_Z13print_commandP7commandm+0x23a>
     e76:	4d cf       	rjmp	.-358    	; 0xd12 <_Z13print_commandP7commandm+0xd4>
		cout << "  Servo #" << ia << "Has changed?:" << (*command).has_changed[ia] << ": Target pos: " << (*command).servo_target_positions[ia] << ": Current pos: " << (*command).servo_current_positions[ia] << " Speed: " << (*command).servo_speeds[ia] << " Spt: " << (*command).servo_speed_per_tick[ia] << "\n";
	}
}
     e78:	2d 96       	adiw	r28, 0x0d	; 13
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	cd bf       	out	0x3d, r28	; 61
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	08 95       	ret

00000e8a <_Z6readerhR4UartPv>:
	}
	return i;
}


void reader(unsigned char data, Uart& uart, void* param) {
     e8a:	cf 92       	push	r12
     e8c:	df 92       	push	r13
     e8e:	ef 92       	push	r14
     e90:	ff 92       	push	r15
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	a6 97       	sbiw	r28, 0x26	; 38
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	8c 83       	std	Y+4, r24	; 0x04
     eac:	7e 83       	std	Y+6, r23	; 0x06
     eae:	6d 83       	std	Y+5, r22	; 0x05
     eb0:	58 87       	std	Y+8, r21	; 0x08
     eb2:	4f 83       	std	Y+7, r20	; 0x07
	cout << "Received char: " << data << "\n";
     eb4:	80 91 2c 10 	lds	r24, 0x102C
     eb8:	90 91 2d 10 	lds	r25, 0x102D
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	51 f0       	breq	.+20     	; 0xed4 <_Z6readerhR4UartPv+0x4a>
     ec0:	80 91 2c 10 	lds	r24, 0x102C
     ec4:	90 91 2d 10 	lds	r25, 0x102D
     ec8:	9c 01       	movw	r18, r24
     eca:	22 50       	subi	r18, 0x02	; 2
     ecc:	30 40       	sbci	r19, 0x00	; 0
     ece:	3e a3       	std	Y+38, r19	; 0x26
     ed0:	2d a3       	std	Y+37, r18	; 0x25
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <_Z6readerhR4UartPv+0x4e>
     ed4:	1e a2       	std	Y+38, r1	; 0x26
     ed6:	1d a2       	std	Y+37, r1	; 0x25
     ed8:	20 e8       	ldi	r18, 0x80	; 128
     eda:	32 e0       	ldi	r19, 0x02	; 2
     edc:	8d a1       	ldd	r24, Y+37	; 0x25
     ede:	9e a1       	ldd	r25, Y+38	; 0x26
     ee0:	b9 01       	movw	r22, r18
     ee2:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
     ee6:	6c 81       	ldd	r22, Y+4	; 0x04
     ee8:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN6StreamlsEh>
     eec:	23 e1       	ldi	r18, 0x13	; 19
     eee:	32 e0       	ldi	r19, 0x02	; 2
     ef0:	b9 01       	movw	r22, r18
     ef2:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
	switch (data) {
     ef6:	8c 81       	ldd	r24, Y+4	; 0x04
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	3c a3       	std	Y+36, r19	; 0x24
     efe:	2b a3       	std	Y+35, r18	; 0x23
     f00:	8b a1       	ldd	r24, Y+35	; 0x23
     f02:	9c a1       	ldd	r25, Y+36	; 0x24
     f04:	8a 33       	cpi	r24, 0x3A	; 58
     f06:	91 05       	cpc	r25, r1
     f08:	2c f5       	brge	.+74     	; 0xf54 <_Z6readerhR4UartPv+0xca>
     f0a:	2b a1       	ldd	r18, Y+35	; 0x23
     f0c:	3c a1       	ldd	r19, Y+36	; 0x24
     f0e:	20 33       	cpi	r18, 0x30	; 48
     f10:	31 05       	cpc	r19, r1
     f12:	0c f0       	brlt	.+2      	; 0xf16 <_Z6readerhR4UartPv+0x8c>
     f14:	37 c1       	rjmp	.+622    	; 0x1184 <_Z6readerhR4UartPv+0x2fa>
     f16:	8b a1       	ldd	r24, Y+35	; 0x23
     f18:	9c a1       	ldd	r25, Y+36	; 0x24
     f1a:	8d 30       	cpi	r24, 0x0D	; 13
     f1c:	91 05       	cpc	r25, r1
     f1e:	09 f4       	brne	.+2      	; 0xf22 <_Z6readerhR4UartPv+0x98>
     f20:	06 c3       	rjmp	.+1548   	; 0x152e <_Z6readerhR4UartPv+0x6a4>
     f22:	2b a1       	ldd	r18, Y+35	; 0x23
     f24:	3c a1       	ldd	r19, Y+36	; 0x24
     f26:	2e 30       	cpi	r18, 0x0E	; 14
     f28:	31 05       	cpc	r19, r1
     f2a:	3c f4       	brge	.+14     	; 0xf3a <_Z6readerhR4UartPv+0xb0>
     f2c:	8b a1       	ldd	r24, Y+35	; 0x23
     f2e:	9c a1       	ldd	r25, Y+36	; 0x24
     f30:	8a 30       	cpi	r24, 0x0A	; 10
     f32:	91 05       	cpc	r25, r1
     f34:	09 f4       	brne	.+2      	; 0xf38 <_Z6readerhR4UartPv+0xae>
     f36:	fb c2       	rjmp	.+1526   	; 0x152e <_Z6readerhR4UartPv+0x6a4>
     f38:	5c c3       	rjmp	.+1720   	; 0x15f2 <_Z6readerhR4UartPv+0x768>
     f3a:	2b a1       	ldd	r18, Y+35	; 0x23
     f3c:	3c a1       	ldd	r19, Y+36	; 0x24
     f3e:	20 32       	cpi	r18, 0x20	; 32
     f40:	31 05       	cpc	r19, r1
     f42:	09 f4       	brne	.+2      	; 0xf46 <_Z6readerhR4UartPv+0xbc>
     f44:	f0 c2       	rjmp	.+1504   	; 0x1526 <_Z6readerhR4UartPv+0x69c>
     f46:	8b a1       	ldd	r24, Y+35	; 0x23
     f48:	9c a1       	ldd	r25, Y+36	; 0x24
     f4a:	83 32       	cpi	r24, 0x23	; 35
     f4c:	91 05       	cpc	r25, r1
     f4e:	09 f4       	brne	.+2      	; 0xf52 <_Z6readerhR4UartPv+0xc8>
     f50:	63 c0       	rjmp	.+198    	; 0x1018 <_Z6readerhR4UartPv+0x18e>
     f52:	4f c3       	rjmp	.+1694   	; 0x15f2 <_Z6readerhR4UartPv+0x768>
     f54:	2b a1       	ldd	r18, Y+35	; 0x23
     f56:	3c a1       	ldd	r19, Y+36	; 0x24
     f58:	20 35       	cpi	r18, 0x50	; 80
     f5a:	31 05       	cpc	r19, r1
     f5c:	09 f4       	brne	.+2      	; 0xf60 <_Z6readerhR4UartPv+0xd6>
     f5e:	80 c0       	rjmp	.+256    	; 0x1060 <_Z6readerhR4UartPv+0x1d6>
     f60:	8b a1       	ldd	r24, Y+35	; 0x23
     f62:	9c a1       	ldd	r25, Y+36	; 0x24
     f64:	81 35       	cpi	r24, 0x51	; 81
     f66:	91 05       	cpc	r25, r1
     f68:	34 f4       	brge	.+12     	; 0xf76 <_Z6readerhR4UartPv+0xec>
     f6a:	2b a1       	ldd	r18, Y+35	; 0x23
     f6c:	3c a1       	ldd	r19, Y+36	; 0x24
     f6e:	2f 33       	cpi	r18, 0x3F	; 63
     f70:	31 05       	cpc	r19, r1
     f72:	71 f0       	breq	.+28     	; 0xf90 <_Z6readerhR4UartPv+0x106>
     f74:	3e c3       	rjmp	.+1660   	; 0x15f2 <_Z6readerhR4UartPv+0x768>
     f76:	8b a1       	ldd	r24, Y+35	; 0x23
     f78:	9c a1       	ldd	r25, Y+36	; 0x24
     f7a:	83 35       	cpi	r24, 0x53	; 83
     f7c:	91 05       	cpc	r25, r1
     f7e:	09 f4       	brne	.+2      	; 0xf82 <_Z6readerhR4UartPv+0xf8>
     f80:	a5 c0       	rjmp	.+330    	; 0x10cc <_Z6readerhR4UartPv+0x242>
     f82:	2b a1       	ldd	r18, Y+35	; 0x23
     f84:	3c a1       	ldd	r19, Y+36	; 0x24
     f86:	24 35       	cpi	r18, 0x54	; 84
     f88:	31 05       	cpc	r19, r1
     f8a:	09 f4       	brne	.+2      	; 0xf8e <_Z6readerhR4UartPv+0x104>
     f8c:	d5 c0       	rjmp	.+426    	; 0x1138 <_Z6readerhR4UartPv+0x2ae>
     f8e:	31 c3       	rjmp	.+1634   	; 0x15f2 <_Z6readerhR4UartPv+0x768>
		case '?':
		{
			
			//subcommand "Toggle verbose TRUE/FALSE" 
			if (VERBOSE==0) {
     f90:	80 91 b4 05 	lds	r24, 0x05B4
     f94:	88 23       	and	r24, r24
     f96:	e9 f5       	brne	.+122    	; 0x1012 <_Z6readerhR4UartPv+0x188>
				VERBOSE = 1;
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	80 93 b4 05 	sts	0x05B4, r24
				int8_t i;
				for (i=0; i <= SERVOS_NUMBER; i++) {
     f9e:	1a 82       	std	Y+2, r1	; 0x02
     fa0:	34 c0       	rjmp	.+104    	; 0x100a <_Z6readerhR4UartPv+0x180>
					cout << "Current speed:" << (*servos[i]).getSpeed() << "\n";
     fa2:	80 91 2c 10 	lds	r24, 0x102C
     fa6:	90 91 2d 10 	lds	r25, 0x102D
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	51 f0       	breq	.+20     	; 0xfc2 <_Z6readerhR4UartPv+0x138>
     fae:	80 91 2c 10 	lds	r24, 0x102C
     fb2:	90 91 2d 10 	lds	r25, 0x102D
     fb6:	9c 01       	movw	r18, r24
     fb8:	22 50       	subi	r18, 0x02	; 2
     fba:	30 40       	sbci	r19, 0x00	; 0
     fbc:	3a a3       	std	Y+34, r19	; 0x22
     fbe:	29 a3       	std	Y+33, r18	; 0x21
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <_Z6readerhR4UartPv+0x13c>
     fc2:	1a a2       	std	Y+34, r1	; 0x22
     fc4:	19 a2       	std	Y+33, r1	; 0x21
     fc6:	20 e9       	ldi	r18, 0x90	; 144
     fc8:	32 e0       	ldi	r19, 0x02	; 2
     fca:	89 a1       	ldd	r24, Y+33	; 0x21
     fcc:	9a a1       	ldd	r25, Y+34	; 0x22
     fce:	b9 01       	movw	r22, r18
     fd0:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
     fd4:	8c 01       	movw	r16, r24
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	99 27       	eor	r25, r25
     fda:	87 fd       	sbrc	r24, 7
     fdc:	90 95       	com	r25
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	fc 01       	movw	r30, r24
     fe4:	e2 56       	subi	r30, 0x62	; 98
     fe6:	fa 4f       	sbci	r31, 0xFA	; 250
     fe8:	80 81       	ld	r24, Z
     fea:	91 81       	ldd	r25, Z+1	; 0x01
     fec:	0e 94 80 03 	call	0x700	; 0x700 <_ZNK8Actuator8getSpeedEv>
     ff0:	28 2f       	mov	r18, r24
     ff2:	c8 01       	movw	r24, r16
     ff4:	62 2f       	mov	r22, r18
     ff6:	0e 94 5b 05 	call	0xab6	; 0xab6 <_ZN6StreamlsEa>
     ffa:	23 e1       	ldi	r18, 0x13	; 19
     ffc:	32 e0       	ldi	r19, 0x02	; 2
     ffe:	b9 01       	movw	r22, r18
    1000:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
			
			//subcommand "Toggle verbose TRUE/FALSE" 
			if (VERBOSE==0) {
				VERBOSE = 1;
				int8_t i;
				for (i=0; i <= SERVOS_NUMBER; i++) {
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	8f 5f       	subi	r24, 0xFF	; 255
    1008:	8a 83       	std	Y+2, r24	; 0x02
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	8c 30       	cpi	r24, 0x0C	; 12
    100e:	4c f2       	brlt	.-110    	; 0xfa2 <_Z6readerhR4UartPv+0x118>
    1010:	f0 c2       	rjmp	.+1504   	; 0x15f2 <_Z6readerhR4UartPv+0x768>
					cout << "Current speed:" << (*servos[i]).getSpeed() << "\n";
				}
			} else {
				VERBOSE = 0;
    1012:	10 92 b4 05 	sts	0x05B4, r1
    1016:	ed c2       	rjmp	.+1498   	; 0x15f2 <_Z6readerhR4UartPv+0x768>
			break;
		}
		case '#':
		{
			//subcommand "Servo number"
			r_curr_servo = 0;
    1018:	10 92 30 07 	sts	0x0730, r1
			r_curr_subcommand = data;
    101c:	8c 81       	ldd	r24, Y+4	; 0x04
    101e:	80 93 2f 07 	sts	0x072F, r24
			if (VERBOSE==1) {
    1022:	80 91 b4 05 	lds	r24, 0x05B4
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	09 f0       	breq	.+2      	; 0x102c <_Z6readerhR4UartPv+0x1a2>
    102a:	e3 c2       	rjmp	.+1478   	; 0x15f2 <_Z6readerhR4UartPv+0x768>
				cout << "Received servo number command \n";
    102c:	80 91 2c 10 	lds	r24, 0x102C
    1030:	90 91 2d 10 	lds	r25, 0x102D
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	51 f0       	breq	.+20     	; 0x104c <_Z6readerhR4UartPv+0x1c2>
    1038:	80 91 2c 10 	lds	r24, 0x102C
    103c:	90 91 2d 10 	lds	r25, 0x102D
    1040:	9c 01       	movw	r18, r24
    1042:	22 50       	subi	r18, 0x02	; 2
    1044:	30 40       	sbci	r19, 0x00	; 0
    1046:	38 a3       	std	Y+32, r19	; 0x20
    1048:	2f 8f       	std	Y+31, r18	; 0x1f
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <_Z6readerhR4UartPv+0x1c6>
    104c:	18 a2       	std	Y+32, r1	; 0x20
    104e:	1f 8e       	std	Y+31, r1	; 0x1f
    1050:	2f e9       	ldi	r18, 0x9F	; 159
    1052:	32 e0       	ldi	r19, 0x02	; 2
    1054:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1056:	98 a1       	ldd	r25, Y+32	; 0x20
    1058:	b9 01       	movw	r22, r18
    105a:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
    105e:	c9 c2       	rjmp	.+1426   	; 0x15f2 <_Z6readerhR4UartPv+0x768>
			break;
		}
		case 'P':
		{
			//subcommand "Position"
			command_receiving.servo_target_positions[r_curr_servo] = 0;
    1060:	80 91 30 07 	lds	r24, 0x0730
    1064:	99 27       	eor	r25, r25
    1066:	87 fd       	sbrc	r24, 7
    1068:	90 95       	com	r25
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	fc 01       	movw	r30, r24
    1074:	e0 54       	subi	r30, 0x40	; 64
    1076:	fa 4f       	sbci	r31, 0xFA	; 250
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	a0 e0       	ldi	r26, 0x00	; 0
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	80 83       	st	Z, r24
    1082:	91 83       	std	Z+1, r25	; 0x01
    1084:	a2 83       	std	Z+2, r26	; 0x02
    1086:	b3 83       	std	Z+3, r27	; 0x03
			r_curr_subcommand = data;
    1088:	8c 81       	ldd	r24, Y+4	; 0x04
    108a:	80 93 2f 07 	sts	0x072F, r24
			if (VERBOSE==1) {
    108e:	80 91 b4 05 	lds	r24, 0x05B4
    1092:	81 30       	cpi	r24, 0x01	; 1
    1094:	09 f0       	breq	.+2      	; 0x1098 <_Z6readerhR4UartPv+0x20e>
    1096:	ad c2       	rjmp	.+1370   	; 0x15f2 <_Z6readerhR4UartPv+0x768>
				cout << "Received position command \n";
    1098:	80 91 2c 10 	lds	r24, 0x102C
    109c:	90 91 2d 10 	lds	r25, 0x102D
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	51 f0       	breq	.+20     	; 0x10b8 <_Z6readerhR4UartPv+0x22e>
    10a4:	80 91 2c 10 	lds	r24, 0x102C
    10a8:	90 91 2d 10 	lds	r25, 0x102D
    10ac:	9c 01       	movw	r18, r24
    10ae:	22 50       	subi	r18, 0x02	; 2
    10b0:	30 40       	sbci	r19, 0x00	; 0
    10b2:	3e 8f       	std	Y+30, r19	; 0x1e
    10b4:	2d 8f       	std	Y+29, r18	; 0x1d
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <_Z6readerhR4UartPv+0x232>
    10b8:	1e 8e       	std	Y+30, r1	; 0x1e
    10ba:	1d 8e       	std	Y+29, r1	; 0x1d
    10bc:	2f eb       	ldi	r18, 0xBF	; 191
    10be:	32 e0       	ldi	r19, 0x02	; 2
    10c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10c4:	b9 01       	movw	r22, r18
    10c6:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
    10ca:	93 c2       	rjmp	.+1318   	; 0x15f2 <_Z6readerhR4UartPv+0x768>
			break;
		}
		case 'S':
		{
			//subcommand "Speed"
			command_receiving.servo_speeds[r_curr_servo] = 0;
    10cc:	80 91 30 07 	lds	r24, 0x0730
    10d0:	99 27       	eor	r25, r25
    10d2:	87 fd       	sbrc	r24, 7
    10d4:	90 95       	com	r25
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	fc 01       	movw	r30, r24
    10e0:	e8 5e       	subi	r30, 0xE8	; 232
    10e2:	f9 4f       	sbci	r31, 0xF9	; 249
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	a0 e0       	ldi	r26, 0x00	; 0
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	80 83       	st	Z, r24
    10ee:	91 83       	std	Z+1, r25	; 0x01
    10f0:	a2 83       	std	Z+2, r26	; 0x02
    10f2:	b3 83       	std	Z+3, r27	; 0x03
			r_curr_subcommand = data;
    10f4:	8c 81       	ldd	r24, Y+4	; 0x04
    10f6:	80 93 2f 07 	sts	0x072F, r24
			if (VERBOSE==1) {
    10fa:	80 91 b4 05 	lds	r24, 0x05B4
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	09 f0       	breq	.+2      	; 0x1104 <_Z6readerhR4UartPv+0x27a>
    1102:	77 c2       	rjmp	.+1262   	; 0x15f2 <_Z6readerhR4UartPv+0x768>
				cout << "Received speed command \n";
    1104:	80 91 2c 10 	lds	r24, 0x102C
    1108:	90 91 2d 10 	lds	r25, 0x102D
    110c:	00 97       	sbiw	r24, 0x00	; 0
    110e:	51 f0       	breq	.+20     	; 0x1124 <_Z6readerhR4UartPv+0x29a>
    1110:	80 91 2c 10 	lds	r24, 0x102C
    1114:	90 91 2d 10 	lds	r25, 0x102D
    1118:	9c 01       	movw	r18, r24
    111a:	22 50       	subi	r18, 0x02	; 2
    111c:	30 40       	sbci	r19, 0x00	; 0
    111e:	3c 8f       	std	Y+28, r19	; 0x1c
    1120:	2b 8f       	std	Y+27, r18	; 0x1b
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <_Z6readerhR4UartPv+0x29e>
    1124:	1c 8e       	std	Y+28, r1	; 0x1c
    1126:	1b 8e       	std	Y+27, r1	; 0x1b
    1128:	2b ed       	ldi	r18, 0xDB	; 219
    112a:	32 e0       	ldi	r19, 0x02	; 2
    112c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    112e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1130:	b9 01       	movw	r22, r18
    1132:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
    1136:	5d c2       	rjmp	.+1210   	; 0x15f2 <_Z6readerhR4UartPv+0x768>
			break;
		}
		case 'T':
		{
			//subcommand "Time"
			command_receiving.time = 0;
    1138:	10 92 71 06 	sts	0x0671, r1
    113c:	10 92 70 06 	sts	0x0670, r1
			r_curr_subcommand = data;
    1140:	8c 81       	ldd	r24, Y+4	; 0x04
    1142:	80 93 2f 07 	sts	0x072F, r24
			if (VERBOSE==1) {
    1146:	80 91 b4 05 	lds	r24, 0x05B4
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	09 f0       	breq	.+2      	; 0x1150 <_Z6readerhR4UartPv+0x2c6>
    114e:	51 c2       	rjmp	.+1186   	; 0x15f2 <_Z6readerhR4UartPv+0x768>
				cout << "Received time command \n";
    1150:	80 91 2c 10 	lds	r24, 0x102C
    1154:	90 91 2d 10 	lds	r25, 0x102D
    1158:	00 97       	sbiw	r24, 0x00	; 0
    115a:	51 f0       	breq	.+20     	; 0x1170 <_Z6readerhR4UartPv+0x2e6>
    115c:	80 91 2c 10 	lds	r24, 0x102C
    1160:	90 91 2d 10 	lds	r25, 0x102D
    1164:	9c 01       	movw	r18, r24
    1166:	22 50       	subi	r18, 0x02	; 2
    1168:	30 40       	sbci	r19, 0x00	; 0
    116a:	3a 8f       	std	Y+26, r19	; 0x1a
    116c:	29 8f       	std	Y+25, r18	; 0x19
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <_Z6readerhR4UartPv+0x2ea>
    1170:	1a 8e       	std	Y+26, r1	; 0x1a
    1172:	19 8e       	std	Y+25, r1	; 0x19
    1174:	24 ef       	ldi	r18, 0xF4	; 244
    1176:	32 e0       	ldi	r19, 0x02	; 2
    1178:	89 8d       	ldd	r24, Y+25	; 0x19
    117a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    117c:	b9 01       	movw	r22, r18
    117e:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
    1182:	37 c2       	rjmp	.+1134   	; 0x15f2 <_Z6readerhR4UartPv+0x768>
		case '7':
		case '8':
		case '9':
		case '0':
		{
			if (VERBOSE==1) {
    1184:	80 91 b4 05 	lds	r24, 0x05B4
    1188:	81 30       	cpi	r24, 0x01	; 1
    118a:	19 f5       	brne	.+70     	; 0x11d2 <_Z6readerhR4UartPv+0x348>
				cout << "Received digit \n Current subcommand is " << r_curr_subcommand << "\n";
    118c:	80 91 2c 10 	lds	r24, 0x102C
    1190:	90 91 2d 10 	lds	r25, 0x102D
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	51 f0       	breq	.+20     	; 0x11ac <_Z6readerhR4UartPv+0x322>
    1198:	80 91 2c 10 	lds	r24, 0x102C
    119c:	90 91 2d 10 	lds	r25, 0x102D
    11a0:	9c 01       	movw	r18, r24
    11a2:	22 50       	subi	r18, 0x02	; 2
    11a4:	30 40       	sbci	r19, 0x00	; 0
    11a6:	38 8f       	std	Y+24, r19	; 0x18
    11a8:	2f 8b       	std	Y+23, r18	; 0x17
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <_Z6readerhR4UartPv+0x326>
    11ac:	18 8e       	std	Y+24, r1	; 0x18
    11ae:	1f 8a       	std	Y+23, r1	; 0x17
    11b0:	2c e0       	ldi	r18, 0x0C	; 12
    11b2:	33 e0       	ldi	r19, 0x03	; 3
    11b4:	8f 89       	ldd	r24, Y+23	; 0x17
    11b6:	98 8d       	ldd	r25, Y+24	; 0x18
    11b8:	b9 01       	movw	r22, r18
    11ba:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
    11be:	20 91 2f 07 	lds	r18, 0x072F
    11c2:	62 2f       	mov	r22, r18
    11c4:	0e 94 47 05 	call	0xa8e	; 0xa8e <_ZN6StreamlsEc>
    11c8:	23 e1       	ldi	r18, 0x13	; 19
    11ca:	32 e0       	ldi	r19, 0x02	; 2
    11cc:	b9 01       	movw	r22, r18
    11ce:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
			}
			switch (r_curr_subcommand) {
    11d2:	80 91 2f 07 	lds	r24, 0x072F
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	3e 8b       	std	Y+22, r19	; 0x16
    11dc:	2d 8b       	std	Y+21, r18	; 0x15
    11de:	8d 89       	ldd	r24, Y+21	; 0x15
    11e0:	9e 89       	ldd	r25, Y+22	; 0x16
    11e2:	83 35       	cpi	r24, 0x53	; 83
    11e4:	91 05       	cpc	r25, r1
    11e6:	09 f4       	brne	.+2      	; 0x11ea <_Z6readerhR4UartPv+0x360>
    11e8:	de c0       	rjmp	.+444    	; 0x13a6 <_Z6readerhR4UartPv+0x51c>
    11ea:	2d 89       	ldd	r18, Y+21	; 0x15
    11ec:	3e 89       	ldd	r19, Y+22	; 0x16
    11ee:	24 35       	cpi	r18, 0x54	; 84
    11f0:	31 05       	cpc	r19, r1
    11f2:	64 f4       	brge	.+24     	; 0x120c <_Z6readerhR4UartPv+0x382>
    11f4:	8d 89       	ldd	r24, Y+21	; 0x15
    11f6:	9e 89       	ldd	r25, Y+22	; 0x16
    11f8:	83 32       	cpi	r24, 0x23	; 35
    11fa:	91 05       	cpc	r25, r1
    11fc:	71 f0       	breq	.+28     	; 0x121a <_Z6readerhR4UartPv+0x390>
    11fe:	2d 89       	ldd	r18, Y+21	; 0x15
    1200:	3e 89       	ldd	r19, Y+22	; 0x16
    1202:	20 35       	cpi	r18, 0x50	; 80
    1204:	31 05       	cpc	r19, r1
    1206:	09 f4       	brne	.+2      	; 0x120a <_Z6readerhR4UartPv+0x380>
    1208:	47 c0       	rjmp	.+142    	; 0x1298 <_Z6readerhR4UartPv+0x40e>
    120a:	f3 c1       	rjmp	.+998    	; 0x15f2 <_Z6readerhR4UartPv+0x768>
    120c:	8d 89       	ldd	r24, Y+21	; 0x15
    120e:	9e 89       	ldd	r25, Y+22	; 0x16
    1210:	84 35       	cpi	r24, 0x54	; 84
    1212:	91 05       	cpc	r25, r1
    1214:	09 f4       	brne	.+2      	; 0x1218 <_Z6readerhR4UartPv+0x38e>
    1216:	44 c1       	rjmp	.+648    	; 0x14a0 <_Z6readerhR4UartPv+0x616>
    1218:	ec c1       	rjmp	.+984    	; 0x15f2 <_Z6readerhR4UartPv+0x768>
				case '#':
				{
					r_curr_servo = r_curr_servo*10 + to_int(data);
    121a:	80 91 30 07 	lds	r24, 0x0730
    121e:	99 27       	eor	r25, r25
    1220:	87 fd       	sbrc	r24, 7
    1222:	90 95       	com	r25
    1224:	9c 01       	movw	r18, r24
    1226:	22 0f       	add	r18, r18
    1228:	33 1f       	adc	r19, r19
    122a:	c9 01       	movw	r24, r18
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	82 0f       	add	r24, r18
    1236:	93 1f       	adc	r25, r19
    1238:	18 2f       	mov	r17, r24
    123a:	8c 81       	ldd	r24, Y+4	; 0x04
    123c:	0e 94 c0 05 	call	0xb80	; 0xb80 <_Z6to_intc>
    1240:	81 0f       	add	r24, r17
    1242:	80 93 30 07 	sts	0x0730, r24
					if (VERBOSE==1) {
    1246:	80 91 b4 05 	lds	r24, 0x05B4
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	09 f0       	breq	.+2      	; 0x1250 <_Z6readerhR4UartPv+0x3c6>
    124e:	d1 c1       	rjmp	.+930    	; 0x15f2 <_Z6readerhR4UartPv+0x768>
						cout << "Set current servo to:" << r_curr_servo << "\n";
    1250:	80 91 2c 10 	lds	r24, 0x102C
    1254:	90 91 2d 10 	lds	r25, 0x102D
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	51 f0       	breq	.+20     	; 0x1270 <_Z6readerhR4UartPv+0x3e6>
    125c:	80 91 2c 10 	lds	r24, 0x102C
    1260:	90 91 2d 10 	lds	r25, 0x102D
    1264:	9c 01       	movw	r18, r24
    1266:	22 50       	subi	r18, 0x02	; 2
    1268:	30 40       	sbci	r19, 0x00	; 0
    126a:	3c 8b       	std	Y+20, r19	; 0x14
    126c:	2b 8b       	std	Y+19, r18	; 0x13
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <_Z6readerhR4UartPv+0x3ea>
    1270:	1c 8a       	std	Y+20, r1	; 0x14
    1272:	1b 8a       	std	Y+19, r1	; 0x13
    1274:	24 e3       	ldi	r18, 0x34	; 52
    1276:	33 e0       	ldi	r19, 0x03	; 3
    1278:	8b 89       	ldd	r24, Y+19	; 0x13
    127a:	9c 89       	ldd	r25, Y+20	; 0x14
    127c:	b9 01       	movw	r22, r18
    127e:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
    1282:	20 91 30 07 	lds	r18, 0x0730
    1286:	62 2f       	mov	r22, r18
    1288:	0e 94 5b 05 	call	0xab6	; 0xab6 <_ZN6StreamlsEa>
    128c:	23 e1       	ldi	r18, 0x13	; 19
    128e:	32 e0       	ldi	r19, 0x02	; 2
    1290:	b9 01       	movw	r22, r18
    1292:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
    1296:	ad c1       	rjmp	.+858    	; 0x15f2 <_Z6readerhR4UartPv+0x768>
					}
					break;
				}
				case 'P':
				{
					command_receiving.servo_target_positions[r_curr_servo] = command_receiving.servo_target_positions[r_curr_servo]*10 + to_int(data);
    1298:	80 91 30 07 	lds	r24, 0x0730
    129c:	c8 2e       	mov	r12, r24
    129e:	dd 24       	eor	r13, r13
    12a0:	c7 fc       	sbrc	r12, 7
    12a2:	d0 94       	com	r13
    12a4:	80 91 30 07 	lds	r24, 0x0730
    12a8:	99 27       	eor	r25, r25
    12aa:	87 fd       	sbrc	r24, 7
    12ac:	90 95       	com	r25
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	fc 01       	movw	r30, r24
    12b8:	e0 54       	subi	r30, 0x40	; 64
    12ba:	fa 4f       	sbci	r31, 0xFA	; 250
    12bc:	80 81       	ld	r24, Z
    12be:	91 81       	ldd	r25, Z+1	; 0x01
    12c0:	a2 81       	ldd	r26, Z+2	; 0x02
    12c2:	b3 81       	ldd	r27, Z+3	; 0x03
    12c4:	bc 01       	movw	r22, r24
    12c6:	cd 01       	movw	r24, r26
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e2       	ldi	r20, 0x20	; 32
    12ce:	51 e4       	ldi	r21, 0x41	; 65
    12d0:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <__mulsf3>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	7c 01       	movw	r14, r24
    12da:	8d 01       	movw	r16, r26
    12dc:	8c 81       	ldd	r24, Y+4	; 0x04
    12de:	0e 94 c0 05 	call	0xb80	; 0xb80 <_Z6to_intc>
    12e2:	aa 27       	eor	r26, r26
    12e4:	97 fd       	sbrc	r25, 7
    12e6:	a0 95       	com	r26
    12e8:	ba 2f       	mov	r27, r26
    12ea:	bc 01       	movw	r22, r24
    12ec:	cd 01       	movw	r24, r26
    12ee:	0e 94 85 1c 	call	0x390a	; 0x390a <__floatsisf>
    12f2:	9b 01       	movw	r18, r22
    12f4:	ac 01       	movw	r20, r24
    12f6:	c8 01       	movw	r24, r16
    12f8:	b7 01       	movw	r22, r14
    12fa:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__addsf3>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	9c 01       	movw	r18, r24
    1304:	ad 01       	movw	r20, r26
    1306:	c6 01       	movw	r24, r12
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	fc 01       	movw	r30, r24
    1312:	e0 54       	subi	r30, 0x40	; 64
    1314:	fa 4f       	sbci	r31, 0xFA	; 250
    1316:	20 83       	st	Z, r18
    1318:	31 83       	std	Z+1, r19	; 0x01
    131a:	42 83       	std	Z+2, r20	; 0x02
    131c:	53 83       	std	Z+3, r21	; 0x03
					command_receiving.has_changed[r_curr_servo] = 1;
    131e:	80 91 30 07 	lds	r24, 0x0730
    1322:	99 27       	eor	r25, r25
    1324:	87 fd       	sbrc	r24, 7
    1326:	90 95       	com	r25
    1328:	fc 01       	movw	r30, r24
    132a:	eb 54       	subi	r30, 0x4B	; 75
    132c:	fa 4f       	sbci	r31, 0xFA	; 250
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	80 83       	st	Z, r24
					if (VERBOSE==1) {
    1332:	80 91 b4 05 	lds	r24, 0x05B4
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	09 f0       	breq	.+2      	; 0x133c <_Z6readerhR4UartPv+0x4b2>
    133a:	5b c1       	rjmp	.+694    	; 0x15f2 <_Z6readerhR4UartPv+0x768>
						cout << "Set current servo target position to:" << command_receiving.servo_target_positions[r_curr_servo] << "\n";
    133c:	80 91 2c 10 	lds	r24, 0x102C
    1340:	90 91 2d 10 	lds	r25, 0x102D
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	51 f0       	breq	.+20     	; 0x135c <_Z6readerhR4UartPv+0x4d2>
    1348:	80 91 2c 10 	lds	r24, 0x102C
    134c:	90 91 2d 10 	lds	r25, 0x102D
    1350:	9c 01       	movw	r18, r24
    1352:	22 50       	subi	r18, 0x02	; 2
    1354:	30 40       	sbci	r19, 0x00	; 0
    1356:	3a 8b       	std	Y+18, r19	; 0x12
    1358:	29 8b       	std	Y+17, r18	; 0x11
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <_Z6readerhR4UartPv+0x4d6>
    135c:	1a 8a       	std	Y+18, r1	; 0x12
    135e:	19 8a       	std	Y+17, r1	; 0x11
    1360:	2a e4       	ldi	r18, 0x4A	; 74
    1362:	33 e0       	ldi	r19, 0x03	; 3
    1364:	89 89       	ldd	r24, Y+17	; 0x11
    1366:	9a 89       	ldd	r25, Y+18	; 0x12
    1368:	b9 01       	movw	r22, r18
    136a:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
    136e:	bc 01       	movw	r22, r24
    1370:	80 91 30 07 	lds	r24, 0x0730
    1374:	99 27       	eor	r25, r25
    1376:	87 fd       	sbrc	r24, 7
    1378:	90 95       	com	r25
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	fc 01       	movw	r30, r24
    1384:	e0 54       	subi	r30, 0x40	; 64
    1386:	fa 4f       	sbci	r31, 0xFA	; 250
    1388:	20 81       	ld	r18, Z
    138a:	31 81       	ldd	r19, Z+1	; 0x01
    138c:	42 81       	ldd	r20, Z+2	; 0x02
    138e:	53 81       	ldd	r21, Z+3	; 0x03
    1390:	cb 01       	movw	r24, r22
    1392:	ba 01       	movw	r22, r20
    1394:	a9 01       	movw	r20, r18
    1396:	0e 94 6f 05 	call	0xade	; 0xade <_ZN6StreamlsEd>
    139a:	23 e1       	ldi	r18, 0x13	; 19
    139c:	32 e0       	ldi	r19, 0x02	; 2
    139e:	b9 01       	movw	r22, r18
    13a0:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
    13a4:	26 c1       	rjmp	.+588    	; 0x15f2 <_Z6readerhR4UartPv+0x768>
					}
					break;
				}
				case 'S':
				{
					command_receiving.servo_speeds[r_curr_servo] = command_receiving.servo_speeds[r_curr_servo]*10 + to_int(data);
    13a6:	80 91 30 07 	lds	r24, 0x0730
    13aa:	c8 2e       	mov	r12, r24
    13ac:	dd 24       	eor	r13, r13
    13ae:	c7 fc       	sbrc	r12, 7
    13b0:	d0 94       	com	r13
    13b2:	80 91 30 07 	lds	r24, 0x0730
    13b6:	99 27       	eor	r25, r25
    13b8:	87 fd       	sbrc	r24, 7
    13ba:	90 95       	com	r25
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	88 0f       	add	r24, r24
    13c2:	99 1f       	adc	r25, r25
    13c4:	fc 01       	movw	r30, r24
    13c6:	e8 5e       	subi	r30, 0xE8	; 232
    13c8:	f9 4f       	sbci	r31, 0xF9	; 249
    13ca:	80 81       	ld	r24, Z
    13cc:	91 81       	ldd	r25, Z+1	; 0x01
    13ce:	a2 81       	ldd	r26, Z+2	; 0x02
    13d0:	b3 81       	ldd	r27, Z+3	; 0x03
    13d2:	bc 01       	movw	r22, r24
    13d4:	cd 01       	movw	r24, r26
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	40 e2       	ldi	r20, 0x20	; 32
    13dc:	51 e4       	ldi	r21, 0x41	; 65
    13de:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <__mulsf3>
    13e2:	dc 01       	movw	r26, r24
    13e4:	cb 01       	movw	r24, r22
    13e6:	7c 01       	movw	r14, r24
    13e8:	8d 01       	movw	r16, r26
    13ea:	8c 81       	ldd	r24, Y+4	; 0x04
    13ec:	0e 94 c0 05 	call	0xb80	; 0xb80 <_Z6to_intc>
    13f0:	aa 27       	eor	r26, r26
    13f2:	97 fd       	sbrc	r25, 7
    13f4:	a0 95       	com	r26
    13f6:	ba 2f       	mov	r27, r26
    13f8:	bc 01       	movw	r22, r24
    13fa:	cd 01       	movw	r24, r26
    13fc:	0e 94 85 1c 	call	0x390a	; 0x390a <__floatsisf>
    1400:	9b 01       	movw	r18, r22
    1402:	ac 01       	movw	r20, r24
    1404:	c8 01       	movw	r24, r16
    1406:	b7 01       	movw	r22, r14
    1408:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__addsf3>
    140c:	dc 01       	movw	r26, r24
    140e:	cb 01       	movw	r24, r22
    1410:	9c 01       	movw	r18, r24
    1412:	ad 01       	movw	r20, r26
    1414:	c6 01       	movw	r24, r12
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	fc 01       	movw	r30, r24
    1420:	e8 5e       	subi	r30, 0xE8	; 232
    1422:	f9 4f       	sbci	r31, 0xF9	; 249
    1424:	20 83       	st	Z, r18
    1426:	31 83       	std	Z+1, r19	; 0x01
    1428:	42 83       	std	Z+2, r20	; 0x02
    142a:	53 83       	std	Z+3, r21	; 0x03
					if (VERBOSE==1) {
    142c:	80 91 b4 05 	lds	r24, 0x05B4
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	09 f0       	breq	.+2      	; 0x1436 <_Z6readerhR4UartPv+0x5ac>
    1434:	de c0       	rjmp	.+444    	; 0x15f2 <_Z6readerhR4UartPv+0x768>
						cout << "Set current servo speed to:" << command_receiving.servo_speeds[r_curr_servo] << "\n";
    1436:	80 91 2c 10 	lds	r24, 0x102C
    143a:	90 91 2d 10 	lds	r25, 0x102D
    143e:	00 97       	sbiw	r24, 0x00	; 0
    1440:	51 f0       	breq	.+20     	; 0x1456 <_Z6readerhR4UartPv+0x5cc>
    1442:	80 91 2c 10 	lds	r24, 0x102C
    1446:	90 91 2d 10 	lds	r25, 0x102D
    144a:	9c 01       	movw	r18, r24
    144c:	22 50       	subi	r18, 0x02	; 2
    144e:	30 40       	sbci	r19, 0x00	; 0
    1450:	38 8b       	std	Y+16, r19	; 0x10
    1452:	2f 87       	std	Y+15, r18	; 0x0f
    1454:	02 c0       	rjmp	.+4      	; 0x145a <_Z6readerhR4UartPv+0x5d0>
    1456:	18 8a       	std	Y+16, r1	; 0x10
    1458:	1f 86       	std	Y+15, r1	; 0x0f
    145a:	20 e7       	ldi	r18, 0x70	; 112
    145c:	33 e0       	ldi	r19, 0x03	; 3
    145e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1460:	98 89       	ldd	r25, Y+16	; 0x10
    1462:	b9 01       	movw	r22, r18
    1464:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
    1468:	bc 01       	movw	r22, r24
    146a:	80 91 30 07 	lds	r24, 0x0730
    146e:	99 27       	eor	r25, r25
    1470:	87 fd       	sbrc	r24, 7
    1472:	90 95       	com	r25
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	fc 01       	movw	r30, r24
    147e:	e8 5e       	subi	r30, 0xE8	; 232
    1480:	f9 4f       	sbci	r31, 0xF9	; 249
    1482:	20 81       	ld	r18, Z
    1484:	31 81       	ldd	r19, Z+1	; 0x01
    1486:	42 81       	ldd	r20, Z+2	; 0x02
    1488:	53 81       	ldd	r21, Z+3	; 0x03
    148a:	cb 01       	movw	r24, r22
    148c:	ba 01       	movw	r22, r20
    148e:	a9 01       	movw	r20, r18
    1490:	0e 94 6f 05 	call	0xade	; 0xade <_ZN6StreamlsEd>
    1494:	23 e1       	ldi	r18, 0x13	; 19
    1496:	32 e0       	ldi	r19, 0x02	; 2
    1498:	b9 01       	movw	r22, r18
    149a:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
    149e:	a9 c0       	rjmp	.+338    	; 0x15f2 <_Z6readerhR4UartPv+0x768>
					}
					break;
				}
				case 'T':
				{
					command_receiving.time = command_receiving.time*10 + to_int(data);
    14a0:	80 91 70 06 	lds	r24, 0x0670
    14a4:	90 91 71 06 	lds	r25, 0x0671
    14a8:	9c 01       	movw	r18, r24
    14aa:	22 0f       	add	r18, r18
    14ac:	33 1f       	adc	r19, r19
    14ae:	c9 01       	movw	r24, r18
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	89 01       	movw	r16, r18
    14ba:	08 0f       	add	r16, r24
    14bc:	19 1f       	adc	r17, r25
    14be:	8c 81       	ldd	r24, Y+4	; 0x04
    14c0:	0e 94 c0 05 	call	0xb80	; 0xb80 <_Z6to_intc>
    14c4:	80 0f       	add	r24, r16
    14c6:	91 1f       	adc	r25, r17
    14c8:	90 93 71 06 	sts	0x0671, r25
    14cc:	80 93 70 06 	sts	0x0670, r24
					if (VERBOSE==1) {
    14d0:	80 91 b4 05 	lds	r24, 0x05B4
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	09 f0       	breq	.+2      	; 0x14da <_Z6readerhR4UartPv+0x650>
    14d8:	8c c0       	rjmp	.+280    	; 0x15f2 <_Z6readerhR4UartPv+0x768>
						cout << "Set movement time to:" << command_receiving.time << "\n";
    14da:	80 91 2c 10 	lds	r24, 0x102C
    14de:	90 91 2d 10 	lds	r25, 0x102D
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	51 f0       	breq	.+20     	; 0x14fa <_Z6readerhR4UartPv+0x670>
    14e6:	80 91 2c 10 	lds	r24, 0x102C
    14ea:	90 91 2d 10 	lds	r25, 0x102D
    14ee:	9c 01       	movw	r18, r24
    14f0:	22 50       	subi	r18, 0x02	; 2
    14f2:	30 40       	sbci	r19, 0x00	; 0
    14f4:	3e 87       	std	Y+14, r19	; 0x0e
    14f6:	2d 87       	std	Y+13, r18	; 0x0d
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <_Z6readerhR4UartPv+0x674>
    14fa:	1e 86       	std	Y+14, r1	; 0x0e
    14fc:	1d 86       	std	Y+13, r1	; 0x0d
    14fe:	2c e8       	ldi	r18, 0x8C	; 140
    1500:	33 e0       	ldi	r19, 0x03	; 3
    1502:	8d 85       	ldd	r24, Y+13	; 0x0d
    1504:	9e 85       	ldd	r25, Y+14	; 0x0e
    1506:	b9 01       	movw	r22, r18
    1508:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
    150c:	20 91 70 06 	lds	r18, 0x0670
    1510:	30 91 71 06 	lds	r19, 0x0671
    1514:	b9 01       	movw	r22, r18
    1516:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN6StreamlsEi>
    151a:	23 e1       	ldi	r18, 0x13	; 19
    151c:	32 e0       	ldi	r19, 0x02	; 2
    151e:	b9 01       	movw	r22, r18
    1520:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
    1524:	66 c0       	rjmp	.+204    	; 0x15f2 <_Z6readerhR4UartPv+0x768>
			}
			break;
		}
		case ' ':
		{
			r_curr_subcommand = ' ';
    1526:	80 e2       	ldi	r24, 0x20	; 32
    1528:	80 93 2f 07 	sts	0x072F, r24
    152c:	62 c0       	rjmp	.+196    	; 0x15f2 <_Z6readerhR4UartPv+0x768>
		}
		case '\r':
		case '\n':
		{
			// execute command
			r_curr_subcommand = ' ';
    152e:	80 e2       	ldi	r24, 0x20	; 32
    1530:	80 93 2f 07 	sts	0x072F, r24
			//	print_command(&command_receiving, NULL);
			//	cout << "In process ";
			//	print_command(&command_in_process, NULL);
			//#endif

			CRITICAL_SECTION{
    1534:	ef e5       	ldi	r30, 0x5F	; 95
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	8b 83       	std	Y+3, r24	; 0x03
    153c:	0e 94 ca 02 	call	0x594	; 0x594 <__iCliRetVal>
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	0a c0       	rjmp	.+20     	; 0x1558 <_Z6readerhR4UartPv+0x6ce>
				memcpy(&command_in_process, &command_receiving, sizeof(command_receiving));
    1544:	82 e7       	ldi	r24, 0x72	; 114
    1546:	96 e0       	ldi	r25, 0x06	; 6
    1548:	25 eb       	ldi	r18, 0xB5	; 181
    154a:	35 e0       	ldi	r19, 0x05	; 5
    154c:	b9 01       	movw	r22, r18
    154e:	4d eb       	ldi	r20, 0xBD	; 189
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <memcpy>
			//	print_command(&command_receiving, NULL);
			//	cout << "In process ";
			//	print_command(&command_in_process, NULL);
			//#endif

			CRITICAL_SECTION{
    1556:	19 82       	std	Y+1, r1	; 0x01
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	88 23       	and	r24, r24
    155c:	99 f7       	brne	.-26     	; 0x1544 <_Z6readerhR4UartPv+0x6ba>
				memcpy(&command_in_process, &command_receiving, sizeof(command_receiving));
			}
    155e:	ce 01       	movw	r24, r28
    1560:	03 96       	adiw	r24, 0x03	; 3
    1562:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__iRestore>
			
			
			initialize_command(&command_receiving);
    1566:	85 eb       	ldi	r24, 0xB5	; 181
    1568:	95 e0       	ldi	r25, 0x05	; 5
    156a:	0e 94 92 03 	call	0x724	; 0x724 <_Z18initialize_commandP7command>
			
			#ifdef  DEBUG_SESSION
				cout << "After copy.\nReceived ";
    156e:	80 91 2c 10 	lds	r24, 0x102C
    1572:	90 91 2d 10 	lds	r25, 0x102D
    1576:	00 97       	sbiw	r24, 0x00	; 0
    1578:	51 f0       	breq	.+20     	; 0x158e <_Z6readerhR4UartPv+0x704>
    157a:	80 91 2c 10 	lds	r24, 0x102C
    157e:	90 91 2d 10 	lds	r25, 0x102D
    1582:	9c 01       	movw	r18, r24
    1584:	22 50       	subi	r18, 0x02	; 2
    1586:	30 40       	sbci	r19, 0x00	; 0
    1588:	3c 87       	std	Y+12, r19	; 0x0c
    158a:	2b 87       	std	Y+11, r18	; 0x0b
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <_Z6readerhR4UartPv+0x708>
    158e:	1c 86       	std	Y+12, r1	; 0x0c
    1590:	1b 86       	std	Y+11, r1	; 0x0b
    1592:	22 ea       	ldi	r18, 0xA2	; 162
    1594:	33 e0       	ldi	r19, 0x03	; 3
    1596:	8b 85       	ldd	r24, Y+11	; 0x0b
    1598:	9c 85       	ldd	r25, Y+12	; 0x0c
    159a:	b9 01       	movw	r22, r18
    159c:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
				print_command(&command_receiving, NULL);
    15a0:	85 eb       	ldi	r24, 0xB5	; 181
    15a2:	95 e0       	ldi	r25, 0x05	; 5
    15a4:	40 e0       	ldi	r20, 0x00	; 0
    15a6:	50 e0       	ldi	r21, 0x00	; 0
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	70 e0       	ldi	r23, 0x00	; 0
    15ac:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_Z13print_commandP7commandm>
				cout << "In process ";
    15b0:	80 91 2c 10 	lds	r24, 0x102C
    15b4:	90 91 2d 10 	lds	r25, 0x102D
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	51 f0       	breq	.+20     	; 0x15d0 <_Z6readerhR4UartPv+0x746>
    15bc:	80 91 2c 10 	lds	r24, 0x102C
    15c0:	90 91 2d 10 	lds	r25, 0x102D
    15c4:	9c 01       	movw	r18, r24
    15c6:	22 50       	subi	r18, 0x02	; 2
    15c8:	30 40       	sbci	r19, 0x00	; 0
    15ca:	3a 87       	std	Y+10, r19	; 0x0a
    15cc:	29 87       	std	Y+9, r18	; 0x09
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <_Z6readerhR4UartPv+0x74a>
    15d0:	1a 86       	std	Y+10, r1	; 0x0a
    15d2:	19 86       	std	Y+9, r1	; 0x09
    15d4:	28 eb       	ldi	r18, 0xB8	; 184
    15d6:	33 e0       	ldi	r19, 0x03	; 3
    15d8:	89 85       	ldd	r24, Y+9	; 0x09
    15da:	9a 85       	ldd	r25, Y+10	; 0x0a
    15dc:	b9 01       	movw	r22, r18
    15de:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN6StreamlsEPKc>
				print_command(&command_in_process, NULL);
    15e2:	82 e7       	ldi	r24, 0x72	; 114
    15e4:	96 e0       	ldi	r25, 0x06	; 6
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	60 e0       	ldi	r22, 0x00	; 0
    15ec:	70 e0       	ldi	r23, 0x00	; 0
    15ee:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_Z13print_commandP7commandm>
		{
			//err.print("Reader: Wrong input!");
			break;
		}
	}
}
    15f2:	a6 96       	adiw	r28, 0x26	; 38
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	cd bf       	out	0x3d, r28	; 61
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	1f 91       	pop	r17
    1604:	0f 91       	pop	r16
    1606:	ff 90       	pop	r15
    1608:	ef 90       	pop	r14
    160a:	df 90       	pop	r13
    160c:	cf 90       	pop	r12
    160e:	08 95       	ret

00001610 <clockGetSnapshot>:
    1610:	fc 01       	movw	r30, r24
    1612:	6f b7       	in	r22, 0x3f	; 63
#endif  /* C++ */
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
    1614:	f8 94       	cli
    1616:	86 b5       	in	r24, 0x26	; 38
    1618:	20 91 35 07 	lds	r18, 0x0735
    161c:	30 91 36 07 	lds	r19, 0x0736
    1620:	40 91 37 07 	lds	r20, 0x0737
    1624:	50 91 38 07 	lds	r21, 0x0738
    1628:	20 83       	st	Z, r18
    162a:	31 83       	std	Z+1, r19	; 0x01
    162c:	42 83       	std	Z+2, r20	; 0x02
    162e:	53 83       	std	Z+3, r21	; 0x03
    1630:	26 b5       	in	r18, 0x26	; 38
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	35 83       	std	Z+5, r19	; 0x05
    1636:	24 83       	std	Z+4, r18	; 0x04
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	28 17       	cp	r18, r24
    163c:	39 07       	cpc	r19, r25
    163e:	10 f0       	brcs	.+4      	; 0x1644 <clockGetSnapshot+0x34>
    1640:	a9 9b       	sbis	0x15, 1	; 21
    1642:	0f c0       	rjmp	.+30     	; 0x1662 <clockGetSnapshot+0x52>
    1644:	80 81       	ld	r24, Z
    1646:	91 81       	ldd	r25, Z+1	; 0x01
    1648:	a2 81       	ldd	r26, Z+2	; 0x02
    164a:	b3 81       	ldd	r27, Z+3	; 0x03
    164c:	80 58       	subi	r24, 0x80	; 128
    164e:	91 4c       	sbci	r25, 0xC1	; 193
    1650:	af 4f       	sbci	r26, 0xFF	; 255
    1652:	bf 4f       	sbci	r27, 0xFF	; 255
    1654:	80 83       	st	Z, r24
    1656:	91 83       	std	Z+1, r25	; 0x01
    1658:	a2 83       	std	Z+2, r26	; 0x02
    165a:	b3 83       	std	Z+3, r27	; 0x03
    165c:	86 b5       	in	r24, 0x26	; 38
    165e:	84 83       	std	Z+4, r24	; 0x04
    1660:	15 82       	std	Z+5, r1	; 0x05
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
    1662:	6f bf       	out	0x3f, r22	; 63
    1664:	08 95       	ret

00001666 <clockSnapshotToTicks>:
    1666:	ef 92       	push	r14
    1668:	ff 92       	push	r15
    166a:	0f 93       	push	r16
    166c:	1f 93       	push	r17
    166e:	fc 01       	movw	r30, r24
    1670:	e0 80       	ld	r14, Z
    1672:	f1 80       	ldd	r15, Z+1	; 0x01
    1674:	02 81       	ldd	r16, Z+2	; 0x02
    1676:	13 81       	ldd	r17, Z+3	; 0x03
    1678:	64 81       	ldd	r22, Z+4	; 0x04
    167a:	75 81       	ldd	r23, Z+5	; 0x05
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	20 e8       	ldi	r18, 0x80	; 128
    1682:	3e e3       	ldi	r19, 0x3E	; 62
    1684:	40 e0       	ldi	r20, 0x00	; 0
    1686:	50 e0       	ldi	r21, 0x00	; 0
    1688:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__mulsi3>
    168c:	2a ef       	ldi	r18, 0xFA	; 250
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	40 e0       	ldi	r20, 0x00	; 0
    1692:	50 e0       	ldi	r21, 0x00	; 0
    1694:	0e 94 2e 22 	call	0x445c	; 0x445c <__udivmodsi4>
    1698:	2e 0d       	add	r18, r14
    169a:	3f 1d       	adc	r19, r15
    169c:	40 1f       	adc	r20, r16
    169e:	51 1f       	adc	r21, r17
    16a0:	b9 01       	movw	r22, r18
    16a2:	ca 01       	movw	r24, r20
    16a4:	1f 91       	pop	r17
    16a6:	0f 91       	pop	r16
    16a8:	ff 90       	pop	r15
    16aa:	ef 90       	pop	r14
    16ac:	08 95       	ret

000016ae <clockGetus>:
    16ae:	0f 93       	push	r16
    16b0:	1f 93       	push	r17
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <clockGetus+0xa>
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <clockGetus+0xc>
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <clockGetus+0xe>
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	8e 01       	movw	r16, r28
    16c2:	0f 5f       	subi	r16, 0xFF	; 255
    16c4:	1f 4f       	sbci	r17, 0xFF	; 255
    16c6:	c8 01       	movw	r24, r16
    16c8:	0e 94 08 0b 	call	0x1610	; 0x1610 <clockGetSnapshot>
    16cc:	c8 01       	movw	r24, r16
    16ce:	0e 94 33 0b 	call	0x1666	; 0x1666 <clockSnapshotToTicks>
    16d2:	26 96       	adiw	r28, 0x06	; 6
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	f8 94       	cli
    16d8:	de bf       	out	0x3e, r29	; 62
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	cd bf       	out	0x3d, r28	; 61
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	1f 91       	pop	r17
    16e4:	0f 91       	pop	r16
    16e6:	08 95       	ret

000016e8 <__clockInit>:
    16e8:	a9 9a       	sbi	0x15, 1	; 21
    16ea:	ee e6       	ldi	r30, 0x6E	; 110
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	82 60       	ori	r24, 0x02	; 2
    16f2:	80 83       	st	Z, r24
    16f4:	08 95       	ret

000016f6 <__vector_21>:
    16f6:	1f 92       	push	r1
    16f8:	0f 92       	push	r0
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	0f 92       	push	r0
    16fe:	11 24       	eor	r1, r1
    1700:	2f 93       	push	r18
    1702:	8f 93       	push	r24
    1704:	9f 93       	push	r25
    1706:	af 93       	push	r26
    1708:	bf 93       	push	r27
    170a:	80 91 35 07 	lds	r24, 0x0735
    170e:	90 91 36 07 	lds	r25, 0x0736
    1712:	a0 91 37 07 	lds	r26, 0x0737
    1716:	b0 91 38 07 	lds	r27, 0x0738
    171a:	80 58       	subi	r24, 0x80	; 128
    171c:	91 4c       	sbci	r25, 0xC1	; 193
    171e:	af 4f       	sbci	r26, 0xFF	; 255
    1720:	bf 4f       	sbci	r27, 0xFF	; 255
    1722:	80 93 35 07 	sts	0x0735, r24
    1726:	90 93 36 07 	sts	0x0736, r25
    172a:	a0 93 37 07 	sts	0x0737, r26
    172e:	b0 93 38 07 	sts	0x0738, r27
    1732:	20 91 1e 10 	lds	r18, 0x101E
    1736:	22 23       	and	r18, r18
    1738:	b9 f1       	breq	.+110    	; 0x17a8 <__vector_21+0xb2>
    173a:	39 9b       	sbis	0x07, 1	; 7
    173c:	35 c0       	rjmp	.+106    	; 0x17a8 <__vector_21+0xb2>
    173e:	80 91 39 07 	lds	r24, 0x0739
    1742:	88 23       	and	r24, r24
    1744:	19 f0       	breq	.+6      	; 0x174c <__vector_21+0x56>
    1746:	81 50       	subi	r24, 0x01	; 1
    1748:	80 93 39 07 	sts	0x0739, r24
    174c:	80 91 39 07 	lds	r24, 0x0739
    1750:	88 23       	and	r24, r24
    1752:	51 f5       	brne	.+84     	; 0x17a8 <__vector_21+0xb2>
    1754:	80 91 1f 10 	lds	r24, 0x101F
    1758:	88 23       	and	r24, r24
    175a:	59 f4       	brne	.+22     	; 0x1772 <__vector_21+0x7c>
    175c:	82 2f       	mov	r24, r18
    175e:	99 27       	eor	r25, r25
    1760:	87 fd       	sbrc	r24, 7
    1762:	90 95       	com	r25
    1764:	97 ff       	sbrs	r25, 7
    1766:	03 c0       	rjmp	.+6      	; 0x176e <__vector_21+0x78>
    1768:	90 95       	com	r25
    176a:	81 95       	neg	r24
    176c:	9f 4f       	sbci	r25, 0xFF	; 255
    176e:	80 93 1f 10 	sts	0x101F, r24
    1772:	27 fd       	sbrc	r18, 7
    1774:	02 c0       	rjmp	.+4      	; 0x177a <__vector_21+0x84>
    1776:	9f e1       	ldi	r25, 0x1F	; 31
    1778:	01 c0       	rjmp	.+2      	; 0x177c <__vector_21+0x86>
    177a:	9f e0       	ldi	r25, 0x0F	; 15
    177c:	20 91 20 10 	lds	r18, 0x1020
    1780:	22 23       	and	r18, r18
    1782:	41 f0       	breq	.+16     	; 0x1794 <__vector_21+0x9e>
    1784:	80 91 1f 10 	lds	r24, 0x101F
    1788:	81 50       	subi	r24, 0x01	; 1
    178a:	80 93 1f 10 	sts	0x101F, r24
    178e:	88 23       	and	r24, r24
    1790:	09 f4       	brne	.+2      	; 0x1794 <__vector_21+0x9e>
    1792:	9d e7       	ldi	r25, 0x7D	; 125
    1794:	10 92 20 10 	sts	0x1020, r1
    1798:	22 23       	and	r18, r18
    179a:	19 f4       	brne	.+6      	; 0x17a2 <__vector_21+0xac>
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	80 93 20 10 	sts	0x1020, r24
    17a2:	90 93 39 07 	sts	0x0739, r25
    17a6:	31 9a       	sbi	0x06, 1	; 6
    17a8:	bf 91       	pop	r27
    17aa:	af 91       	pop	r26
    17ac:	9f 91       	pop	r25
    17ae:	8f 91       	pop	r24
    17b0:	2f 91       	pop	r18
    17b2:	0f 90       	pop	r0
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	0f 90       	pop	r0
    17b8:	1f 90       	pop	r1
    17ba:	18 95       	reti

000017bc <marquee_put_char>:
static MAKE_WRITER(marquee_put_char); /* Fwd Def */
MARQUEE _marquee_ = MAKE_MARQUEE(marquee_list,500000,2000000,&marquee_put_char);
// Create a Writer to write to marquee
// Do NOT call it directly instead, to write the char 'A' use:
// 	marqueeGetWriter(&marquee)('A');
static MAKE_WRITER(marquee_put_char){ /* createWriter */
    17bc:	68 2f       	mov	r22, r24
	return marqueeSendByte(&_marquee_,byte);
    17be:	82 e1       	ldi	r24, 0x12	; 18
    17c0:	94 e0       	ldi	r25, 0x04	; 4
    17c2:	0e 94 d7 12 	call	0x25ae	; 0x25ae <marqueeSendByte>
}
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	08 95       	ret

000017ca <registerLED>:
static __inline__ void LED_off(LED* led){
	LED_set(led,FALSE);
}

static __inline__ void statusLEDregister(const IOPin* pin, boolean activeHigh){
	statusLED.pin = pin;
    17ca:	8e e7       	ldi	r24, 0x7E	; 126
    17cc:	93 e0       	ldi	r25, 0x03	; 3
    17ce:	90 93 24 10 	sts	0x1024, r25
    17d2:	80 93 23 10 	sts	0x1023, r24
	statusLED.activeHigh = activeHigh;
    17d6:	80 91 25 10 	lds	r24, 0x1025
	statusLED.initialised=FALSE;
    17da:	8c 7f       	andi	r24, 0xFC	; 252
    17dc:	80 93 25 10 	sts	0x1025, r24


void LED_set(LED* led,	boolean value);

static __inline__ void LED_on(LED* led){
	LED_set(led,TRUE);
    17e0:	83 e2       	ldi	r24, 0x23	; 35
    17e2:	90 e1       	ldi	r25, 0x10	; 16
    17e4:	6f ef       	ldi	r22, 0xFF	; 255
    17e6:	0e 94 27 12 	call	0x244e	; 0x244e <LED_set>
	servoPWMInit(&_servos2_);
}
// ----------- Register the statusLED -----------
void registerLED(void){
	statusLEDregister(C1,false);
}
    17ea:	08 95       	ret

000017ec <initHardware>:
	segled_init(&_led_display_);
}

// ----------- Initialise my added devices ------
void initHardware(void){
	servoPWMInit(&_Servos1_);
    17ec:	8d ea       	ldi	r24, 0xAD	; 173
    17ee:	94 e0       	ldi	r25, 0x04	; 4
    17f0:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <servoPWMInit>
	servoPWMInit(&_servos2_);
    17f4:	8d e3       	ldi	r24, 0x3D	; 61
    17f6:	95 e0       	ldi	r25, 0x05	; 5
    17f8:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <servoPWMInit>
}
    17fc:	08 95       	ret

000017fe <sysInitHardware>:
	&_servo12_
};
SERVO_DRIVER _servos2_ = MAKE_SERVO_DRIVER(servos2_list);

// ----------- Initialise built in devices ------
void sysInitHardware(void){
    17fe:	0f 93       	push	r16
    1800:	1f 93       	push	r17
static __inline__ boolean SWITCH_released(SWITCH* sw){
	return pin_is_high(sw->pin);
}

static __inline__ void SWITCH_init(SWITCH *sw){
	pin_make_input(sw->pin,TRUE);
    1802:	80 91 ff 03 	lds	r24, 0x03FF
    1806:	90 91 00 04 	lds	r25, 0x0400
    180a:	6f ef       	ldi	r22, 0xFF	; 255
    180c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <pin_make_input>
	SWITCH_init(&_button_);
	setErrorLog(&uart1SendByte);
    1810:	06 e7       	ldi	r16, 0x76	; 118
    1812:	1c e0       	ldi	r17, 0x0C	; 12
    1814:	c8 01       	movw	r24, r16
    1816:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <setErrorLog>
	rprintfInit(&uart1SendByte);
    181a:	c8 01       	movw	r24, r16
    181c:	0e 94 b4 12 	call	0x2568	; 0x2568 <rprintfInit>
	uartInit(_C_uart1,9600);
    1820:	8d ec       	ldi	r24, 0xCD	; 205
    1822:	93 e0       	ldi	r25, 0x03	; 3
    1824:	40 e8       	ldi	r20, 0x80	; 128
    1826:	55 e2       	ldi	r21, 0x25	; 37
    1828:	60 e0       	ldi	r22, 0x00	; 0
    182a:	70 e0       	ldi	r23, 0x00	; 0
    182c:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <_uartInit>

// Write a character to the display
uint8_t segled_put_char(SEGLED* led, uint8_t ch);

static __inline__ void segled_init(SEGLED* led){
	segled_put_char(led,' ');
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	94 e0       	ldi	r25, 0x04	; 4
    1834:	60 e2       	ldi	r22, 0x20	; 32
    1836:	0e 94 34 14 	call	0x2868	; 0x2868 <segled_put_char>
	segled_init(&_led_display_);
}
    183a:	1f 91       	pop	r17
    183c:	0f 91       	pop	r16
    183e:	08 95       	ret

00001840 <__vector_36>:
#endif

#ifndef USART1_RX_vect
# error Uart1 Rx complete vector undefined
#else
ISR(USART1_RX_vect){
    1840:	1f 92       	push	r1
    1842:	0f 92       	push	r0
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	0f 92       	push	r0
    1848:	11 24       	eor	r1, r1
    184a:	2f 93       	push	r18
    184c:	3f 93       	push	r19
    184e:	4f 93       	push	r20
    1850:	5f 93       	push	r21
    1852:	6f 93       	push	r22
    1854:	7f 93       	push	r23
    1856:	8f 93       	push	r24
    1858:	9f 93       	push	r25
    185a:	af 93       	push	r26
    185c:	bf 93       	push	r27
    185e:	ef 93       	push	r30
    1860:	ff 93       	push	r31
	uartReceiveService(_C_uart1);
    1862:	e0 91 f9 03 	lds	r30, 0x03F9
    1866:	f0 91 fa 03 	lds	r31, 0x03FA
    186a:	60 81       	ld	r22, Z
    186c:	8d ec       	ldi	r24, 0xCD	; 205
    186e:	93 e0       	ldi	r25, 0x03	; 3
    1870:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__uartReceiveService>
}
    1874:	ff 91       	pop	r31
    1876:	ef 91       	pop	r30
    1878:	bf 91       	pop	r27
    187a:	af 91       	pop	r26
    187c:	9f 91       	pop	r25
    187e:	8f 91       	pop	r24
    1880:	7f 91       	pop	r23
    1882:	6f 91       	pop	r22
    1884:	5f 91       	pop	r21
    1886:	4f 91       	pop	r20
    1888:	3f 91       	pop	r19
    188a:	2f 91       	pop	r18
    188c:	0f 90       	pop	r0
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	0f 90       	pop	r0
    1892:	1f 90       	pop	r1
    1894:	18 95       	reti

00001896 <__vector_38>:
HW_UART __C_uart1 = MAKE_HW_UART_Rx_Tx(&rx_uart1_Buffer,&tx_uart1_Buffer,UCSR1A,UCSR1B,UBRR1L,UBRR1H,UDR1,null,BV(U2X1),D2,D3,&uart1GetByte,&uart1SendByte);

#ifndef USART1_TX_vect
# error Uart1 Tx complete vector undefined
#else
ISR(USART1_TX_vect){
    1896:	1f 92       	push	r1
    1898:	0f 92       	push	r0
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	0f 92       	push	r0
    189e:	11 24       	eor	r1, r1
    18a0:	2f 93       	push	r18
    18a2:	3f 93       	push	r19
    18a4:	4f 93       	push	r20
    18a6:	5f 93       	push	r21
    18a8:	6f 93       	push	r22
    18aa:	7f 93       	push	r23
    18ac:	8f 93       	push	r24
    18ae:	9f 93       	push	r25
    18b0:	af 93       	push	r26
    18b2:	bf 93       	push	r27
    18b4:	ef 93       	push	r30
    18b6:	ff 93       	push	r31
	uartTransmitService(_C_uart1);
    18b8:	8d ec       	ldi	r24, 0xCD	; 205
    18ba:	93 e0       	ldi	r25, 0x03	; 3
    18bc:	0e 94 91 17 	call	0x2f22	; 0x2f22 <__uartTransmitService>
}
    18c0:	ff 91       	pop	r31
    18c2:	ef 91       	pop	r30
    18c4:	bf 91       	pop	r27
    18c6:	af 91       	pop	r26
    18c8:	9f 91       	pop	r25
    18ca:	8f 91       	pop	r24
    18cc:	7f 91       	pop	r23
    18ce:	6f 91       	pop	r22
    18d0:	5f 91       	pop	r21
    18d2:	4f 91       	pop	r20
    18d4:	3f 91       	pop	r19
    18d6:	2f 91       	pop	r18
    18d8:	0f 90       	pop	r0
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	0f 90       	pop	r0
    18de:	1f 90       	pop	r1
    18e0:	18 95       	reti

000018e2 <uart1GetByte>:
}

// Create a routine to read a byte from uart1
// Returns -1 if there was no data
MAKE_READER( uart1GetByte){
	return uartGetByte(_C_uart1);
    18e2:	8d ec       	ldi	r24, 0xCD	; 205
    18e4:	93 e0       	ldi	r25, 0x03	; 3
    18e6:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__uartGetByte>
}
    18ea:	08 95       	ret

000018ec <uart1SendByte>:
static cBuffer rx_uart1_Buffer = MAKE_BUFFER(rx_uart1_Buf);


// Create a routine to write bytes to uart1
// You can set rprintf to use it by calling rprintfInit(&uart1SendByte)
MAKE_WRITER(uart1SendByte){
    18ec:	68 2f       	mov	r22, r24
	return uartSendByte(_C_uart1,byte);
    18ee:	8d ec       	ldi	r24, 0xCD	; 205
    18f0:	93 e0       	ldi	r25, 0x03	; 3
    18f2:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <_uartSendByte>
}
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	08 95       	ret

000018fa <_ZN6Stream4_putEcP6__file>:
	/* function to write one char to device
	 * Called directly from the C FILE code
	 * when using commands from stdio.h
	 * This is passed on to the write of our C++ object
	 */
	static int	_put(char c, STREAM *s){
    18fa:	28 2f       	mov	r18, r24
		Stream* str = (Stream*)s;
    18fc:	61 15       	cp	r22, r1
    18fe:	71 05       	cpc	r23, r1
    1900:	19 f4       	brne	.+6      	; 0x1908 <_ZN6Stream4_putEcP6__file+0xe>
    1902:	a0 e0       	ldi	r26, 0x00	; 0
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	02 c0       	rjmp	.+4      	; 0x190c <_ZN6Stream4_putEcP6__file+0x12>
    1908:	db 01       	movw	r26, r22
    190a:	12 97       	sbiw	r26, 0x02	; 2
		return str->write((uint8_t)c);
    190c:	ed 91       	ld	r30, X+
    190e:	fc 91       	ld	r31, X
    1910:	11 97       	sbiw	r26, 0x01	; 1
    1912:	01 90       	ld	r0, Z+
    1914:	f0 81       	ld	r31, Z
    1916:	e0 2d       	mov	r30, r0
    1918:	cd 01       	movw	r24, r26
    191a:	62 2f       	mov	r22, r18
    191c:	09 95       	icall
	}
    191e:	08 95       	ret

00001920 <_ZN6Stream4_getEP6__file>:
	 * Called directly from the C FILE code
	 * when using commands from stdio.h
	 * This is passed on to the read of our C++ object
	 */
	static int	_get(STREAM *s){
		Stream* str = (Stream*)s;
    1920:	00 97       	sbiw	r24, 0x00	; 0
    1922:	19 f4       	brne	.+6      	; 0x192a <_ZN6Stream4_getEP6__file+0xa>
    1924:	a0 e0       	ldi	r26, 0x00	; 0
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	02 c0       	rjmp	.+4      	; 0x192e <_ZN6Stream4_getEP6__file+0xe>
    192a:	dc 01       	movw	r26, r24
    192c:	12 97       	sbiw	r26, 0x02	; 2
		return str->read();
    192e:	ed 91       	ld	r30, X+
    1930:	fc 91       	ld	r31, X
    1932:	11 97       	sbiw	r26, 0x01	; 1
    1934:	02 80       	ldd	r0, Z+2	; 0x02
    1936:	f3 81       	ldd	r31, Z+3	; 0x03
    1938:	e0 2d       	mov	r30, r0
    193a:	cd 01       	movw	r24, r26
    193c:	09 95       	icall
	}
    193e:	08 95       	ret

00001940 <_ZN10NullStream5writeEh>:
// A type of stream that just throws away output and returns EOF for input
class NullStream : public Stream{
public:
	NullStream(void) : Stream(){};
protected:
	virtual int write(uint8_t data) { return data;};
    1940:	86 2f       	mov	r24, r22
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	08 95       	ret

00001946 <_ZN10NullStream4readEv>:
	virtual int read(void) {return EOF;};
    1946:	8f ef       	ldi	r24, 0xFF	; 255
    1948:	9f ef       	ldi	r25, 0xFF	; 255
    194a:	08 95       	ret

0000194c <_ZN7Marquee4readEv>:
public:
	Marquee(MARQUEE* cstr) {m_cstr = cstr;}

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){return marqueeSendByte(m_cstr,data);}
	virtual int read(void){return EOF;}
    194c:	8f ef       	ldi	r24, 0xFF	; 255
    194e:	9f ef       	ldi	r25, 0xFF	; 255
    1950:	08 95       	ret

00001952 <_Z10_cpp_Init_v>:
    1952:	8a ed       	ldi	r24, 0xDA	; 218
    1954:	9f e0       	ldi	r25, 0x0F	; 15
    1956:	90 93 2d 10 	sts	0x102D, r25
    195a:	80 93 2c 10 	sts	0x102C, r24
    195e:	90 93 2b 10 	sts	0x102B, r25
    1962:	80 93 2a 10 	sts	0x102A, r24
    1966:	90 93 2f 10 	sts	0x102F, r25
    196a:	80 93 2e 10 	sts	0x102E, r24
    196e:	08 95       	ret

00001970 <__cxa_pure_virtual>:
    1970:	ff cf       	rjmp	.-2      	; 0x1970 <__cxa_pure_virtual>

00001972 <_GLOBAL__I_statusLed>:
#ifdef __cplusplus
}
/* ===================== C++ Wrapper Code ===============================================*/
class Led {
public:
	Led(LED * cstr){m_cstr = cstr;};
    1972:	83 e2       	ldi	r24, 0x23	; 35
    1974:	90 e1       	ldi	r25, 0x10	; 16
    1976:	90 93 8f 0f 	sts	0x0F8F, r25
    197a:	80 93 8e 0f 	sts	0x0F8E, r24
	LED* m_cstr;
};

class StatusLed : public Led {
public:
	StatusLed(LED * cstr) : Led(cstr){
    197e:	85 e6       	ldi	r24, 0x65	; 101
    1980:	95 e0       	ldi	r25, 0x05	; 5
    1982:	90 93 8d 0f 	sts	0x0F8D, r25
    1986:	80 93 8c 0f 	sts	0x0F8C, r24
#ifdef __cplusplus
}
/* ===================== C++ Wrapper Code ===============================================*/
class Switch {
public:
	Switch(SWITCH * cstr){m_cstr = cstr;};
    198a:	8f ef       	ldi	r24, 0xFF	; 255
    198c:	93 e0       	ldi	r25, 0x03	; 3
    198e:	90 93 91 0f 	sts	0x0F91, r25
    1992:	80 93 90 0f 	sts	0x0F90, r24

class Stream : STREAM{

public:
	Stream(void){
		fdev_setup_stream(this, &_put, &_get, _FDEV_SETUP_RW);
    1996:	6d e7       	ldi	r22, 0x7D	; 125
    1998:	7c e0       	ldi	r23, 0x0C	; 12
    199a:	70 93 9d 0f 	sts	0x0F9D, r23
    199e:	60 93 9c 0f 	sts	0x0F9C, r22
    19a2:	40 e9       	ldi	r20, 0x90	; 144
    19a4:	5c e0       	ldi	r21, 0x0C	; 12
    19a6:	50 93 9f 0f 	sts	0x0F9F, r21
    19aa:	40 93 9e 0f 	sts	0x0F9E, r20
    19ae:	a3 e0       	ldi	r26, 0x03	; 3
    19b0:	a0 93 97 0f 	sts	0x0F97, r26
    19b4:	10 92 a1 0f 	sts	0x0FA1, r1
    19b8:	10 92 a0 0f 	sts	0x0FA0, r1
};


class Marquee : public Stream {
public:
	Marquee(MARQUEE* cstr) {m_cstr = cstr;}
    19bc:	81 e7       	ldi	r24, 0x71	; 113
    19be:	95 e0       	ldi	r25, 0x05	; 5
    19c0:	90 93 93 0f 	sts	0x0F93, r25
    19c4:	80 93 92 0f 	sts	0x0F92, r24
    19c8:	82 e1       	ldi	r24, 0x12	; 18
    19ca:	94 e0       	ldi	r25, 0x04	; 4
    19cc:	90 93 a3 0f 	sts	0x0FA3, r25
    19d0:	80 93 a2 0f 	sts	0x0FA2, r24
#ifdef __cplusplus
}
class Actuator{
public:
	Actuator(__ACTUATOR* cstr){
		m_cstr = cstr;
    19d4:	89 e2       	ldi	r24, 0x29	; 41
    19d6:	94 e0       	ldi	r25, 0x04	; 4
    19d8:	90 93 a5 0f 	sts	0x0FA5, r25
    19dc:	80 93 a4 0f 	sts	0x0FA4, r24
#ifdef __cplusplus
}
class Servo : public Actuator{
public:
	Servo(SERVO* cstr) : Actuator(&cstr->actuator){
		m_cstr = cstr;
    19e0:	90 93 a7 0f 	sts	0x0FA7, r25
    19e4:	80 93 a6 0f 	sts	0x0FA6, r24
    19e8:	8f e3       	ldi	r24, 0x3F	; 63
    19ea:	94 e0       	ldi	r25, 0x04	; 4
    19ec:	90 93 a9 0f 	sts	0x0FA9, r25
    19f0:	80 93 a8 0f 	sts	0x0FA8, r24
    19f4:	90 93 ab 0f 	sts	0x0FAB, r25
    19f8:	80 93 aa 0f 	sts	0x0FAA, r24
    19fc:	85 e5       	ldi	r24, 0x55	; 85
    19fe:	94 e0       	ldi	r25, 0x04	; 4
    1a00:	90 93 ad 0f 	sts	0x0FAD, r25
    1a04:	80 93 ac 0f 	sts	0x0FAC, r24
    1a08:	90 93 af 0f 	sts	0x0FAF, r25
    1a0c:	80 93 ae 0f 	sts	0x0FAE, r24
    1a10:	8b e6       	ldi	r24, 0x6B	; 107
    1a12:	94 e0       	ldi	r25, 0x04	; 4
    1a14:	90 93 b1 0f 	sts	0x0FB1, r25
    1a18:	80 93 b0 0f 	sts	0x0FB0, r24
    1a1c:	90 93 b3 0f 	sts	0x0FB3, r25
    1a20:	80 93 b2 0f 	sts	0x0FB2, r24
    1a24:	81 e8       	ldi	r24, 0x81	; 129
    1a26:	94 e0       	ldi	r25, 0x04	; 4
    1a28:	90 93 b5 0f 	sts	0x0FB5, r25
    1a2c:	80 93 b4 0f 	sts	0x0FB4, r24
    1a30:	90 93 b7 0f 	sts	0x0FB7, r25
    1a34:	80 93 b6 0f 	sts	0x0FB6, r24
    1a38:	87 e9       	ldi	r24, 0x97	; 151
    1a3a:	94 e0       	ldi	r25, 0x04	; 4
    1a3c:	90 93 b9 0f 	sts	0x0FB9, r25
    1a40:	80 93 b8 0f 	sts	0x0FB8, r24
    1a44:	90 93 bb 0f 	sts	0x0FBB, r25
    1a48:	80 93 ba 0f 	sts	0x0FBA, r24
};

class ServoDriver{
public:
	ServoDriver(SERVO_DRIVER* cstr){
		driver = cstr;
    1a4c:	8d ea       	ldi	r24, 0xAD	; 173
    1a4e:	94 e0       	ldi	r25, 0x04	; 4
    1a50:	90 93 bd 0f 	sts	0x0FBD, r25
    1a54:	80 93 bc 0f 	sts	0x0FBC, r24
    1a58:	89 eb       	ldi	r24, 0xB9	; 185
    1a5a:	94 e0       	ldi	r25, 0x04	; 4
    1a5c:	90 93 bf 0f 	sts	0x0FBF, r25
    1a60:	80 93 be 0f 	sts	0x0FBE, r24
#ifdef __cplusplus
}
class Servo : public Actuator{
public:
	Servo(SERVO* cstr) : Actuator(&cstr->actuator){
		m_cstr = cstr;
    1a64:	90 93 c1 0f 	sts	0x0FC1, r25
    1a68:	80 93 c0 0f 	sts	0x0FC0, r24
    1a6c:	8f ec       	ldi	r24, 0xCF	; 207
    1a6e:	94 e0       	ldi	r25, 0x04	; 4
    1a70:	90 93 c3 0f 	sts	0x0FC3, r25
    1a74:	80 93 c2 0f 	sts	0x0FC2, r24
    1a78:	90 93 c5 0f 	sts	0x0FC5, r25
    1a7c:	80 93 c4 0f 	sts	0x0FC4, r24
    1a80:	85 ee       	ldi	r24, 0xE5	; 229
    1a82:	94 e0       	ldi	r25, 0x04	; 4
    1a84:	90 93 c7 0f 	sts	0x0FC7, r25
    1a88:	80 93 c6 0f 	sts	0x0FC6, r24
    1a8c:	90 93 c9 0f 	sts	0x0FC9, r25
    1a90:	80 93 c8 0f 	sts	0x0FC8, r24
    1a94:	8b ef       	ldi	r24, 0xFB	; 251
    1a96:	94 e0       	ldi	r25, 0x04	; 4
    1a98:	90 93 cb 0f 	sts	0x0FCB, r25
    1a9c:	80 93 ca 0f 	sts	0x0FCA, r24
    1aa0:	90 93 cd 0f 	sts	0x0FCD, r25
    1aa4:	80 93 cc 0f 	sts	0x0FCC, r24
    1aa8:	81 e1       	ldi	r24, 0x11	; 17
    1aaa:	95 e0       	ldi	r25, 0x05	; 5
    1aac:	90 93 cf 0f 	sts	0x0FCF, r25
    1ab0:	80 93 ce 0f 	sts	0x0FCE, r24
    1ab4:	90 93 d1 0f 	sts	0x0FD1, r25
    1ab8:	80 93 d0 0f 	sts	0x0FD0, r24
    1abc:	87 e2       	ldi	r24, 0x27	; 39
    1abe:	95 e0       	ldi	r25, 0x05	; 5
    1ac0:	90 93 d3 0f 	sts	0x0FD3, r25
    1ac4:	80 93 d2 0f 	sts	0x0FD2, r24
    1ac8:	90 93 d5 0f 	sts	0x0FD5, r25
    1acc:	80 93 d4 0f 	sts	0x0FD4, r24
};

class ServoDriver{
public:
	ServoDriver(SERVO_DRIVER* cstr){
		driver = cstr;
    1ad0:	8d e3       	ldi	r24, 0x3D	; 61
    1ad2:	95 e0       	ldi	r25, 0x05	; 5
    1ad4:	90 93 d7 0f 	sts	0x0FD7, r25
    1ad8:	80 93 d6 0f 	sts	0x0FD6, r24
    1adc:	70 93 e3 0f 	sts	0x0FE3, r23
    1ae0:	60 93 e2 0f 	sts	0x0FE2, r22
    1ae4:	50 93 e5 0f 	sts	0x0FE5, r21
    1ae8:	40 93 e4 0f 	sts	0x0FE4, r20
    1aec:	a0 93 dd 0f 	sts	0x0FDD, r26
    1af0:	10 92 e7 0f 	sts	0x0FE7, r1
    1af4:	10 92 e6 0f 	sts	0x0FE6, r1
/* ===================== C++ Wrapper Code ===============================================*/
#include "Stream/Stream.h"
class Uart : public Stream {
public:
	Uart(UART * cstr): Stream(){
		m_cstr = cstr;
    1af8:	2d ec       	ldi	r18, 0xCD	; 205
    1afa:	33 e0       	ldi	r19, 0x03	; 3
    1afc:	30 93 e9 0f 	sts	0x0FE9, r19
    1b00:	20 93 e8 0f 	sts	0x0FE8, r18
		cstr->cpp = this;
    1b04:	e8 ed       	ldi	r30, 0xD8	; 216
    1b06:	ff e0       	ldi	r31, 0x0F	; 15
    1b08:	f0 93 e3 03 	sts	0x03E3, r31
    1b0c:	e0 93 e2 03 	sts	0x03E2, r30
#ifdef __cplusplus
}
/* ===================== C++ Wrapper Code ===============================================*/
class UartHW : public Uart {
public:
	UartHW(HW_UART* uart) : Uart(&uart->_uart_){
    1b10:	81 e8       	ldi	r24, 0x81	; 129
    1b12:	95 e0       	ldi	r25, 0x05	; 5
    1b14:	91 83       	std	Z+1, r25	; 0x01
    1b16:	80 83       	st	Z, r24
		m_hw = uart;
    1b18:	30 93 ef 0f 	sts	0x0FEF, r19
    1b1c:	20 93 ee 0f 	sts	0x0FEE, r18
		m_polling = FALSE;
    1b20:	10 92 f0 0f 	sts	0x0FF0, r1
    1b24:	70 93 fc 0f 	sts	0x0FFC, r23
    1b28:	60 93 fb 0f 	sts	0x0FFB, r22
    1b2c:	50 93 fe 0f 	sts	0x0FFE, r21
    1b30:	40 93 fd 0f 	sts	0x0FFD, r20
    1b34:	a0 93 f6 0f 	sts	0x0FF6, r26
    1b38:	10 92 00 10 	sts	0x1000, r1
    1b3c:	10 92 ff 0f 	sts	0x0FFF, r1
};

// A type of stream that just throws away output and returns EOF for input
class NullStream : public Stream{
public:
	NullStream(void) : Stream(){};
    1b40:	81 e9       	ldi	r24, 0x91	; 145
    1b42:	95 e0       	ldi	r25, 0x05	; 5
    1b44:	90 93 f2 0f 	sts	0x0FF2, r25
    1b48:	80 93 f1 0f 	sts	0x0FF1, r24
    1b4c:	08 95       	ret

00001b4e <_ZNK9StatusLed3setEa>:
	}

	virtual void set(boolean value) const{
    1b4e:	1f 93       	push	r17
    1b50:	16 2f       	mov	r17, r22
		LED_off(&statusLED);
	}
}

static __inline__ void statusLED_set(boolean value){
	if(pin_is_output(statusLED.pin)){
    1b52:	80 91 23 10 	lds	r24, 0x1023
    1b56:	90 91 24 10 	lds	r25, 0x1024
    1b5a:	0e 94 c4 11 	call	0x2388	; 0x2388 <pin_is_output>
    1b5e:	88 23       	and	r24, r24
    1b60:	29 f0       	breq	.+10     	; 0x1b6c <_ZNK9StatusLed3setEa+0x1e>
		LED_set(&statusLED, value);
    1b62:	83 e2       	ldi	r24, 0x23	; 35
    1b64:	90 e1       	ldi	r25, 0x10	; 16
    1b66:	61 2f       	mov	r22, r17
    1b68:	0e 94 27 12 	call	0x244e	; 0x244e <LED_set>
	StatusLed(LED * cstr) : Led(cstr){
	}

	virtual void set(boolean value) const{
		statusLED_set(value);
	}
    1b6c:	1f 91       	pop	r17
    1b6e:	08 95       	ret

00001b70 <_ZNK3Led3setEa>:
	}
	void off(void) const{
		set(FALSE);
	}
	virtual void set(boolean value) const{
		LED_set(m_cstr,value);
    1b70:	fc 01       	movw	r30, r24
    1b72:	82 81       	ldd	r24, Z+2	; 0x02
    1b74:	93 81       	ldd	r25, Z+3	; 0x03
    1b76:	0e 94 27 12 	call	0x244e	; 0x244e <LED_set>
	}
    1b7a:	08 95       	ret

00001b7c <_ZN7Marquee5writeEh>:

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){return marqueeSendByte(m_cstr,data);}
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	80 89       	ldd	r24, Z+16	; 0x10
    1b80:	91 89       	ldd	r25, Z+17	; 0x11
    1b82:	0e 94 d7 12 	call	0x25ae	; 0x25ae <marqueeSendByte>
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	08 95       	ret

00001b8a <_ZN6UartHW4readEv>:
	};

	virtual int read(void){
    1b8a:	fc 01       	movw	r30, r24
		int ch;

		if(m_polling){
    1b8c:	80 8d       	ldd	r24, Z+24	; 0x18
    1b8e:	88 23       	and	r24, r24
    1b90:	29 f0       	breq	.+10     	; 0x1b9c <_ZN6UartHW4readEv+0x12>
			ch = uartPollByte(m_hw);
    1b92:	86 89       	ldd	r24, Z+22	; 0x16
    1b94:	97 89       	ldd	r25, Z+23	; 0x17
    1b96:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <uartPollByte>
    1b9a:	08 95       	ret
		}else{
			ch = __uartGetByte(m_cstr);
    1b9c:	80 89       	ldd	r24, Z+16	; 0x10
    1b9e:	91 89       	ldd	r25, Z+17	; 0x11
    1ba0:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__uartGetByte>
		}

		return ch;
	}
    1ba4:	08 95       	ret

00001ba6 <_ZN4Uart4readEv>:
	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){
		return _uartSendByte(m_cstr, data);
	}
	virtual int read(void){
		return __uartGetByte(m_cstr);
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	80 89       	ldd	r24, Z+16	; 0x10
    1baa:	91 89       	ldd	r25, Z+17	; 0x11
    1bac:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__uartGetByte>
	}
    1bb0:	08 95       	ret

00001bb2 <_ZN4Uart5writeEh>:
		return m_cstr;
	}

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){
		return _uartSendByte(m_cstr, data);
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	80 89       	ldd	r24, Z+16	; 0x10
    1bb6:	91 89       	ldd	r25, Z+17	; 0x11
    1bb8:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <_uartSendByte>
	}
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	08 95       	ret

00001bc0 <__initTimers>:
// Private methods

//int __timerPrescalerIndex(const Timer* timer, uint16_t prescaler);

static __inline__ TimerData* timerGetData(const Timer* timer){
	return (TimerData*)pgm_read_word(&timer->pgm_data);
    1bc0:	2b ef       	ldi	r18, 0xFB	; 251
    1bc2:	31 e0       	ldi	r19, 0x01	; 1
    1bc4:	f9 01       	movw	r30, r18
    1bc6:	a5 91       	lpm	r26, Z+
    1bc8:	b4 91       	lpm	r27, Z+
    1bca:	84 e0       	ldi	r24, 0x04	; 4
    1bcc:	1a 96       	adiw	r26, 0x0a	; 10
    1bce:	8c 93       	st	X, r24
    1bd0:	1a 97       	sbiw	r26, 0x0a	; 10
    1bd2:	84 b5       	in	r24, 0x24	; 36
    1bd4:	82 60       	ori	r24, 0x02	; 2
    1bd6:	84 bd       	out	0x24, r24	; 36
    1bd8:	8a ef       	ldi	r24, 0xFA	; 250
    1bda:	87 bd       	out	0x27, r24	; 39
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	94 e0       	ldi	r25, 0x04	; 4
    1be0:	8d 93       	st	X+, r24
    1be2:	9c 93       	st	X, r25
    1be4:	85 b5       	in	r24, 0x25	; 37
    1be6:	85 60       	ori	r24, 0x05	; 5
    1be8:	85 bd       	out	0x25, r24	; 37
    1bea:	21 5d       	subi	r18, 0xD1	; 209
    1bec:	3f 4f       	sbci	r19, 0xFF	; 255
    1bee:	f9 01       	movw	r30, r18
    1bf0:	a5 91       	lpm	r26, Z+
    1bf2:	b4 91       	lpm	r27, Z+
    1bf4:	9e e0       	ldi	r25, 0x0E	; 14
    1bf6:	1a 96       	adiw	r26, 0x0a	; 10
    1bf8:	9c 93       	st	X, r25
    1bfa:	1a 97       	sbiw	r26, 0x0a	; 10
    1bfc:	e0 e8       	ldi	r30, 0x80	; 128
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	82 60       	ori	r24, 0x02	; 2
    1c04:	80 83       	st	Z, r24
    1c06:	e1 e8       	ldi	r30, 0x81	; 129
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	88 60       	ori	r24, 0x08	; 8
    1c0e:	80 83       	st	Z, r24
    1c10:	80 81       	ld	r24, Z
    1c12:	80 61       	ori	r24, 0x10	; 16
    1c14:	80 83       	st	Z, r24
    1c16:	40 e4       	ldi	r20, 0x40	; 64
    1c18:	5c e9       	ldi	r21, 0x9C	; 156
    1c1a:	50 93 87 00 	sts	0x0087, r21
    1c1e:	40 93 86 00 	sts	0x0086, r20
    1c22:	28 e0       	ldi	r18, 0x08	; 8
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	2d 93       	st	X+, r18
    1c28:	3c 93       	st	X, r19
    1c2a:	80 81       	ld	r24, Z
    1c2c:	82 60       	ori	r24, 0x02	; 2
    1c2e:	80 83       	st	Z, r24
    1c30:	e8 e8       	ldi	r30, 0x88	; 136
    1c32:	f2 e0       	ldi	r31, 0x02	; 2
    1c34:	a5 91       	lpm	r26, Z+
    1c36:	b4 91       	lpm	r27, Z+
    1c38:	1a 96       	adiw	r26, 0x0a	; 10
    1c3a:	9c 93       	st	X, r25
    1c3c:	1a 97       	sbiw	r26, 0x0a	; 10
    1c3e:	e0 e9       	ldi	r30, 0x90	; 144
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	82 60       	ori	r24, 0x02	; 2
    1c46:	80 83       	st	Z, r24
    1c48:	e1 e9       	ldi	r30, 0x91	; 145
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	88 60       	ori	r24, 0x08	; 8
    1c50:	80 83       	st	Z, r24
    1c52:	80 81       	ld	r24, Z
    1c54:	80 61       	ori	r24, 0x10	; 16
    1c56:	80 83       	st	Z, r24
    1c58:	50 93 97 00 	sts	0x0097, r21
    1c5c:	40 93 96 00 	sts	0x0096, r20
    1c60:	2d 93       	st	X+, r18
    1c62:	3c 93       	st	X, r19
    1c64:	80 81       	ld	r24, Z
    1c66:	82 60       	ori	r24, 0x02	; 2
    1c68:	80 83       	st	Z, r24
    1c6a:	e7 eb       	ldi	r30, 0xB7	; 183
    1c6c:	f2 e0       	ldi	r31, 0x02	; 2
    1c6e:	a5 91       	lpm	r26, Z+
    1c70:	b4 91       	lpm	r27, Z+
    1c72:	1a 96       	adiw	r26, 0x0a	; 10
    1c74:	9c 93       	st	X, r25
    1c76:	1a 97       	sbiw	r26, 0x0a	; 10
    1c78:	e0 ea       	ldi	r30, 0xA0	; 160
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	82 60       	ori	r24, 0x02	; 2
    1c80:	80 83       	st	Z, r24
    1c82:	e1 ea       	ldi	r30, 0xA1	; 161
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	88 60       	ori	r24, 0x08	; 8
    1c8a:	80 83       	st	Z, r24
    1c8c:	80 81       	ld	r24, Z
    1c8e:	80 61       	ori	r24, 0x10	; 16
    1c90:	80 83       	st	Z, r24
    1c92:	50 93 a7 00 	sts	0x00A7, r21
    1c96:	40 93 a6 00 	sts	0x00A6, r20
    1c9a:	2d 93       	st	X+, r18
    1c9c:	3c 93       	st	X, r19
    1c9e:	80 81       	ld	r24, Z
    1ca0:	82 60       	ori	r24, 0x02	; 2
    1ca2:	80 83       	st	Z, r24
    1ca4:	e6 ee       	ldi	r30, 0xE6	; 230
    1ca6:	f2 e0       	ldi	r31, 0x02	; 2
    1ca8:	a5 91       	lpm	r26, Z+
    1caa:	b4 91       	lpm	r27, Z+
    1cac:	1a 96       	adiw	r26, 0x0a	; 10
    1cae:	9c 93       	st	X, r25
    1cb0:	1a 97       	sbiw	r26, 0x0a	; 10
    1cb2:	e0 e2       	ldi	r30, 0x20	; 32
    1cb4:	f1 e0       	ldi	r31, 0x01	; 1
    1cb6:	80 81       	ld	r24, Z
    1cb8:	82 60       	ori	r24, 0x02	; 2
    1cba:	80 83       	st	Z, r24
    1cbc:	e1 e2       	ldi	r30, 0x21	; 33
    1cbe:	f1 e0       	ldi	r31, 0x01	; 1
    1cc0:	80 81       	ld	r24, Z
    1cc2:	88 60       	ori	r24, 0x08	; 8
    1cc4:	80 83       	st	Z, r24
    1cc6:	80 81       	ld	r24, Z
    1cc8:	80 61       	ori	r24, 0x10	; 16
    1cca:	80 83       	st	Z, r24
    1ccc:	50 93 27 01 	sts	0x0127, r21
    1cd0:	40 93 26 01 	sts	0x0126, r20
    1cd4:	2d 93       	st	X+, r18
    1cd6:	3c 93       	st	X, r19
    1cd8:	80 81       	ld	r24, Z
    1cda:	82 60       	ori	r24, 0x02	; 2
    1cdc:	80 83       	st	Z, r24
    1cde:	08 95       	ret

00001ce0 <servoPWMInit>:
    1ce0:	8f 92       	push	r8
    1ce2:	9f 92       	push	r9
    1ce4:	af 92       	push	r10
    1ce6:	bf 92       	push	r11
    1ce8:	cf 92       	push	r12
    1cea:	df 92       	push	r13
    1cec:	ef 92       	push	r14
    1cee:	ff 92       	push	r15
    1cf0:	0f 93       	push	r16
    1cf2:	1f 93       	push	r17
    1cf4:	cf 93       	push	r28
    1cf6:	df 93       	push	r29
    1cf8:	6c 01       	movw	r12, r24
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	12 96       	adiw	r26, 0x02	; 2
    1cfe:	8c 91       	ld	r24, X
    1d00:	c8 2f       	mov	r28, r24
    1d02:	d0 e0       	ldi	r29, 0x00	; 0
    1d04:	21 97       	sbiw	r28, 0x01	; 1
    1d06:	7e 01       	movw	r14, r28
    1d08:	ee 0c       	add	r14, r14
    1d0a:	ff 1c       	adc	r15, r15
    1d0c:	92 ef       	ldi	r25, 0xF2	; 242
    1d0e:	89 2e       	mov	r8, r25
    1d10:	93 e0       	ldi	r25, 0x03	; 3
    1d12:	99 2e       	mov	r9, r25
    1d14:	8f e2       	ldi	r24, 0x2F	; 47
    1d16:	a8 2e       	mov	r10, r24
    1d18:	47 c0       	rjmp	.+142    	; 0x1da8 <servoPWMInit+0xc8>
    1d1a:	d6 01       	movw	r26, r12
    1d1c:	ed 91       	ld	r30, X+
    1d1e:	fc 91       	ld	r31, X
    1d20:	ee 0d       	add	r30, r14
    1d22:	ff 1d       	adc	r31, r15
    1d24:	05 91       	lpm	r16, Z+
    1d26:	14 91       	lpm	r17, Z+
    1d28:	f8 01       	movw	r30, r16
    1d2a:	d5 82       	std	Z+5, r13	; 0x05
    1d2c:	c4 82       	std	Z+4, r12	; 0x04
    1d2e:	86 81       	ldd	r24, Z+6	; 0x06
    1d30:	97 81       	ldd	r25, Z+7	; 0x07
    1d32:	0e 94 f5 14 	call	0x29ea	; 0x29ea <compareFromIOPin>
    1d36:	fc 01       	movw	r30, r24
    1d38:	d8 01       	movw	r26, r16
    1d3a:	55 96       	adiw	r26, 0x15	; 21
    1d3c:	9c 93       	st	X, r25
    1d3e:	8e 93       	st	-X, r24
    1d40:	54 97       	sbiw	r26, 0x14	; 20
    1d42:	32 96       	adiw	r30, 0x02	; 2
    1d44:	b4 90       	lpm	r11, Z+
    1d46:	11 96       	adiw	r26, 0x01	; 1
    1d48:	9c 92       	st	X, r9
    1d4a:	8e 92       	st	-X, r8
    1d4c:	16 96       	adiw	r26, 0x06	; 6
    1d4e:	8d 91       	ld	r24, X+
    1d50:	9c 91       	ld	r25, X
    1d52:	17 97       	sbiw	r26, 0x07	; 7
    1d54:	60 e0       	ldi	r22, 0x00	; 0
    1d56:	0e 94 00 12 	call	0x2400	; 0x2400 <pin_make_output>
    1d5a:	ba 9c       	mul	r11, r10
    1d5c:	c0 01       	movw	r24, r0
    1d5e:	11 24       	eor	r1, r1
    1d60:	85 5e       	subi	r24, 0xE5	; 229
    1d62:	9d 4f       	sbci	r25, 0xFD	; 253
    1d64:	fc 01       	movw	r30, r24
    1d66:	a5 91       	lpm	r26, Z+
    1d68:	b4 91       	lpm	r27, Z+
    1d6a:	8d 91       	ld	r24, X+
    1d6c:	9c 91       	ld	r25, X
    1d6e:	d8 01       	movw	r26, r16
    1d70:	53 96       	adiw	r26, 0x13	; 19
    1d72:	9c 93       	st	X, r25
    1d74:	8e 93       	st	-X, r24
    1d76:	52 97       	sbiw	r26, 0x12	; 18
    1d78:	18 96       	adiw	r26, 0x08	; 8
    1d7a:	6d 91       	ld	r22, X+
    1d7c:	7c 91       	ld	r23, X
    1d7e:	19 97       	sbiw	r26, 0x09	; 9
    1d80:	1a 96       	adiw	r26, 0x0a	; 10
    1d82:	4d 91       	ld	r20, X+
    1d84:	5c 91       	ld	r21, X
    1d86:	1b 97       	sbiw	r26, 0x0b	; 11
    1d88:	c8 01       	movw	r24, r16
    1d8a:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <servoSetConfig>
    1d8e:	c8 01       	movw	r24, r16
    1d90:	60 e0       	ldi	r22, 0x00	; 0
    1d92:	0e 94 96 10 	call	0x212c	; 0x212c <__act_setSpeed>
    1d96:	c8 01       	movw	r24, r16
    1d98:	6f ef       	ldi	r22, 0xFF	; 255
    1d9a:	0e 94 b6 10 	call	0x216c	; 0x216c <__act_setConnected>
    1d9e:	21 97       	sbiw	r28, 0x01	; 1
    1da0:	ee ef       	ldi	r30, 0xFE	; 254
    1da2:	ff ef       	ldi	r31, 0xFF	; 255
    1da4:	ee 0e       	add	r14, r30
    1da6:	ff 1e       	adc	r15, r31
    1da8:	ff ef       	ldi	r31, 0xFF	; 255
    1daa:	cf 3f       	cpi	r28, 0xFF	; 255
    1dac:	df 07       	cpc	r29, r31
    1dae:	09 f0       	breq	.+2      	; 0x1db2 <servoPWMInit+0xd2>
    1db0:	b4 cf       	rjmp	.-152    	; 0x1d1a <servoPWMInit+0x3a>
    1db2:	df 91       	pop	r29
    1db4:	cf 91       	pop	r28
    1db6:	1f 91       	pop	r17
    1db8:	0f 91       	pop	r16
    1dba:	ff 90       	pop	r15
    1dbc:	ef 90       	pop	r14
    1dbe:	df 90       	pop	r13
    1dc0:	cf 90       	pop	r12
    1dc2:	bf 90       	pop	r11
    1dc4:	af 90       	pop	r10
    1dc6:	9f 90       	pop	r9
    1dc8:	8f 90       	pop	r8
    1dca:	08 95       	ret

00001dcc <setConnected>:
    1dcc:	fc 01       	movw	r30, r24
    1dce:	84 89       	ldd	r24, Z+20	; 0x14
    1dd0:	95 89       	ldd	r25, Z+21	; 0x15
    1dd2:	61 11       	cpse	r22, r1
    1dd4:	62 e0       	ldi	r22, 0x02	; 2
    1dd6:	0e 94 41 15 	call	0x2a82	; 0x2a82 <compareSetOutputMode>
    1dda:	08 95       	ret

00001ddc <setSpeed>:
    1ddc:	ef 92       	push	r14
    1dde:	ff 92       	push	r15
    1de0:	0f 93       	push	r16
    1de2:	1f 93       	push	r17
    1de4:	fc 01       	movw	r30, r24
    1de6:	e4 88       	ldd	r14, Z+20	; 0x14
    1de8:	f5 88       	ldd	r15, Z+21	; 0x15
    1dea:	24 85       	ldd	r18, Z+12	; 0x0c
    1dec:	35 85       	ldd	r19, Z+13	; 0x0d
    1dee:	06 85       	ldd	r16, Z+14	; 0x0e
    1df0:	17 85       	ldd	r17, Z+15	; 0x0f
    1df2:	86 2f       	mov	r24, r22
    1df4:	99 27       	eor	r25, r25
    1df6:	87 fd       	sbrc	r24, 7
    1df8:	90 95       	com	r25
    1dfa:	61 e8       	ldi	r22, 0x81	; 129
    1dfc:	7f ef       	ldi	r23, 0xFF	; 255
    1dfe:	4f e7       	ldi	r20, 0x7F	; 127
    1e00:	50 e0       	ldi	r21, 0x00	; 0
    1e02:	0e 94 18 11 	call	0x2230	; 0x2230 <interpolateU>
    1e06:	bc 01       	movw	r22, r24
    1e08:	c7 01       	movw	r24, r14
    1e0a:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <compareSetThreshold>
    1e0e:	1f 91       	pop	r17
    1e10:	0f 91       	pop	r16
    1e12:	ff 90       	pop	r15
    1e14:	ef 90       	pop	r14
    1e16:	08 95       	ret

00001e18 <servoSetConfig>:
    1e18:	9f 92       	push	r9
    1e1a:	af 92       	push	r10
    1e1c:	bf 92       	push	r11
    1e1e:	cf 92       	push	r12
    1e20:	df 92       	push	r13
    1e22:	ef 92       	push	r14
    1e24:	ff 92       	push	r15
    1e26:	0f 93       	push	r16
    1e28:	1f 93       	push	r17
    1e2a:	cf 93       	push	r28
    1e2c:	df 93       	push	r29
    1e2e:	ec 01       	movw	r28, r24
    1e30:	7b 01       	movw	r14, r22
    1e32:	8a 01       	movw	r16, r20
    1e34:	79 87       	std	Y+9, r23	; 0x09
    1e36:	68 87       	std	Y+8, r22	; 0x08
    1e38:	5b 87       	std	Y+11, r21	; 0x0b
    1e3a:	4a 87       	std	Y+10, r20	; 0x0a
    1e3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e40:	89 2b       	or	r24, r25
    1e42:	09 f4       	brne	.+2      	; 0x1e46 <servoSetConfig+0x2e>
    1e44:	5e c0       	rjmp	.+188    	; 0x1f02 <servoSetConfig+0xea>
    1e46:	9f b6       	in	r9, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	8a 89       	ldd	r24, Y+18	; 0x12
    1e4c:	9b 89       	ldd	r25, Y+19	; 0x13
    1e4e:	68 ee       	ldi	r22, 0xE8	; 232
    1e50:	73 e0       	ldi	r23, 0x03	; 3
    1e52:	0e 94 1a 22 	call	0x4434	; 0x4434 <__udivmodhi4>
    1e56:	5b 01       	movw	r10, r22
    1e58:	cc 24       	eor	r12, r12
    1e5a:	dd 24       	eor	r13, r13
    1e5c:	b7 01       	movw	r22, r14
    1e5e:	60 1b       	sub	r22, r16
    1e60:	71 0b       	sbc	r23, r17
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	a6 01       	movw	r20, r12
    1e68:	95 01       	movw	r18, r10
    1e6a:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__mulsi3>
    1e6e:	24 e1       	ldi	r18, 0x14	; 20
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	40 e0       	ldi	r20, 0x00	; 0
    1e74:	50 e0       	ldi	r21, 0x00	; 0
    1e76:	0e 94 2e 22 	call	0x445c	; 0x445c <__udivmodsi4>
    1e7a:	c9 01       	movw	r24, r18
    1e7c:	da 01       	movw	r26, r20
    1e7e:	9c 01       	movw	r18, r24
    1e80:	ad 01       	movw	r20, r26
    1e82:	da 01       	movw	r26, r20
    1e84:	c9 01       	movw	r24, r18
    1e86:	80 70       	andi	r24, 0x00	; 0
    1e88:	90 70       	andi	r25, 0x00	; 0
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	a1 05       	cpc	r26, r1
    1e8e:	b1 05       	cpc	r27, r1
    1e90:	39 f0       	breq	.+14     	; 0x1ea0 <servoSetConfig+0x88>
    1e92:	86 ee       	ldi	r24, 0xE6	; 230
    1e94:	0e 94 61 11 	call	0x22c2	; 0x22c2 <setError>
    1e98:	2f ef       	ldi	r18, 0xFF	; 255
    1e9a:	3f ef       	ldi	r19, 0xFF	; 255
    1e9c:	40 e0       	ldi	r20, 0x00	; 0
    1e9e:	50 e0       	ldi	r21, 0x00	; 0
    1ea0:	3d 87       	std	Y+13, r19	; 0x0d
    1ea2:	2c 87       	std	Y+12, r18	; 0x0c
    1ea4:	0e 0d       	add	r16, r14
    1ea6:	1f 1d       	adc	r17, r15
    1ea8:	b8 01       	movw	r22, r16
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	a6 01       	movw	r20, r12
    1eb0:	95 01       	movw	r18, r10
    1eb2:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__mulsi3>
    1eb6:	24 e1       	ldi	r18, 0x14	; 20
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	40 e0       	ldi	r20, 0x00	; 0
    1ebc:	50 e0       	ldi	r21, 0x00	; 0
    1ebe:	0e 94 2e 22 	call	0x445c	; 0x445c <__udivmodsi4>
    1ec2:	c9 01       	movw	r24, r18
    1ec4:	da 01       	movw	r26, r20
    1ec6:	9c 01       	movw	r18, r24
    1ec8:	ad 01       	movw	r20, r26
    1eca:	da 01       	movw	r26, r20
    1ecc:	c9 01       	movw	r24, r18
    1ece:	80 70       	andi	r24, 0x00	; 0
    1ed0:	90 70       	andi	r25, 0x00	; 0
    1ed2:	00 97       	sbiw	r24, 0x00	; 0
    1ed4:	a1 05       	cpc	r26, r1
    1ed6:	b1 05       	cpc	r27, r1
    1ed8:	39 f0       	breq	.+14     	; 0x1ee8 <servoSetConfig+0xd0>
    1eda:	86 ee       	ldi	r24, 0xE6	; 230
    1edc:	0e 94 61 11 	call	0x22c2	; 0x22c2 <setError>
    1ee0:	2f ef       	ldi	r18, 0xFF	; 255
    1ee2:	3f ef       	ldi	r19, 0xFF	; 255
    1ee4:	40 e0       	ldi	r20, 0x00	; 0
    1ee6:	50 e0       	ldi	r21, 0x00	; 0
    1ee8:	3f 87       	std	Y+15, r19	; 0x0f
    1eea:	2e 87       	std	Y+14, r18	; 0x0e
    1eec:	8b 81       	ldd	r24, Y+3	; 0x03
    1eee:	80 ff       	sbrs	r24, 0
    1ef0:	07 c0       	rjmp	.+14     	; 0x1f00 <servoSetConfig+0xe8>
    1ef2:	6a 81       	ldd	r22, Y+2	; 0x02
    1ef4:	61 50       	subi	r22, 0x01	; 1
    1ef6:	6a 83       	std	Y+2, r22	; 0x02
    1ef8:	6f 5f       	subi	r22, 0xFF	; 255
    1efa:	ce 01       	movw	r24, r28
    1efc:	0e 94 96 10 	call	0x212c	; 0x212c <__act_setSpeed>
    1f00:	9f be       	out	0x3f, r9	; 63
    1f02:	df 91       	pop	r29
    1f04:	cf 91       	pop	r28
    1f06:	1f 91       	pop	r17
    1f08:	0f 91       	pop	r16
    1f0a:	ff 90       	pop	r15
    1f0c:	ef 90       	pop	r14
    1f0e:	df 90       	pop	r13
    1f10:	cf 90       	pop	r12
    1f12:	bf 90       	pop	r11
    1f14:	af 90       	pop	r10
    1f16:	9f 90       	pop	r9
    1f18:	08 95       	ret

00001f1a <_ZN6Stream5printEc>:
    1f1a:	1f 93       	push	r17
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	ec 01       	movw	r28, r24
    1f22:	16 2f       	mov	r17, r22
    1f24:	6a 30       	cpi	r22, 0x0A	; 10
    1f26:	39 f4       	brne	.+14     	; 0x1f36 <_ZN6Stream5printEc+0x1c>
    1f28:	e8 81       	ld	r30, Y
    1f2a:	f9 81       	ldd	r31, Y+1	; 0x01
    1f2c:	01 90       	ld	r0, Z+
    1f2e:	f0 81       	ld	r31, Z
    1f30:	e0 2d       	mov	r30, r0
    1f32:	6d e0       	ldi	r22, 0x0D	; 13
    1f34:	09 95       	icall
    1f36:	e8 81       	ld	r30, Y
    1f38:	f9 81       	ldd	r31, Y+1	; 0x01
    1f3a:	01 90       	ld	r0, Z+
    1f3c:	f0 81       	ld	r31, Z
    1f3e:	e0 2d       	mov	r30, r0
    1f40:	ce 01       	movw	r24, r28
    1f42:	61 2f       	mov	r22, r17
    1f44:	09 95       	icall
    1f46:	ce 01       	movw	r24, r28
    1f48:	df 91       	pop	r29
    1f4a:	cf 91       	pop	r28
    1f4c:	1f 91       	pop	r17
    1f4e:	08 95       	ret

00001f50 <_ZN6Stream5printEdh>:
    1f50:	ef 92       	push	r14
    1f52:	ff 92       	push	r15
    1f54:	0f 93       	push	r16
    1f56:	1f 93       	push	r17
    1f58:	df 93       	push	r29
    1f5a:	cf 93       	push	r28
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    1f60:	a0 97       	sbiw	r28, 0x20	; 32
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	f8 94       	cli
    1f66:	de bf       	out	0x3e, r29	; 62
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	cd bf       	out	0x3d, r28	; 61
    1f6c:	f8 2e       	mov	r15, r24
    1f6e:	e9 2e       	mov	r14, r25
    1f70:	cb 01       	movw	r24, r22
    1f72:	ba 01       	movw	r22, r20
    1f74:	4f ef       	ldi	r20, 0xFF	; 255
    1f76:	8e 01       	movw	r16, r28
    1f78:	0f 5f       	subi	r16, 0xFF	; 255
    1f7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7c:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <dtostrf>
    1f80:	bc 01       	movw	r22, r24
    1f82:	8f 2d       	mov	r24, r15
    1f84:	9e 2d       	mov	r25, r14
    1f86:	0e 94 2e 10 	call	0x205c	; 0x205c <_ZN6Stream5printEPKc>
    1f8a:	8f 2d       	mov	r24, r15
    1f8c:	9e 2d       	mov	r25, r14
    1f8e:	a0 96       	adiw	r28, 0x20	; 32
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	de bf       	out	0x3e, r29	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	cd bf       	out	0x3d, r28	; 61
    1f9a:	cf 91       	pop	r28
    1f9c:	df 91       	pop	r29
    1f9e:	1f 91       	pop	r17
    1fa0:	0f 91       	pop	r16
    1fa2:	ff 90       	pop	r15
    1fa4:	ef 90       	pop	r14
    1fa6:	08 95       	ret

00001fa8 <_ZN6Stream5printElh>:
    1fa8:	0f 93       	push	r16
    1faa:	1f 93       	push	r17
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	a1 97       	sbiw	r28, 0x21	; 33
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	de bf       	out	0x3e, r29	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	cd bf       	out	0x3d, r28	; 61
    1fc0:	8c 01       	movw	r16, r24
    1fc2:	22 30       	cpi	r18, 0x02	; 2
    1fc4:	08 f4       	brcc	.+2      	; 0x1fc8 <_ZN6Stream5printElh+0x20>
    1fc6:	22 e0       	ldi	r18, 0x02	; 2
    1fc8:	cb 01       	movw	r24, r22
    1fca:	ba 01       	movw	r22, r20
    1fcc:	ae 01       	movw	r20, r28
    1fce:	4f 5f       	subi	r20, 0xFF	; 255
    1fd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <ltoa>
    1fd8:	bc 01       	movw	r22, r24
    1fda:	c8 01       	movw	r24, r16
    1fdc:	0e 94 2e 10 	call	0x205c	; 0x205c <_ZN6Stream5printEPKc>
    1fe0:	a1 96       	adiw	r28, 0x21	; 33
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	f8 94       	cli
    1fe6:	de bf       	out	0x3e, r29	; 62
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	cd bf       	out	0x3d, r28	; 61
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	1f 91       	pop	r17
    1ff2:	0f 91       	pop	r16
    1ff4:	08 95       	ret

00001ff6 <_ZN6Stream5printEl>:
    1ff6:	2a e0       	ldi	r18, 0x0A	; 10
    1ff8:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <_ZN6Stream5printElh>
    1ffc:	08 95       	ret

00001ffe <_ZN6Stream5printEih>:
    1ffe:	ab 01       	movw	r20, r22
    2000:	66 27       	eor	r22, r22
    2002:	57 fd       	sbrc	r21, 7
    2004:	60 95       	com	r22
    2006:	76 2f       	mov	r23, r22
    2008:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN6Stream5printEl>
    200c:	08 95       	ret

0000200e <_ZN6Stream5printEi>:
    200e:	ab 01       	movw	r20, r22
    2010:	66 27       	eor	r22, r22
    2012:	57 fd       	sbrc	r21, 7
    2014:	60 95       	com	r22
    2016:	76 2f       	mov	r23, r22
    2018:	2a e0       	ldi	r18, 0x0A	; 10
    201a:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <_ZN6Stream5printElh>
    201e:	08 95       	ret

00002020 <_ZN6Stream5printEa>:
    2020:	46 2f       	mov	r20, r22
    2022:	55 27       	eor	r21, r21
    2024:	47 fd       	sbrc	r20, 7
    2026:	50 95       	com	r21
    2028:	65 2f       	mov	r22, r21
    202a:	75 2f       	mov	r23, r21
    202c:	2a e0       	ldi	r18, 0x0A	; 10
    202e:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <_ZN6Stream5printElh>
    2032:	08 95       	ret

00002034 <_ZN6Stream5printEah>:
    2034:	ef 92       	push	r14
    2036:	ff 92       	push	r15
    2038:	0f 93       	push	r16
    203a:	1f 93       	push	r17
    203c:	e6 2e       	mov	r14, r22
    203e:	24 2f       	mov	r18, r20
    2040:	ff 24       	eor	r15, r15
    2042:	e7 fc       	sbrc	r14, 7
    2044:	f0 94       	com	r15
    2046:	0f 2d       	mov	r16, r15
    2048:	1f 2d       	mov	r17, r15
    204a:	b8 01       	movw	r22, r16
    204c:	a7 01       	movw	r20, r14
    204e:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <_ZN6Stream5printElh>
    2052:	1f 91       	pop	r17
    2054:	0f 91       	pop	r16
    2056:	ff 90       	pop	r15
    2058:	ef 90       	pop	r14
    205a:	08 95       	ret

0000205c <_ZN6Stream5printEPKc>:
    205c:	0f 93       	push	r16
    205e:	1f 93       	push	r17
    2060:	cf 93       	push	r28
    2062:	df 93       	push	r29
    2064:	18 2f       	mov	r17, r24
    2066:	09 2f       	mov	r16, r25
    2068:	eb 01       	movw	r28, r22
    206a:	04 c0       	rjmp	.+8      	; 0x2074 <_ZN6Stream5printEPKc+0x18>
    206c:	81 2f       	mov	r24, r17
    206e:	90 2f       	mov	r25, r16
    2070:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <_ZN6Stream5printEc>
    2074:	69 91       	ld	r22, Y+
    2076:	66 23       	and	r22, r22
    2078:	c9 f7       	brne	.-14     	; 0x206c <_ZN6Stream5printEPKc+0x10>
    207a:	81 2f       	mov	r24, r17
    207c:	90 2f       	mov	r25, r16
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	1f 91       	pop	r17
    2084:	0f 91       	pop	r16
    2086:	08 95       	ret

00002088 <_ZN6Stream5printEmh>:
    2088:	0f 93       	push	r16
    208a:	1f 93       	push	r17
    208c:	df 93       	push	r29
    208e:	cf 93       	push	r28
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	a1 97       	sbiw	r28, 0x21	; 33
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	f8 94       	cli
    209a:	de bf       	out	0x3e, r29	; 62
    209c:	0f be       	out	0x3f, r0	; 63
    209e:	cd bf       	out	0x3d, r28	; 61
    20a0:	8c 01       	movw	r16, r24
    20a2:	22 30       	cpi	r18, 0x02	; 2
    20a4:	08 f4       	brcc	.+2      	; 0x20a8 <_ZN6Stream5printEmh+0x20>
    20a6:	22 e0       	ldi	r18, 0x02	; 2
    20a8:	cb 01       	movw	r24, r22
    20aa:	ba 01       	movw	r22, r20
    20ac:	ae 01       	movw	r20, r28
    20ae:	4f 5f       	subi	r20, 0xFF	; 255
    20b0:	5f 4f       	sbci	r21, 0xFF	; 255
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <ultoa>
    20b8:	bc 01       	movw	r22, r24
    20ba:	c8 01       	movw	r24, r16
    20bc:	0e 94 2e 10 	call	0x205c	; 0x205c <_ZN6Stream5printEPKc>
    20c0:	a1 96       	adiw	r28, 0x21	; 33
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	f8 94       	cli
    20c6:	de bf       	out	0x3e, r29	; 62
    20c8:	0f be       	out	0x3f, r0	; 63
    20ca:	cd bf       	out	0x3d, r28	; 61
    20cc:	cf 91       	pop	r28
    20ce:	df 91       	pop	r29
    20d0:	1f 91       	pop	r17
    20d2:	0f 91       	pop	r16
    20d4:	08 95       	ret

000020d6 <_ZN6Stream5printEm>:
    20d6:	2a e0       	ldi	r18, 0x0A	; 10
    20d8:	0e 94 44 10 	call	0x2088	; 0x2088 <_ZN6Stream5printEmh>
    20dc:	08 95       	ret

000020de <_ZN6Stream5printEjh>:
    20de:	ab 01       	movw	r20, r22
    20e0:	60 e0       	ldi	r22, 0x00	; 0
    20e2:	70 e0       	ldi	r23, 0x00	; 0
    20e4:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <_ZN6Stream5printEm>
    20e8:	08 95       	ret

000020ea <_ZN6Stream5printEj>:
    20ea:	ab 01       	movw	r20, r22
    20ec:	60 e0       	ldi	r22, 0x00	; 0
    20ee:	70 e0       	ldi	r23, 0x00	; 0
    20f0:	2a e0       	ldi	r18, 0x0A	; 10
    20f2:	0e 94 44 10 	call	0x2088	; 0x2088 <_ZN6Stream5printEmh>
    20f6:	08 95       	ret

000020f8 <_ZN6Stream5printEh>:
    20f8:	46 2f       	mov	r20, r22
    20fa:	50 e0       	ldi	r21, 0x00	; 0
    20fc:	60 e0       	ldi	r22, 0x00	; 0
    20fe:	70 e0       	ldi	r23, 0x00	; 0
    2100:	2a e0       	ldi	r18, 0x0A	; 10
    2102:	0e 94 44 10 	call	0x2088	; 0x2088 <_ZN6Stream5printEmh>
    2106:	08 95       	ret

00002108 <_ZN6Stream5printEhh>:
    2108:	ef 92       	push	r14
    210a:	ff 92       	push	r15
    210c:	0f 93       	push	r16
    210e:	1f 93       	push	r17
    2110:	24 2f       	mov	r18, r20
    2112:	e6 2e       	mov	r14, r22
    2114:	ff 24       	eor	r15, r15
    2116:	00 e0       	ldi	r16, 0x00	; 0
    2118:	10 e0       	ldi	r17, 0x00	; 0
    211a:	b8 01       	movw	r22, r16
    211c:	a7 01       	movw	r20, r14
    211e:	0e 94 44 10 	call	0x2088	; 0x2088 <_ZN6Stream5printEmh>
    2122:	1f 91       	pop	r17
    2124:	0f 91       	pop	r16
    2126:	ff 90       	pop	r15
    2128:	ef 90       	pop	r14
    212a:	08 95       	ret

0000212c <__act_setSpeed>:
    212c:	1f 93       	push	r17
    212e:	cf 93       	push	r28
    2130:	df 93       	push	r29
    2132:	ec 01       	movw	r28, r24
    2134:	16 2f       	mov	r17, r22
    2136:	61 38       	cpi	r22, 0x81	; 129
    2138:	0c f4       	brge	.+2      	; 0x213c <__act_setSpeed+0x10>
    213a:	11 e8       	ldi	r17, 0x81	; 129
    213c:	e8 81       	ld	r30, Y
    213e:	f9 81       	ldd	r31, Y+1	; 0x01
    2140:	30 97       	sbiw	r30, 0x00	; 0
    2142:	79 f0       	breq	.+30     	; 0x2162 <__act_setSpeed+0x36>
    2144:	25 91       	lpm	r18, Z+
    2146:	34 91       	lpm	r19, Z+
    2148:	21 15       	cp	r18, r1
    214a:	31 05       	cpc	r19, r1
    214c:	51 f0       	breq	.+20     	; 0x2162 <__act_setSpeed+0x36>
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	81 fd       	sbrc	r24, 1
    2152:	02 c0       	rjmp	.+4      	; 0x2158 <__act_setSpeed+0x2c>
    2154:	61 2f       	mov	r22, r17
    2156:	02 c0       	rjmp	.+4      	; 0x215c <__act_setSpeed+0x30>
    2158:	61 2f       	mov	r22, r17
    215a:	61 95       	neg	r22
    215c:	ce 01       	movw	r24, r28
    215e:	f9 01       	movw	r30, r18
    2160:	09 95       	icall
    2162:	1a 83       	std	Y+2, r17	; 0x02
    2164:	df 91       	pop	r29
    2166:	cf 91       	pop	r28
    2168:	1f 91       	pop	r17
    216a:	08 95       	ret

0000216c <__act_setConnected>:
    216c:	dc 01       	movw	r26, r24
    216e:	96 2f       	mov	r25, r22
    2170:	91 70       	andi	r25, 0x01	; 1
    2172:	13 96       	adiw	r26, 0x03	; 3
    2174:	8c 91       	ld	r24, X
    2176:	13 97       	sbiw	r26, 0x03	; 3
    2178:	8e 7f       	andi	r24, 0xFE	; 254
    217a:	89 2b       	or	r24, r25
    217c:	13 96       	adiw	r26, 0x03	; 3
    217e:	8c 93       	st	X, r24
    2180:	13 97       	sbiw	r26, 0x03	; 3
    2182:	8d 91       	ld	r24, X+
    2184:	9c 91       	ld	r25, X
    2186:	11 97       	sbiw	r26, 0x01	; 1
    2188:	00 97       	sbiw	r24, 0x00	; 0
    218a:	51 f0       	breq	.+20     	; 0x21a0 <__act_setConnected+0x34>
    218c:	fc 01       	movw	r30, r24
    218e:	32 96       	adiw	r30, 0x02	; 2
    2190:	25 91       	lpm	r18, Z+
    2192:	34 91       	lpm	r19, Z+
    2194:	21 15       	cp	r18, r1
    2196:	31 05       	cpc	r19, r1
    2198:	19 f0       	breq	.+6      	; 0x21a0 <__act_setConnected+0x34>
    219a:	cd 01       	movw	r24, r26
    219c:	f9 01       	movw	r30, r18
    219e:	09 95       	icall
    21a0:	08 95       	ret

000021a2 <interpolate>:
    21a2:	4f 92       	push	r4
    21a4:	5f 92       	push	r5
    21a6:	6f 92       	push	r6
    21a8:	7f 92       	push	r7
    21aa:	8f 92       	push	r8
    21ac:	9f 92       	push	r9
    21ae:	af 92       	push	r10
    21b0:	bf 92       	push	r11
    21b2:	cf 92       	push	r12
    21b4:	df 92       	push	r13
    21b6:	ef 92       	push	r14
    21b8:	ff 92       	push	r15
    21ba:	0f 93       	push	r16
    21bc:	1f 93       	push	r17
    21be:	2b 01       	movw	r4, r22
    21c0:	3a 01       	movw	r6, r20
    21c2:	59 01       	movw	r10, r18
    21c4:	78 01       	movw	r14, r16
    21c6:	e2 1a       	sub	r14, r18
    21c8:	f3 0a       	sbc	r15, r19
    21ca:	00 27       	eor	r16, r16
    21cc:	f7 fc       	sbrc	r15, 7
    21ce:	00 95       	com	r16
    21d0:	10 2f       	mov	r17, r16
    21d2:	9c 01       	movw	r18, r24
    21d4:	26 1b       	sub	r18, r22
    21d6:	37 0b       	sbc	r19, r23
    21d8:	44 27       	eor	r20, r20
    21da:	37 fd       	sbrc	r19, 7
    21dc:	40 95       	com	r20
    21de:	54 2f       	mov	r21, r20
    21e0:	c8 01       	movw	r24, r16
    21e2:	b7 01       	movw	r22, r14
    21e4:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__mulsi3>
    21e8:	64 18       	sub	r6, r4
    21ea:	75 08       	sbc	r7, r5
    21ec:	88 24       	eor	r8, r8
    21ee:	77 fc       	sbrc	r7, 7
    21f0:	80 94       	com	r8
    21f2:	98 2c       	mov	r9, r8
    21f4:	a4 01       	movw	r20, r8
    21f6:	93 01       	movw	r18, r6
    21f8:	0e 94 50 22 	call	0x44a0	; 0x44a0 <__divmodsi4>
    21fc:	c9 01       	movw	r24, r18
    21fe:	da 01       	movw	r26, r20
    2200:	cc 24       	eor	r12, r12
    2202:	b7 fc       	sbrc	r11, 7
    2204:	c0 94       	com	r12
    2206:	dc 2c       	mov	r13, r12
    2208:	a8 0e       	add	r10, r24
    220a:	b9 1e       	adc	r11, r25
    220c:	ca 1e       	adc	r12, r26
    220e:	db 1e       	adc	r13, r27
    2210:	c5 01       	movw	r24, r10
    2212:	1f 91       	pop	r17
    2214:	0f 91       	pop	r16
    2216:	ff 90       	pop	r15
    2218:	ef 90       	pop	r14
    221a:	df 90       	pop	r13
    221c:	cf 90       	pop	r12
    221e:	bf 90       	pop	r11
    2220:	af 90       	pop	r10
    2222:	9f 90       	pop	r9
    2224:	8f 90       	pop	r8
    2226:	7f 90       	pop	r7
    2228:	6f 90       	pop	r6
    222a:	5f 90       	pop	r5
    222c:	4f 90       	pop	r4
    222e:	08 95       	ret

00002230 <interpolateU>:
    2230:	4f 92       	push	r4
    2232:	5f 92       	push	r5
    2234:	6f 92       	push	r6
    2236:	7f 92       	push	r7
    2238:	8f 92       	push	r8
    223a:	9f 92       	push	r9
    223c:	af 92       	push	r10
    223e:	bf 92       	push	r11
    2240:	cf 92       	push	r12
    2242:	df 92       	push	r13
    2244:	ef 92       	push	r14
    2246:	ff 92       	push	r15
    2248:	0f 93       	push	r16
    224a:	1f 93       	push	r17
    224c:	2b 01       	movw	r4, r22
    224e:	5a 01       	movw	r10, r20
    2250:	39 01       	movw	r6, r18
    2252:	78 01       	movw	r14, r16
    2254:	e2 1a       	sub	r14, r18
    2256:	f3 0a       	sbc	r15, r19
    2258:	00 e0       	ldi	r16, 0x00	; 0
    225a:	10 e0       	ldi	r17, 0x00	; 0
    225c:	9c 01       	movw	r18, r24
    225e:	26 1b       	sub	r18, r22
    2260:	37 0b       	sbc	r19, r23
    2262:	44 27       	eor	r20, r20
    2264:	37 fd       	sbrc	r19, 7
    2266:	40 95       	com	r20
    2268:	54 2f       	mov	r21, r20
    226a:	c8 01       	movw	r24, r16
    226c:	b7 01       	movw	r22, r14
    226e:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__mulsi3>
    2272:	a4 18       	sub	r10, r4
    2274:	b5 08       	sbc	r11, r5
    2276:	cc 24       	eor	r12, r12
    2278:	b7 fc       	sbrc	r11, 7
    227a:	c0 94       	com	r12
    227c:	dc 2c       	mov	r13, r12
    227e:	a6 01       	movw	r20, r12
    2280:	95 01       	movw	r18, r10
    2282:	0e 94 50 22 	call	0x44a0	; 0x44a0 <__divmodsi4>
    2286:	88 24       	eor	r8, r8
    2288:	99 24       	eor	r9, r9
    228a:	26 0d       	add	r18, r6
    228c:	37 1d       	adc	r19, r7
    228e:	48 1d       	adc	r20, r8
    2290:	59 1d       	adc	r21, r9
    2292:	c9 01       	movw	r24, r18
    2294:	1f 91       	pop	r17
    2296:	0f 91       	pop	r16
    2298:	ff 90       	pop	r15
    229a:	ef 90       	pop	r14
    229c:	df 90       	pop	r13
    229e:	cf 90       	pop	r12
    22a0:	bf 90       	pop	r11
    22a2:	af 90       	pop	r10
    22a4:	9f 90       	pop	r9
    22a6:	8f 90       	pop	r8
    22a8:	7f 90       	pop	r7
    22aa:	6f 90       	pop	r6
    22ac:	5f 90       	pop	r5
    22ae:	4f 90       	pop	r4
    22b0:	08 95       	ret

000022b2 <getError>:
    22b2:	80 91 1e 10 	lds	r24, 0x101E
    22b6:	08 95       	ret

000022b8 <setErrorLog>:
    22b8:	90 93 22 10 	sts	0x1022, r25
    22bc:	80 93 21 10 	sts	0x1021, r24
    22c0:	08 95       	ret

000022c2 <setError>:
    22c2:	1f 93       	push	r17
    22c4:	18 2f       	mov	r17, r24
    22c6:	80 91 1e 10 	lds	r24, 0x101E
    22ca:	88 23       	and	r24, r24
    22cc:	09 f0       	breq	.+2      	; 0x22d0 <setError+0xe>
    22ce:	5a c0       	rjmp	.+180    	; 0x2384 <setError+0xc2>
    22d0:	10 93 1e 10 	sts	0x101E, r17
    22d4:	80 91 23 10 	lds	r24, 0x1023
    22d8:	90 91 24 10 	lds	r25, 0x1024
    22dc:	00 97       	sbiw	r24, 0x00	; 0
    22de:	49 f0       	breq	.+18     	; 0x22f2 <setError+0x30>
    22e0:	0e 94 c4 11 	call	0x2388	; 0x2388 <pin_is_output>
    22e4:	88 23       	and	r24, r24
    22e6:	29 f0       	breq	.+10     	; 0x22f2 <setError+0x30>
    22e8:	83 e2       	ldi	r24, 0x23	; 35
    22ea:	90 e1       	ldi	r25, 0x10	; 16
    22ec:	60 e0       	ldi	r22, 0x00	; 0
    22ee:	0e 94 27 12 	call	0x244e	; 0x244e <LED_set>
    22f2:	80 91 2e 10 	lds	r24, 0x102E
    22f6:	90 91 2f 10 	lds	r25, 0x102F
    22fa:	00 97       	sbiw	r24, 0x00	; 0
    22fc:	09 f4       	brne	.+2      	; 0x2300 <setError+0x3e>
    22fe:	42 c0       	rjmp	.+132    	; 0x2384 <setError+0xc2>
    2300:	17 ff       	sbrs	r17, 7
    2302:	12 c0       	rjmp	.+36     	; 0x2328 <setError+0x66>
    2304:	00 d0       	rcall	.+0      	; 0x2306 <setError+0x44>
    2306:	00 d0       	rcall	.+0      	; 0x2308 <setError+0x46>
    2308:	ad b7       	in	r26, 0x3d	; 61
    230a:	be b7       	in	r27, 0x3e	; 62
    230c:	12 96       	adiw	r26, 0x02	; 2
    230e:	9c 93       	st	X, r25
    2310:	8e 93       	st	-X, r24
    2312:	11 97       	sbiw	r26, 0x01	; 1
    2314:	87 e0       	ldi	r24, 0x07	; 7
    2316:	94 e0       	ldi	r25, 0x04	; 4
    2318:	14 96       	adiw	r26, 0x04	; 4
    231a:	9c 93       	st	X, r25
    231c:	8e 93       	st	-X, r24
    231e:	13 97       	sbiw	r26, 0x03	; 3
    2320:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <fprintf_P>
    2324:	11 95       	neg	r17
    2326:	0c c0       	rjmp	.+24     	; 0x2340 <setError+0x7e>
    2328:	00 d0       	rcall	.+0      	; 0x232a <setError+0x68>
    232a:	00 d0       	rcall	.+0      	; 0x232c <setError+0x6a>
    232c:	ed b7       	in	r30, 0x3d	; 61
    232e:	fe b7       	in	r31, 0x3e	; 62
    2330:	92 83       	std	Z+2, r25	; 0x02
    2332:	81 83       	std	Z+1, r24	; 0x01
    2334:	82 e0       	ldi	r24, 0x02	; 2
    2336:	94 e0       	ldi	r25, 0x04	; 4
    2338:	94 83       	std	Z+4, r25	; 0x04
    233a:	83 83       	std	Z+3, r24	; 0x03
    233c:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <fprintf_P>
    2340:	00 d0       	rcall	.+0      	; 0x2342 <setError+0x80>
    2342:	ed b7       	in	r30, 0x3d	; 61
    2344:	fe b7       	in	r31, 0x3e	; 62
    2346:	31 96       	adiw	r30, 0x01	; 1
    2348:	80 91 2e 10 	lds	r24, 0x102E
    234c:	90 91 2f 10 	lds	r25, 0x102F
    2350:	ad b7       	in	r26, 0x3d	; 61
    2352:	be b7       	in	r27, 0x3e	; 62
    2354:	12 96       	adiw	r26, 0x02	; 2
    2356:	9c 93       	st	X, r25
    2358:	8e 93       	st	-X, r24
    235a:	11 97       	sbiw	r26, 0x01	; 1
    235c:	86 ef       	ldi	r24, 0xF6	; 246
    235e:	93 e0       	ldi	r25, 0x03	; 3
    2360:	93 83       	std	Z+3, r25	; 0x03
    2362:	82 83       	std	Z+2, r24	; 0x02
    2364:	81 2f       	mov	r24, r17
    2366:	99 27       	eor	r25, r25
    2368:	87 fd       	sbrc	r24, 7
    236a:	90 95       	com	r25
    236c:	95 83       	std	Z+5, r25	; 0x05
    236e:	84 83       	std	Z+4, r24	; 0x04
    2370:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <fprintf_P>
    2374:	ed b7       	in	r30, 0x3d	; 61
    2376:	fe b7       	in	r31, 0x3e	; 62
    2378:	36 96       	adiw	r30, 0x06	; 6
    237a:	0f b6       	in	r0, 0x3f	; 63
    237c:	f8 94       	cli
    237e:	fe bf       	out	0x3e, r31	; 62
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	ed bf       	out	0x3d, r30	; 61
    2384:	1f 91       	pop	r17
    2386:	08 95       	ret

00002388 <pin_is_output>:
    2388:	9c 01       	movw	r18, r24
    238a:	00 97       	sbiw	r24, 0x00	; 0
    238c:	81 f0       	breq	.+32     	; 0x23ae <pin_is_output+0x26>
    238e:	fc 01       	movw	r30, r24
    2390:	85 91       	lpm	r24, Z+
    2392:	94 91       	lpm	r25, Z+
    2394:	02 96       	adiw	r24, 0x02	; 2
    2396:	fc 01       	movw	r30, r24
    2398:	a5 91       	lpm	r26, Z+
    239a:	b4 91       	lpm	r27, Z+
    239c:	2e 5f       	subi	r18, 0xFE	; 254
    239e:	3f 4f       	sbci	r19, 0xFF	; 255
    23a0:	f9 01       	movw	r30, r18
    23a2:	94 91       	lpm	r25, Z+
    23a4:	8c 91       	ld	r24, X
    23a6:	89 23       	and	r24, r25
    23a8:	11 f0       	breq	.+4      	; 0x23ae <pin_is_output+0x26>
    23aa:	8f ef       	ldi	r24, 0xFF	; 255
    23ac:	08 95       	ret
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	08 95       	ret

000023b2 <pin_make_input>:
    23b2:	cf 93       	push	r28
    23b4:	df 93       	push	r29
    23b6:	9c 01       	movw	r18, r24
    23b8:	00 97       	sbiw	r24, 0x00	; 0
    23ba:	f9 f0       	breq	.+62     	; 0x23fa <pin_make_input+0x48>
    23bc:	fc 01       	movw	r30, r24
    23be:	45 91       	lpm	r20, Z+
    23c0:	54 91       	lpm	r21, Z+
    23c2:	ca 01       	movw	r24, r20
    23c4:	02 96       	adiw	r24, 0x02	; 2
    23c6:	fc 01       	movw	r30, r24
    23c8:	a5 91       	lpm	r26, Z+
    23ca:	b4 91       	lpm	r27, Z+
    23cc:	fa 01       	movw	r30, r20
    23ce:	c5 91       	lpm	r28, Z+
    23d0:	d4 91       	lpm	r29, Z+
    23d2:	2e 5f       	subi	r18, 0xFE	; 254
    23d4:	3f 4f       	sbci	r19, 0xFF	; 255
    23d6:	f9 01       	movw	r30, r18
    23d8:	94 91       	lpm	r25, Z+
    23da:	3f b7       	in	r19, 0x3f	; 63
    23dc:	f8 94       	cli
    23de:	8c 91       	ld	r24, X
    23e0:	29 2f       	mov	r18, r25
    23e2:	20 95       	com	r18
    23e4:	82 23       	and	r24, r18
    23e6:	8c 93       	st	X, r24
    23e8:	66 23       	and	r22, r22
    23ea:	19 f0       	breq	.+6      	; 0x23f2 <pin_make_input+0x40>
    23ec:	88 81       	ld	r24, Y
    23ee:	89 2b       	or	r24, r25
    23f0:	02 c0       	rjmp	.+4      	; 0x23f6 <pin_make_input+0x44>
    23f2:	88 81       	ld	r24, Y
    23f4:	82 23       	and	r24, r18
    23f6:	88 83       	st	Y, r24
    23f8:	3f bf       	out	0x3f, r19	; 63
    23fa:	df 91       	pop	r29
    23fc:	cf 91       	pop	r28
    23fe:	08 95       	ret

00002400 <pin_make_output>:
    2400:	cf 93       	push	r28
    2402:	df 93       	push	r29
    2404:	9c 01       	movw	r18, r24
    2406:	00 97       	sbiw	r24, 0x00	; 0
    2408:	f9 f0       	breq	.+62     	; 0x2448 <pin_make_output+0x48>
    240a:	fc 01       	movw	r30, r24
    240c:	45 91       	lpm	r20, Z+
    240e:	54 91       	lpm	r21, Z+
    2410:	ca 01       	movw	r24, r20
    2412:	02 96       	adiw	r24, 0x02	; 2
    2414:	fc 01       	movw	r30, r24
    2416:	c5 91       	lpm	r28, Z+
    2418:	d4 91       	lpm	r29, Z+
    241a:	fa 01       	movw	r30, r20
    241c:	a5 91       	lpm	r26, Z+
    241e:	b4 91       	lpm	r27, Z+
    2420:	2e 5f       	subi	r18, 0xFE	; 254
    2422:	3f 4f       	sbci	r19, 0xFF	; 255
    2424:	f9 01       	movw	r30, r18
    2426:	24 91       	lpm	r18, Z+
    2428:	3f b7       	in	r19, 0x3f	; 63
    242a:	f8 94       	cli
    242c:	66 23       	and	r22, r22
    242e:	19 f0       	breq	.+6      	; 0x2436 <pin_make_output+0x36>
    2430:	8c 91       	ld	r24, X
    2432:	82 2b       	or	r24, r18
    2434:	04 c0       	rjmp	.+8      	; 0x243e <pin_make_output+0x3e>
    2436:	8c 91       	ld	r24, X
    2438:	92 2f       	mov	r25, r18
    243a:	90 95       	com	r25
    243c:	89 23       	and	r24, r25
    243e:	8c 93       	st	X, r24
    2440:	88 81       	ld	r24, Y
    2442:	82 2b       	or	r24, r18
    2444:	88 83       	st	Y, r24
    2446:	3f bf       	out	0x3f, r19	; 63
    2448:	df 91       	pop	r29
    244a:	cf 91       	pop	r28
    244c:	08 95       	ret

0000244e <LED_set>:
    244e:	1f 93       	push	r17
    2450:	cf 93       	push	r28
    2452:	df 93       	push	r29
    2454:	ec 01       	movw	r28, r24
    2456:	16 2f       	mov	r17, r22
    2458:	88 81       	ld	r24, Y
    245a:	99 81       	ldd	r25, Y+1	; 0x01
    245c:	00 97       	sbiw	r24, 0x00	; 0
    245e:	a9 f0       	breq	.+42     	; 0x248a <LED_set+0x3c>
    2460:	3a 81       	ldd	r19, Y+2	; 0x02
    2462:	30 fd       	sbrc	r19, 0
    2464:	05 c0       	rjmp	.+10     	; 0x2470 <LED_set+0x22>
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	66 23       	and	r22, r22
    246a:	09 f4       	brne	.+2      	; 0x246e <LED_set+0x20>
    246c:	21 e0       	ldi	r18, 0x01	; 1
    246e:	12 2f       	mov	r17, r18
    2470:	31 fd       	sbrc	r19, 1
    2472:	06 c0       	rjmp	.+12     	; 0x2480 <LED_set+0x32>
    2474:	61 2f       	mov	r22, r17
    2476:	0e 94 00 12 	call	0x2400	; 0x2400 <pin_make_output>
    247a:	8a 81       	ldd	r24, Y+2	; 0x02
    247c:	82 60       	ori	r24, 0x02	; 2
    247e:	8a 83       	std	Y+2, r24	; 0x02
    2480:	88 81       	ld	r24, Y
    2482:	99 81       	ldd	r25, Y+1	; 0x01
    2484:	61 2f       	mov	r22, r17
    2486:	0e 94 19 19 	call	0x3232	; 0x3232 <pin_set>
    248a:	df 91       	pop	r29
    248c:	cf 91       	pop	r28
    248e:	1f 91       	pop	r17
    2490:	08 95       	ret

00002492 <main>:
    2492:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <registerLED>
    2496:	f8 94       	cli
    2498:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__initTimers>
    249c:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <__clockInit>
    24a0:	78 94       	sei
    24a2:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <sysInitHardware>
    24a6:	0e 94 da 04 	call	0x9b4	; 0x9b4 <appInitHardware>
    24aa:	0e 94 57 0b 	call	0x16ae	; 0x16ae <clockGetus>
    24ae:	60 93 05 10 	sts	0x1005, r22
    24b2:	70 93 06 10 	sts	0x1006, r23
    24b6:	80 93 07 10 	sts	0x1007, r24
    24ba:	90 93 08 10 	sts	0x1008, r25
    24be:	0e 94 12 04 	call	0x824	; 0x824 <appInitSoftware>
    24c2:	60 93 09 10 	sts	0x1009, r22
    24c6:	70 93 0a 10 	sts	0x100A, r23
    24ca:	80 93 0b 10 	sts	0x100B, r24
    24ce:	90 93 0c 10 	sts	0x100C, r25
    24d2:	78 94       	sei
    24d4:	0e 94 c5 18 	call	0x318a	; 0x318a <breathe>
    24d8:	80 91 09 10 	lds	r24, 0x1009
    24dc:	90 91 0a 10 	lds	r25, 0x100A
    24e0:	a0 91 0b 10 	lds	r26, 0x100B
    24e4:	b0 91 0c 10 	lds	r27, 0x100C
    24e8:	00 97       	sbiw	r24, 0x00	; 0
    24ea:	a1 05       	cpc	r26, r1
    24ec:	b1 05       	cpc	r27, r1
    24ee:	19 f4       	brne	.+6      	; 0x24f6 <main+0x64>
    24f0:	16 c0       	rjmp	.+44     	; 0x251e <main+0x8c>
    24f2:	0e 94 c5 18 	call	0x318a	; 0x318a <breathe>
    24f6:	60 91 05 10 	lds	r22, 0x1005
    24fa:	70 91 06 10 	lds	r23, 0x1006
    24fe:	80 91 07 10 	lds	r24, 0x1007
    2502:	90 91 08 10 	lds	r25, 0x1008
    2506:	20 91 09 10 	lds	r18, 0x1009
    250a:	30 91 0a 10 	lds	r19, 0x100A
    250e:	40 91 0b 10 	lds	r20, 0x100B
    2512:	50 91 0c 10 	lds	r21, 0x100C
    2516:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <clockHasElapsed>
    251a:	88 23       	and	r24, r24
    251c:	51 f3       	breq	.-44     	; 0x24f2 <main+0x60>
    251e:	0e 94 57 0b 	call	0x16ae	; 0x16ae <clockGetus>
    2522:	9b 01       	movw	r18, r22
    2524:	ac 01       	movw	r20, r24
    2526:	60 93 05 10 	sts	0x1005, r22
    252a:	70 93 06 10 	sts	0x1006, r23
    252e:	80 93 07 10 	sts	0x1007, r24
    2532:	90 93 08 10 	sts	0x1008, r25
    2536:	60 91 01 10 	lds	r22, 0x1001
    253a:	70 91 02 10 	lds	r23, 0x1002
    253e:	80 91 03 10 	lds	r24, 0x1003
    2542:	90 91 04 10 	lds	r25, 0x1004
    2546:	6f 5f       	subi	r22, 0xFF	; 255
    2548:	7f 4f       	sbci	r23, 0xFF	; 255
    254a:	8f 4f       	sbci	r24, 0xFF	; 255
    254c:	9f 4f       	sbci	r25, 0xFF	; 255
    254e:	60 93 01 10 	sts	0x1001, r22
    2552:	70 93 02 10 	sts	0x1002, r23
    2556:	80 93 03 10 	sts	0x1003, r24
    255a:	90 93 04 10 	sts	0x1004, r25
    255e:	0e 94 48 04 	call	0x890	; 0x890 <appControl>
    2562:	af cf       	rjmp	.-162    	; 0x24c2 <main+0x30>

00002564 <rprintfIgnore>:
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	08 95       	ret

00002568 <rprintfInit>:
    2568:	4f b7       	in	r20, 0x3f	; 63
    256a:	f8 94       	cli
    256c:	20 91 95 05 	lds	r18, 0x0595
    2570:	30 91 96 05 	lds	r19, 0x0596
    2574:	90 93 96 05 	sts	0x0596, r25
    2578:	80 93 95 05 	sts	0x0595, r24
    257c:	4f bf       	out	0x3f, r20	; 63
    257e:	c9 01       	movw	r24, r18
    2580:	08 95       	ret

00002582 <rprintfChar>:
    2582:	1f 93       	push	r17
    2584:	18 2f       	mov	r17, r24
    2586:	8a 30       	cpi	r24, 0x0A	; 10
    2588:	31 f4       	brne	.+12     	; 0x2596 <rprintfChar+0x14>
    258a:	e0 91 95 05 	lds	r30, 0x0595
    258e:	f0 91 96 05 	lds	r31, 0x0596
    2592:	8d e0       	ldi	r24, 0x0D	; 13
    2594:	09 95       	icall
    2596:	e0 91 95 05 	lds	r30, 0x0595
    259a:	f0 91 96 05 	lds	r31, 0x0596
    259e:	81 2f       	mov	r24, r17
    25a0:	09 95       	icall
    25a2:	1f 91       	pop	r17
    25a4:	08 95       	ret

000025a6 <rprintfCRLF>:
    25a6:	8a e0       	ldi	r24, 0x0A	; 10
    25a8:	0e 94 c1 12 	call	0x2582	; 0x2582 <rprintfChar>
    25ac:	08 95       	ret

000025ae <marqueeSendByte>:
    25ae:	cf 92       	push	r12
    25b0:	df 92       	push	r13
    25b2:	ef 92       	push	r14
    25b4:	ff 92       	push	r15
    25b6:	0f 93       	push	r16
    25b8:	1f 93       	push	r17
    25ba:	cf 93       	push	r28
    25bc:	df 93       	push	r29
    25be:	ec 01       	movw	r28, r24
    25c0:	d6 2e       	mov	r13, r22
    25c2:	8c 81       	ldd	r24, Y+4	; 0x04
    25c4:	9d 81       	ldd	r25, Y+5	; 0x05
    25c6:	89 2b       	or	r24, r25
    25c8:	a9 f5       	brne	.+106    	; 0x2634 <marqueeSendByte+0x86>
    25ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    25cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    25ce:	01 96       	adiw	r24, 0x01	; 1
    25d0:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <malloc>
    25d4:	9d 83       	std	Y+5, r25	; 0x05
    25d6:	8c 83       	std	Y+4, r24	; 0x04
    25d8:	00 97       	sbiw	r24, 0x00	; 0
    25da:	61 f1       	breq	.+88     	; 0x2634 <marqueeSendByte+0x86>
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	07 c0       	rjmp	.+14     	; 0x25f0 <marqueeSendByte+0x42>
    25e2:	ec 81       	ldd	r30, Y+4	; 0x04
    25e4:	fd 81       	ldd	r31, Y+5	; 0x05
    25e6:	e2 0f       	add	r30, r18
    25e8:	f3 1f       	adc	r31, r19
    25ea:	10 82       	st	Z, r1
    25ec:	2f 5f       	subi	r18, 0xFF	; 255
    25ee:	3f 4f       	sbci	r19, 0xFF	; 255
    25f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    25f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    25f4:	82 17       	cp	r24, r18
    25f6:	93 07       	cpc	r25, r19
    25f8:	a0 f7       	brcc	.-24     	; 0x25e2 <marqueeSendByte+0x34>
    25fa:	19 86       	std	Y+9, r1	; 0x09
    25fc:	18 86       	std	Y+8, r1	; 0x08
    25fe:	1f 82       	std	Y+7, r1	; 0x07
    2600:	1e 82       	std	Y+6, r1	; 0x06
    2602:	8c 89       	ldd	r24, Y+20	; 0x14
    2604:	8e 7f       	andi	r24, 0xFE	; 254
    2606:	8c 8b       	std	Y+20, r24	; 0x14
    2608:	00 e0       	ldi	r16, 0x00	; 0
    260a:	10 e0       	ldi	r17, 0x00	; 0
    260c:	0e c0       	rjmp	.+28     	; 0x262a <marqueeSendByte+0x7c>
    260e:	c8 01       	movw	r24, r16
    2610:	88 0f       	add	r24, r24
    2612:	99 1f       	adc	r25, r25
    2614:	e8 81       	ld	r30, Y
    2616:	f9 81       	ldd	r31, Y+1	; 0x01
    2618:	e8 0f       	add	r30, r24
    261a:	f9 1f       	adc	r31, r25
    261c:	85 91       	lpm	r24, Z+
    261e:	94 91       	lpm	r25, Z+
    2620:	60 e2       	ldi	r22, 0x20	; 32
    2622:	0e 94 34 14 	call	0x2868	; 0x2868 <segled_put_char>
    2626:	0f 5f       	subi	r16, 0xFF	; 255
    2628:	1f 4f       	sbci	r17, 0xFF	; 255
    262a:	8a 81       	ldd	r24, Y+2	; 0x02
    262c:	9b 81       	ldd	r25, Y+3	; 0x03
    262e:	08 17       	cp	r16, r24
    2630:	19 07       	cpc	r17, r25
    2632:	68 f3       	brcs	.-38     	; 0x260e <marqueeSendByte+0x60>
    2634:	ec 81       	ldd	r30, Y+4	; 0x04
    2636:	fd 81       	ldd	r31, Y+5	; 0x05
    2638:	30 97       	sbiw	r30, 0x00	; 0
    263a:	09 f4       	brne	.+2      	; 0x263e <marqueeSendByte+0x90>
    263c:	3e c0       	rjmp	.+124    	; 0x26ba <marqueeSendByte+0x10c>
    263e:	8a e0       	ldi	r24, 0x0A	; 10
    2640:	d8 16       	cp	r13, r24
    2642:	19 f5       	brne	.+70     	; 0x268a <marqueeSendByte+0xdc>
    2644:	88 85       	ldd	r24, Y+8	; 0x08
    2646:	99 85       	ldd	r25, Y+9	; 0x09
    2648:	e8 0f       	add	r30, r24
    264a:	f9 1f       	adc	r31, r25
    264c:	10 82       	st	Z, r1
    264e:	19 86       	std	Y+9, r1	; 0x09
    2650:	18 86       	std	Y+8, r1	; 0x08
    2652:	cf b6       	in	r12, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	8c 89       	ldd	r24, Y+20	; 0x14
    2658:	80 fd       	sbrc	r24, 0
    265a:	15 c0       	rjmp	.+42     	; 0x2686 <marqueeSendByte+0xd8>
    265c:	8c 89       	ldd	r24, Y+20	; 0x14
    265e:	81 60       	ori	r24, 0x01	; 1
    2660:	8c 8b       	std	Y+20, r24	; 0x14
    2662:	8c 89       	ldd	r24, Y+20	; 0x14
    2664:	8d 7f       	andi	r24, 0xFD	; 253
    2666:	8c 8b       	std	Y+20, r24	; 0x14
    2668:	1f 82       	std	Y+7, r1	; 0x07
    266a:	1e 82       	std	Y+6, r1	; 0x06
    266c:	0e 94 57 0b 	call	0x16ae	; 0x16ae <clockGetus>
    2670:	9b 01       	movw	r18, r22
    2672:	ac 01       	movw	r20, r24
    2674:	ec 84       	ldd	r14, Y+12	; 0x0c
    2676:	fd 84       	ldd	r15, Y+13	; 0x0d
    2678:	0e 85       	ldd	r16, Y+14	; 0x0e
    267a:	1f 85       	ldd	r17, Y+15	; 0x0f
    267c:	87 e6       	ldi	r24, 0x67	; 103
    267e:	93 e1       	ldi	r25, 0x13	; 19
    2680:	be 01       	movw	r22, r28
    2682:	0e 94 35 1a 	call	0x346a	; 0x346a <scheduleJob>
    2686:	cf be       	out	0x3f, r12	; 63
    2688:	18 c0       	rjmp	.+48     	; 0x26ba <marqueeSendByte+0x10c>
    268a:	8d e0       	ldi	r24, 0x0D	; 13
    268c:	d8 16       	cp	r13, r24
    268e:	a9 f0       	breq	.+42     	; 0x26ba <marqueeSendByte+0x10c>
    2690:	28 85       	ldd	r18, Y+8	; 0x08
    2692:	39 85       	ldd	r19, Y+9	; 0x09
    2694:	8a 85       	ldd	r24, Y+10	; 0x0a
    2696:	9b 85       	ldd	r25, Y+11	; 0x0b
    2698:	28 17       	cp	r18, r24
    269a:	39 07       	cpc	r19, r25
    269c:	70 f4       	brcc	.+28     	; 0x26ba <marqueeSendByte+0x10c>
    269e:	e2 0f       	add	r30, r18
    26a0:	f3 1f       	adc	r31, r19
    26a2:	2f b7       	in	r18, 0x3f	; 63
    26a4:	f8 94       	cli
    26a6:	d0 82       	st	Z, r13
    26a8:	11 82       	std	Z+1, r1	; 0x01
    26aa:	88 85       	ldd	r24, Y+8	; 0x08
    26ac:	99 85       	ldd	r25, Y+9	; 0x09
    26ae:	01 96       	adiw	r24, 0x01	; 1
    26b0:	99 87       	std	Y+9, r25	; 0x09
    26b2:	88 87       	std	Y+8, r24	; 0x08
    26b4:	1f 82       	std	Y+7, r1	; 0x07
    26b6:	1e 82       	std	Y+6, r1	; 0x06
    26b8:	2f bf       	out	0x3f, r18	; 63
    26ba:	8d 2d       	mov	r24, r13
    26bc:	df 91       	pop	r29
    26be:	cf 91       	pop	r28
    26c0:	1f 91       	pop	r17
    26c2:	0f 91       	pop	r16
    26c4:	ff 90       	pop	r15
    26c6:	ef 90       	pop	r14
    26c8:	df 90       	pop	r13
    26ca:	cf 90       	pop	r12
    26cc:	08 95       	ret

000026ce <marqueeUpdate>:
    26ce:	2f 92       	push	r2
    26d0:	3f 92       	push	r3
    26d2:	4f 92       	push	r4
    26d4:	5f 92       	push	r5
    26d6:	6f 92       	push	r6
    26d8:	7f 92       	push	r7
    26da:	8f 92       	push	r8
    26dc:	9f 92       	push	r9
    26de:	af 92       	push	r10
    26e0:	bf 92       	push	r11
    26e2:	cf 92       	push	r12
    26e4:	df 92       	push	r13
    26e6:	ef 92       	push	r14
    26e8:	ff 92       	push	r15
    26ea:	0f 93       	push	r16
    26ec:	1f 93       	push	r17
    26ee:	cf 93       	push	r28
    26f0:	df 93       	push	r29
    26f2:	38 2e       	mov	r3, r24
    26f4:	29 2e       	mov	r2, r25
    26f6:	2a 01       	movw	r4, r20
    26f8:	3b 01       	movw	r6, r22
    26fa:	c8 2f       	mov	r28, r24
    26fc:	d9 2f       	mov	r29, r25
    26fe:	0c 81       	ldd	r16, Y+4	; 0x04
    2700:	1d 81       	ldd	r17, Y+5	; 0x05
    2702:	8e 81       	ldd	r24, Y+6	; 0x06
    2704:	9f 81       	ldd	r25, Y+7	; 0x07
    2706:	08 0f       	add	r16, r24
    2708:	19 1f       	adc	r17, r25
    270a:	f8 01       	movw	r30, r16
    270c:	80 80       	ld	r8, Z
    270e:	8c 89       	ldd	r24, Y+20	; 0x14
    2710:	86 95       	lsr	r24
    2712:	81 70       	andi	r24, 0x01	; 1
    2714:	88 20       	and	r8, r8
    2716:	29 f4       	brne	.+10     	; 0x2722 <marqueeUpdate+0x54>
    2718:	a8 88       	ldd	r10, Y+16	; 0x10
    271a:	b9 88       	ldd	r11, Y+17	; 0x11
    271c:	ca 88       	ldd	r12, Y+18	; 0x12
    271e:	db 88       	ldd	r13, Y+19	; 0x13
    2720:	04 c0       	rjmp	.+8      	; 0x272a <marqueeUpdate+0x5c>
    2722:	ac 84       	ldd	r10, Y+12	; 0x0c
    2724:	bd 84       	ldd	r11, Y+13	; 0x0d
    2726:	ce 84       	ldd	r12, Y+14	; 0x0e
    2728:	df 84       	ldd	r13, Y+15	; 0x0f
    272a:	88 23       	and	r24, r24
    272c:	d1 f4       	brne	.+52     	; 0x2762 <marqueeUpdate+0x94>
    272e:	88 20       	and	r8, r8
    2730:	c1 f0       	breq	.+48     	; 0x2762 <marqueeUpdate+0x94>
    2732:	f8 01       	movw	r30, r16
    2734:	32 91       	ld	r19, -Z
    2736:	8f 01       	movw	r16, r30
    2738:	0f 5f       	subi	r16, 0xFF	; 255
    273a:	1f 4f       	sbci	r17, 0xFF	; 255
    273c:	4a 81       	ldd	r20, Y+2	; 0x02
    273e:	5b 81       	ldd	r21, Y+3	; 0x03
    2740:	f8 01       	movw	r30, r16
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	07 c0       	rjmp	.+14     	; 0x2756 <marqueeUpdate+0x88>
    2748:	20 81       	ld	r18, Z
    274a:	22 23       	and	r18, r18
    274c:	51 f0       	breq	.+20     	; 0x2762 <marqueeUpdate+0x94>
    274e:	23 17       	cp	r18, r19
    2750:	41 f4       	brne	.+16     	; 0x2762 <marqueeUpdate+0x94>
    2752:	31 96       	adiw	r30, 0x01	; 1
    2754:	01 96       	adiw	r24, 0x01	; 1
    2756:	84 17       	cp	r24, r20
    2758:	95 07       	cpc	r25, r21
    275a:	b0 f3       	brcs	.-20     	; 0x2748 <marqueeUpdate+0x7a>
    275c:	99 24       	eor	r9, r9
    275e:	9a 94       	dec	r9
    2760:	01 c0       	rjmp	.+2      	; 0x2764 <marqueeUpdate+0x96>
    2762:	99 24       	eor	r9, r9
    2764:	8c 89       	ldd	r24, Y+20	; 0x14
    2766:	86 95       	lsr	r24
    2768:	81 70       	andi	r24, 0x01	; 1
    276a:	29 2d       	mov	r18, r9
    276c:	33 27       	eor	r19, r19
    276e:	27 fd       	sbrc	r18, 7
    2770:	30 95       	com	r19
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	28 17       	cp	r18, r24
    2776:	39 07       	cpc	r19, r25
    2778:	c1 f0       	breq	.+48     	; 0x27aa <marqueeUpdate+0xdc>
    277a:	a6 01       	movw	r20, r12
    277c:	95 01       	movw	r18, r10
    277e:	62 e0       	ldi	r22, 0x02	; 2
    2780:	56 95       	lsr	r21
    2782:	47 95       	ror	r20
    2784:	37 95       	ror	r19
    2786:	27 95       	ror	r18
    2788:	6a 95       	dec	r22
    278a:	d1 f7       	brne	.-12     	; 0x2780 <marqueeUpdate+0xb2>
    278c:	99 2d       	mov	r25, r9
    278e:	92 70       	andi	r25, 0x02	; 2
    2790:	8c 89       	ldd	r24, Y+20	; 0x14
    2792:	8d 7f       	andi	r24, 0xFD	; 253
    2794:	89 2b       	or	r24, r25
    2796:	8c 8b       	std	Y+20, r24	; 0x14
    2798:	99 20       	and	r9, r9
    279a:	19 f0       	breq	.+6      	; 0x27a2 <marqueeUpdate+0xd4>
    279c:	59 01       	movw	r10, r18
    279e:	6a 01       	movw	r12, r20
    27a0:	04 c0       	rjmp	.+8      	; 0x27aa <marqueeUpdate+0xdc>
    27a2:	a2 1a       	sub	r10, r18
    27a4:	b3 0a       	sbc	r11, r19
    27a6:	c4 0a       	sbc	r12, r20
    27a8:	d5 0a       	sbc	r13, r21
    27aa:	ee 24       	eor	r14, r14
    27ac:	ff 24       	eor	r15, r15
    27ae:	18 c0       	rjmp	.+48     	; 0x27e0 <marqueeUpdate+0x112>
    27b0:	c7 01       	movw	r24, r14
    27b2:	88 0f       	add	r24, r24
    27b4:	99 1f       	adc	r25, r25
    27b6:	e8 81       	ld	r30, Y
    27b8:	f9 81       	ldd	r31, Y+1	; 0x01
    27ba:	e8 0f       	add	r30, r24
    27bc:	f9 1f       	adc	r31, r25
    27be:	85 91       	lpm	r24, Z+
    27c0:	94 91       	lpm	r25, Z+
    27c2:	99 20       	and	r9, r9
    27c4:	39 f4       	brne	.+14     	; 0x27d4 <marqueeUpdate+0x106>
    27c6:	f8 01       	movw	r30, r16
    27c8:	60 81       	ld	r22, Z
    27ca:	66 23       	and	r22, r22
    27cc:	19 f0       	breq	.+6      	; 0x27d4 <marqueeUpdate+0x106>
    27ce:	0f 5f       	subi	r16, 0xFF	; 255
    27d0:	1f 4f       	sbci	r17, 0xFF	; 255
    27d2:	01 c0       	rjmp	.+2      	; 0x27d6 <marqueeUpdate+0x108>
    27d4:	60 e2       	ldi	r22, 0x20	; 32
    27d6:	0e 94 34 14 	call	0x2868	; 0x2868 <segled_put_char>
    27da:	08 94       	sec
    27dc:	e1 1c       	adc	r14, r1
    27de:	f1 1c       	adc	r15, r1
    27e0:	8a 81       	ldd	r24, Y+2	; 0x02
    27e2:	9b 81       	ldd	r25, Y+3	; 0x03
    27e4:	e8 16       	cp	r14, r24
    27e6:	f9 06       	cpc	r15, r25
    27e8:	18 f3       	brcs	.-58     	; 0x27b0 <marqueeUpdate+0xe2>
    27ea:	88 20       	and	r8, r8
    27ec:	b1 f4       	brne	.+44     	; 0x281a <marqueeUpdate+0x14c>
    27ee:	1f 82       	std	Y+7, r1	; 0x07
    27f0:	1e 82       	std	Y+6, r1	; 0x06
    27f2:	88 89       	ldd	r24, Y+16	; 0x10
    27f4:	99 89       	ldd	r25, Y+17	; 0x11
    27f6:	aa 89       	ldd	r26, Y+18	; 0x12
    27f8:	bb 89       	ldd	r27, Y+19	; 0x13
    27fa:	00 97       	sbiw	r24, 0x00	; 0
    27fc:	a1 05       	cpc	r26, r1
    27fe:	b1 05       	cpc	r27, r1
    2800:	29 f0       	breq	.+10     	; 0x280c <marqueeUpdate+0x13e>
    2802:	ec 81       	ldd	r30, Y+4	; 0x04
    2804:	fd 81       	ldd	r31, Y+5	; 0x05
    2806:	80 81       	ld	r24, Z
    2808:	88 23       	and	r24, r24
    280a:	19 f4       	brne	.+6      	; 0x2812 <marqueeUpdate+0x144>
    280c:	8c 89       	ldd	r24, Y+20	; 0x14
    280e:	8e 7f       	andi	r24, 0xFE	; 254
    2810:	02 c0       	rjmp	.+4      	; 0x2816 <marqueeUpdate+0x148>
    2812:	8c 89       	ldd	r24, Y+20	; 0x14
    2814:	8d 7f       	andi	r24, 0xFD	; 253
    2816:	8c 8b       	std	Y+20, r24	; 0x14
    2818:	07 c0       	rjmp	.+14     	; 0x2828 <marqueeUpdate+0x15a>
    281a:	99 20       	and	r9, r9
    281c:	29 f4       	brne	.+10     	; 0x2828 <marqueeUpdate+0x15a>
    281e:	8e 81       	ldd	r24, Y+6	; 0x06
    2820:	9f 81       	ldd	r25, Y+7	; 0x07
    2822:	01 96       	adiw	r24, 0x01	; 1
    2824:	9f 83       	std	Y+7, r25	; 0x07
    2826:	8e 83       	std	Y+6, r24	; 0x06
    2828:	8c 89       	ldd	r24, Y+20	; 0x14
    282a:	80 ff       	sbrs	r24, 0
    282c:	0a c0       	rjmp	.+20     	; 0x2842 <marqueeUpdate+0x174>
    282e:	87 e6       	ldi	r24, 0x67	; 103
    2830:	93 e1       	ldi	r25, 0x13	; 19
    2832:	63 2d       	mov	r22, r3
    2834:	72 2d       	mov	r23, r2
    2836:	a3 01       	movw	r20, r6
    2838:	92 01       	movw	r18, r4
    283a:	86 01       	movw	r16, r12
    283c:	75 01       	movw	r14, r10
    283e:	0e 94 35 1a 	call	0x346a	; 0x346a <scheduleJob>
    2842:	df 91       	pop	r29
    2844:	cf 91       	pop	r28
    2846:	1f 91       	pop	r17
    2848:	0f 91       	pop	r16
    284a:	ff 90       	pop	r15
    284c:	ef 90       	pop	r14
    284e:	df 90       	pop	r13
    2850:	cf 90       	pop	r12
    2852:	bf 90       	pop	r11
    2854:	af 90       	pop	r10
    2856:	9f 90       	pop	r9
    2858:	8f 90       	pop	r8
    285a:	7f 90       	pop	r7
    285c:	6f 90       	pop	r6
    285e:	5f 90       	pop	r5
    2860:	4f 90       	pop	r4
    2862:	3f 90       	pop	r3
    2864:	2f 90       	pop	r2
    2866:	08 95       	ret

00002868 <segled_put_char>:
    2868:	ef 92       	push	r14
    286a:	ff 92       	push	r15
    286c:	0f 93       	push	r16
    286e:	1f 93       	push	r17
    2870:	cf 93       	push	r28
    2872:	df 93       	push	r29
    2874:	8c 01       	movw	r16, r24
    2876:	e6 2e       	mov	r14, r22
    2878:	fc 01       	movw	r30, r24
    287a:	80 89       	ldd	r24, Z+16	; 0x10
    287c:	81 fd       	sbrc	r24, 1
    287e:	12 c0       	rjmp	.+36     	; 0x28a4 <segled_put_char+0x3c>
    2880:	c0 e0       	ldi	r28, 0x00	; 0
    2882:	d0 e0       	ldi	r29, 0x00	; 0
    2884:	f8 01       	movw	r30, r16
    2886:	ec 0f       	add	r30, r28
    2888:	fd 1f       	adc	r31, r29
    288a:	80 81       	ld	r24, Z
    288c:	91 81       	ldd	r25, Z+1	; 0x01
    288e:	60 e0       	ldi	r22, 0x00	; 0
    2890:	0e 94 00 12 	call	0x2400	; 0x2400 <pin_make_output>
    2894:	22 96       	adiw	r28, 0x02	; 2
    2896:	c0 31       	cpi	r28, 0x10	; 16
    2898:	d1 05       	cpc	r29, r1
    289a:	a1 f7       	brne	.-24     	; 0x2884 <segled_put_char+0x1c>
    289c:	f8 01       	movw	r30, r16
    289e:	80 89       	ldd	r24, Z+16	; 0x10
    28a0:	82 60       	ori	r24, 0x02	; 2
    28a2:	80 8b       	std	Z+16, r24	; 0x10
    28a4:	8e 2d       	mov	r24, r14
    28a6:	0e 94 ba 14 	call	0x2974	; 0x2974 <segled8_get_mask>
    28aa:	f8 2e       	mov	r15, r24
    28ac:	80 ff       	sbrs	r24, 0
    28ae:	07 c0       	rjmp	.+14     	; 0x28be <segled_put_char+0x56>
    28b0:	f8 01       	movw	r30, r16
    28b2:	86 85       	ldd	r24, Z+14	; 0x0e
    28b4:	97 85       	ldd	r25, Z+15	; 0x0f
    28b6:	89 2b       	or	r24, r25
    28b8:	11 f4       	brne	.+4      	; 0x28be <segled_put_char+0x56>
    28ba:	80 e1       	ldi	r24, 0x10	; 16
    28bc:	f8 2e       	mov	r15, r24
    28be:	f8 01       	movw	r30, r16
    28c0:	80 89       	ldd	r24, Z+16	; 0x10
    28c2:	80 ff       	sbrs	r24, 0
    28c4:	f0 94       	com	r15
    28c6:	c0 e0       	ldi	r28, 0x00	; 0
    28c8:	d0 e0       	ldi	r29, 0x00	; 0
    28ca:	f8 01       	movw	r30, r16
    28cc:	ec 0f       	add	r30, r28
    28ce:	fd 1f       	adc	r31, r29
    28d0:	80 81       	ld	r24, Z
    28d2:	91 81       	ldd	r25, Z+1	; 0x01
    28d4:	f7 fe       	sbrs	r15, 7
    28d6:	03 c0       	rjmp	.+6      	; 0x28de <segled_put_char+0x76>
    28d8:	0e 94 f5 18 	call	0x31ea	; 0x31ea <pin_high>
    28dc:	02 c0       	rjmp	.+4      	; 0x28e2 <segled_put_char+0x7a>
    28de:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <pin_low>
    28e2:	22 96       	adiw	r28, 0x02	; 2
    28e4:	c0 31       	cpi	r28, 0x10	; 16
    28e6:	d1 05       	cpc	r29, r1
    28e8:	11 f0       	breq	.+4      	; 0x28ee <segled_put_char+0x86>
    28ea:	ff 0c       	add	r15, r15
    28ec:	ee cf       	rjmp	.-36     	; 0x28ca <segled_put_char+0x62>
    28ee:	8e 2d       	mov	r24, r14
    28f0:	df 91       	pop	r29
    28f2:	cf 91       	pop	r28
    28f4:	1f 91       	pop	r17
    28f6:	0f 91       	pop	r16
    28f8:	ff 90       	pop	r15
    28fa:	ef 90       	pop	r14
    28fc:	08 95       	ret

000028fe <segled_set>:
    28fe:	ef 92       	push	r14
    2900:	ff 92       	push	r15
    2902:	0f 93       	push	r16
    2904:	1f 93       	push	r17
    2906:	cf 93       	push	r28
    2908:	df 93       	push	r29
    290a:	8c 01       	movw	r16, r24
    290c:	e6 2e       	mov	r14, r22
    290e:	f4 2e       	mov	r15, r20
    2910:	fc 01       	movw	r30, r24
    2912:	80 89       	ldd	r24, Z+16	; 0x10
    2914:	81 fd       	sbrc	r24, 1
    2916:	12 c0       	rjmp	.+36     	; 0x293c <segled_set+0x3e>
    2918:	c0 e0       	ldi	r28, 0x00	; 0
    291a:	d0 e0       	ldi	r29, 0x00	; 0
    291c:	f8 01       	movw	r30, r16
    291e:	ec 0f       	add	r30, r28
    2920:	fd 1f       	adc	r31, r29
    2922:	80 81       	ld	r24, Z
    2924:	91 81       	ldd	r25, Z+1	; 0x01
    2926:	60 e0       	ldi	r22, 0x00	; 0
    2928:	0e 94 00 12 	call	0x2400	; 0x2400 <pin_make_output>
    292c:	22 96       	adiw	r28, 0x02	; 2
    292e:	c0 31       	cpi	r28, 0x10	; 16
    2930:	d1 05       	cpc	r29, r1
    2932:	a1 f7       	brne	.-24     	; 0x291c <segled_set+0x1e>
    2934:	f8 01       	movw	r30, r16
    2936:	80 89       	ldd	r24, Z+16	; 0x10
    2938:	82 60       	ori	r24, 0x02	; 2
    293a:	80 8b       	std	Z+16, r24	; 0x10
    293c:	f8 01       	movw	r30, r16
    293e:	80 89       	ldd	r24, Z+16	; 0x10
    2940:	80 fd       	sbrc	r24, 0
    2942:	06 c0       	rjmp	.+12     	; 0x2950 <segled_set+0x52>
    2944:	ff 20       	and	r15, r15
    2946:	19 f4       	brne	.+6      	; 0x294e <segled_set+0x50>
    2948:	ff 24       	eor	r15, r15
    294a:	fa 94       	dec	r15
    294c:	01 c0       	rjmp	.+2      	; 0x2950 <segled_set+0x52>
    294e:	ff 24       	eor	r15, r15
    2950:	ee 2d       	mov	r30, r14
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	ee 0f       	add	r30, r30
    2956:	ff 1f       	adc	r31, r31
    2958:	e0 0f       	add	r30, r16
    295a:	f1 1f       	adc	r31, r17
    295c:	80 81       	ld	r24, Z
    295e:	91 81       	ldd	r25, Z+1	; 0x01
    2960:	6f 2d       	mov	r22, r15
    2962:	0e 94 19 19 	call	0x3232	; 0x3232 <pin_set>
    2966:	df 91       	pop	r29
    2968:	cf 91       	pop	r28
    296a:	1f 91       	pop	r17
    296c:	0f 91       	pop	r16
    296e:	ff 90       	pop	r15
    2970:	ef 90       	pop	r14
    2972:	08 95       	ret

00002974 <segled8_get_mask>:
    2974:	e8 2f       	mov	r30, r24
    2976:	81 54       	subi	r24, 0x41	; 65
    2978:	8a 31       	cpi	r24, 0x1A	; 26
    297a:	28 f4       	brcc	.+10     	; 0x2986 <segled8_get_mask+0x12>
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	e0 53       	subi	r30, 0x30	; 48
    2980:	fc 4f       	sbci	r31, 0xFC	; 252
    2982:	84 91       	lpm	r24, Z+
    2984:	08 95       	ret
    2986:	8e 2f       	mov	r24, r30
    2988:	81 56       	subi	r24, 0x61	; 97
    298a:	8a 31       	cpi	r24, 0x1A	; 26
    298c:	28 f4       	brcc	.+10     	; 0x2998 <segled8_get_mask+0x24>
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	e0 55       	subi	r30, 0x50	; 80
    2992:	fc 4f       	sbci	r31, 0xFC	; 252
    2994:	84 91       	lpm	r24, Z+
    2996:	08 95       	ret
    2998:	8e 2f       	mov	r24, r30
    299a:	80 53       	subi	r24, 0x30	; 48
    299c:	8a 30       	cpi	r24, 0x0A	; 10
    299e:	28 f4       	brcc	.+10     	; 0x29aa <segled8_get_mask+0x36>
    29a0:	f0 e0       	ldi	r31, 0x00	; 0
    29a2:	e5 50       	subi	r30, 0x05	; 5
    29a4:	fc 4f       	sbci	r31, 0xFC	; 252
    29a6:	84 91       	lpm	r24, Z+
    29a8:	08 95       	ret
    29aa:	ea 30       	cpi	r30, 0x0A	; 10
    29ac:	28 f4       	brcc	.+10     	; 0x29b8 <segled8_get_mask+0x44>
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	e5 5d       	subi	r30, 0xD5	; 213
    29b2:	fb 4f       	sbci	r31, 0xFB	; 251
    29b4:	84 91       	lpm	r24, Z+
    29b6:	08 95       	ret
    29b8:	ed 32       	cpi	r30, 0x2D	; 45
    29ba:	11 f4       	brne	.+4      	; 0x29c0 <segled8_get_mask+0x4c>
    29bc:	82 e0       	ldi	r24, 0x02	; 2
    29be:	08 95       	ret
    29c0:	eb 35       	cpi	r30, 0x5B	; 91
    29c2:	79 f0       	breq	.+30     	; 0x29e2 <segled8_get_mask+0x6e>
    29c4:	eb 37       	cpi	r30, 0x7B	; 123
    29c6:	69 f0       	breq	.+26     	; 0x29e2 <segled8_get_mask+0x6e>
    29c8:	e8 32       	cpi	r30, 0x28	; 40
    29ca:	59 f0       	breq	.+22     	; 0x29e2 <segled8_get_mask+0x6e>
    29cc:	ed 35       	cpi	r30, 0x5D	; 93
    29ce:	59 f0       	breq	.+22     	; 0x29e6 <segled8_get_mask+0x72>
    29d0:	ed 37       	cpi	r30, 0x7D	; 125
    29d2:	49 f0       	breq	.+18     	; 0x29e6 <segled8_get_mask+0x72>
    29d4:	e9 32       	cpi	r30, 0x29	; 41
    29d6:	39 f0       	breq	.+14     	; 0x29e6 <segled8_get_mask+0x72>
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	ee 32       	cpi	r30, 0x2E	; 46
    29dc:	29 f4       	brne	.+10     	; 0x29e8 <segled8_get_mask+0x74>
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	08 95       	ret
    29e2:	8c e9       	ldi	r24, 0x9C	; 156
    29e4:	08 95       	ret
    29e6:	80 ef       	ldi	r24, 0xF0	; 240
    29e8:	08 95       	ret

000029ea <compareFromIOPin>:
    29ea:	bf 92       	push	r11
    29ec:	cf 92       	push	r12
    29ee:	df 92       	push	r13
    29f0:	ef 92       	push	r14
    29f2:	ff 92       	push	r15
    29f4:	0f 93       	push	r16
    29f6:	1f 93       	push	r17
    29f8:	cf 93       	push	r28
    29fa:	df 93       	push	r29
    29fc:	6c 01       	movw	r12, r24
    29fe:	b0 90 c4 03 	lds	r11, 0x03C4
    2a02:	2b ef       	ldi	r18, 0xFB	; 251
    2a04:	31 e0       	ldi	r19, 0x01	; 1
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	c0 e0       	ldi	r28, 0x00	; 0
    2a0a:	d0 e0       	ldi	r29, 0x00	; 0
    2a0c:	2d c0       	rjmp	.+90     	; 0x2a68 <compareFromIOPin+0x7e>
    2a0e:	28 5f       	subi	r18, 0xF8	; 248
    2a10:	3f 4f       	sbci	r19, 0xFF	; 255
    2a12:	f9 01       	movw	r30, r18
    2a14:	e4 90       	lpm	r14, Z+
    2a16:	28 50       	subi	r18, 0x08	; 8
    2a18:	30 40       	sbci	r19, 0x00	; 0
    2a1a:	f9 01       	movw	r30, r18
    2a1c:	78 96       	adiw	r30, 0x18	; 24
    2a1e:	29 5f       	subi	r18, 0xF9	; 249
    2a20:	3f 4f       	sbci	r19, 0xFF	; 255
    2a22:	80 e0       	ldi	r24, 0x00	; 0
    2a24:	a0 e0       	ldi	r26, 0x00	; 0
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	05 91       	lpm	r16, Z+
    2a2a:	14 91       	lpm	r17, Z+
    2a2c:	f9 01       	movw	r30, r18
    2a2e:	f4 90       	lpm	r15, Z+
    2a30:	27 50       	subi	r18, 0x07	; 7
    2a32:	30 40       	sbci	r19, 0x00	; 0
    2a34:	14 c0       	rjmp	.+40     	; 0x2a5e <compareFromIOPin+0x74>
    2a36:	b8 01       	movw	r22, r16
    2a38:	6a 0f       	add	r22, r26
    2a3a:	7b 1f       	adc	r23, r27
    2a3c:	fb 01       	movw	r30, r22
    2a3e:	3e 96       	adiw	r30, 0x0e	; 14
    2a40:	45 91       	lpm	r20, Z+
    2a42:	54 91       	lpm	r21, Z+
    2a44:	41 15       	cp	r20, r1
    2a46:	51 05       	cpc	r21, r1
    2a48:	41 f0       	breq	.+16     	; 0x2a5a <compareFromIOPin+0x70>
    2a4a:	4c 15       	cp	r20, r12
    2a4c:	5d 05       	cpc	r21, r13
    2a4e:	29 f4       	brne	.+10     	; 0x2a5a <compareFromIOPin+0x70>
    2a50:	ff 20       	and	r15, r15
    2a52:	11 f0       	breq	.+4      	; 0x2a58 <compareFromIOPin+0x6e>
    2a54:	eb 01       	movw	r28, r22
    2a56:	0a c0       	rjmp	.+20     	; 0x2a6c <compareFromIOPin+0x82>
    2a58:	eb 01       	movw	r28, r22
    2a5a:	8f 5f       	subi	r24, 0xFF	; 255
    2a5c:	50 96       	adiw	r26, 0x10	; 16
    2a5e:	8e 15       	cp	r24, r14
    2a60:	50 f3       	brcs	.-44     	; 0x2a36 <compareFromIOPin+0x4c>
    2a62:	9f 5f       	subi	r25, 0xFF	; 255
    2a64:	21 5d       	subi	r18, 0xD1	; 209
    2a66:	3f 4f       	sbci	r19, 0xFF	; 255
    2a68:	9b 15       	cp	r25, r11
    2a6a:	88 f2       	brcs	.-94     	; 0x2a0e <compareFromIOPin+0x24>
    2a6c:	ce 01       	movw	r24, r28
    2a6e:	df 91       	pop	r29
    2a70:	cf 91       	pop	r28
    2a72:	1f 91       	pop	r17
    2a74:	0f 91       	pop	r16
    2a76:	ff 90       	pop	r15
    2a78:	ef 90       	pop	r14
    2a7a:	df 90       	pop	r13
    2a7c:	cf 90       	pop	r12
    2a7e:	bf 90       	pop	r11
    2a80:	08 95       	ret

00002a82 <compareSetOutputMode>:
    2a82:	9c 01       	movw	r18, r24
    2a84:	0b 96       	adiw	r24, 0x0b	; 11
    2a86:	fc 01       	movw	r30, r24
    2a88:	a5 91       	lpm	r26, Z+
    2a8a:	b4 91       	lpm	r27, Z+
    2a8c:	23 5f       	subi	r18, 0xF3	; 243
    2a8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a90:	f9 01       	movw	r30, r18
    2a92:	24 91       	lpm	r18, Z+
    2a94:	70 e0       	ldi	r23, 0x00	; 0
    2a96:	02 2e       	mov	r0, r18
    2a98:	02 c0       	rjmp	.+4      	; 0x2a9e <compareSetOutputMode+0x1c>
    2a9a:	66 0f       	add	r22, r22
    2a9c:	77 1f       	adc	r23, r23
    2a9e:	0a 94       	dec	r0
    2aa0:	e2 f7       	brpl	.-8      	; 0x2a9a <compareSetOutputMode+0x18>
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	02 c0       	rjmp	.+4      	; 0x2aac <compareSetOutputMode+0x2a>
    2aa8:	88 0f       	add	r24, r24
    2aaa:	99 1f       	adc	r25, r25
    2aac:	2a 95       	dec	r18
    2aae:	e2 f7       	brpl	.-8      	; 0x2aa8 <compareSetOutputMode+0x26>
    2ab0:	28 2f       	mov	r18, r24
    2ab2:	22 0f       	add	r18, r18
    2ab4:	28 2b       	or	r18, r24
    2ab6:	9c 91       	ld	r25, X
    2ab8:	82 2f       	mov	r24, r18
    2aba:	86 23       	and	r24, r22
    2abc:	20 95       	com	r18
    2abe:	29 23       	and	r18, r25
    2ac0:	82 2b       	or	r24, r18
    2ac2:	8c 93       	st	X, r24
    2ac4:	08 95       	ret

00002ac6 <compareSetThreshold>:
    2ac6:	cf 93       	push	r28
    2ac8:	df 93       	push	r29
    2aca:	9c 01       	movw	r18, r24
    2acc:	2e 5f       	subi	r18, 0xFE	; 254
    2ace:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad0:	f9 01       	movw	r30, r18
    2ad2:	84 91       	lpm	r24, Z+
    2ad4:	22 50       	subi	r18, 0x02	; 2
    2ad6:	30 40       	sbci	r19, 0x00	; 0
    2ad8:	9f e2       	ldi	r25, 0x2F	; 47
    2ada:	89 9f       	mul	r24, r25
    2adc:	a0 01       	movw	r20, r0
    2ade:	11 24       	eor	r1, r1
    2ae0:	45 50       	subi	r20, 0x05	; 5
    2ae2:	5e 4f       	sbci	r21, 0xFE	; 254
    2ae4:	48 5f       	subi	r20, 0xF8	; 248
    2ae6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ae8:	fa 01       	movw	r30, r20
    2aea:	84 91       	lpm	r24, Z+
    2aec:	48 50       	subi	r20, 0x08	; 8
    2aee:	50 40       	sbci	r21, 0x00	; 0
    2af0:	88 23       	and	r24, r24
    2af2:	c1 f0       	breq	.+48     	; 0x2b24 <compareSetThreshold+0x5e>
    2af4:	c9 01       	movw	r24, r18
    2af6:	06 96       	adiw	r24, 0x06	; 6
    2af8:	fc 01       	movw	r30, r24
    2afa:	c5 91       	lpm	r28, Z+
    2afc:	d4 91       	lpm	r29, Z+
    2afe:	fa 01       	movw	r30, r20
    2b00:	37 96       	adiw	r30, 0x07	; 7
    2b02:	e4 91       	lpm	r30, Z+
    2b04:	ee 23       	and	r30, r30
    2b06:	19 f0       	breq	.+6      	; 0x2b0e <compareSetThreshold+0x48>
    2b08:	79 83       	std	Y+1, r23	; 0x01
    2b0a:	68 83       	st	Y, r22
    2b0c:	0e c0       	rjmp	.+28     	; 0x2b2a <compareSetThreshold+0x64>
    2b0e:	6f 3f       	cpi	r22, 0xFF	; 255
    2b10:	71 05       	cpc	r23, r1
    2b12:	31 f0       	breq	.+12     	; 0x2b20 <compareSetThreshold+0x5a>
    2b14:	28 f0       	brcs	.+10     	; 0x2b20 <compareSetThreshold+0x5a>
    2b16:	8e ef       	ldi	r24, 0xFE	; 254
    2b18:	0e 94 61 11 	call	0x22c2	; 0x22c2 <setError>
    2b1c:	6f ef       	ldi	r22, 0xFF	; 255
    2b1e:	70 e0       	ldi	r23, 0x00	; 0
    2b20:	68 83       	st	Y, r22
    2b22:	03 c0       	rjmp	.+6      	; 0x2b2a <compareSetThreshold+0x64>
    2b24:	8d ef       	ldi	r24, 0xFD	; 253
    2b26:	0e 94 61 11 	call	0x22c2	; 0x22c2 <setError>
    2b2a:	df 91       	pop	r29
    2b2c:	cf 91       	pop	r28
    2b2e:	08 95       	ret

00002b30 <_uartSetBaudRate>:
    2b30:	dc 01       	movw	r26, r24
    2b32:	19 96       	adiw	r26, 0x09	; 9
    2b34:	8d 91       	ld	r24, X+
    2b36:	9c 91       	ld	r25, X
    2b38:	1a 97       	sbiw	r26, 0x0a	; 10
    2b3a:	fc 01       	movw	r30, r24
    2b3c:	25 91       	lpm	r18, Z+
    2b3e:	34 91       	lpm	r19, Z+
    2b40:	cd 01       	movw	r24, r26
    2b42:	f9 01       	movw	r30, r18
    2b44:	09 95       	icall
    2b46:	08 95       	ret

00002b48 <_uartInit>:
    2b48:	df 92       	push	r13
    2b4a:	ef 92       	push	r14
    2b4c:	ff 92       	push	r15
    2b4e:	0f 93       	push	r16
    2b50:	1f 93       	push	r17
    2b52:	cf 93       	push	r28
    2b54:	df 93       	push	r29
    2b56:	ec 01       	movw	r28, r24
    2b58:	7a 01       	movw	r14, r20
    2b5a:	8b 01       	movw	r16, r22
    2b5c:	df b6       	in	r13, 0x3f	; 63
    2b5e:	f8 94       	cli
    2b60:	2d 85       	ldd	r18, Y+13	; 0x0d
    2b62:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b64:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b66:	98 89       	ldd	r25, Y+16	; 0x10
    2b68:	28 17       	cp	r18, r24
    2b6a:	39 07       	cpc	r19, r25
    2b6c:	11 f0       	breq	.+4      	; 0x2b72 <_uartInit+0x2a>
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	01 c0       	rjmp	.+2      	; 0x2b74 <_uartInit+0x2c>
    2b72:	8f ef       	ldi	r24, 0xFF	; 255
    2b74:	8f 8b       	std	Y+23, r24	; 0x17
    2b76:	88 23       	and	r24, r24
    2b78:	81 f0       	breq	.+32     	; 0x2b9a <_uartInit+0x52>
    2b7a:	2d 85       	ldd	r18, Y+13	; 0x0d
    2b7c:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b80:	98 89       	ldd	r25, Y+16	; 0x10
    2b82:	28 17       	cp	r18, r24
    2b84:	39 07       	cpc	r19, r25
    2b86:	21 f0       	breq	.+8      	; 0x2b90 <_uartInit+0x48>
    2b88:	c9 01       	movw	r24, r18
    2b8a:	60 e0       	ldi	r22, 0x00	; 0
    2b8c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <pin_make_input>
    2b90:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b92:	98 89       	ldd	r25, Y+16	; 0x10
    2b94:	6f ef       	ldi	r22, 0xFF	; 255
    2b96:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <pin_make_input>
    2b9a:	88 85       	ldd	r24, Y+8	; 0x08
    2b9c:	81 60       	ori	r24, 0x01	; 1
    2b9e:	88 87       	std	Y+8, r24	; 0x08
    2ba0:	88 85       	ldd	r24, Y+8	; 0x08
    2ba2:	8b 7f       	andi	r24, 0xFB	; 251
    2ba4:	88 87       	std	Y+8, r24	; 0x08
    2ba6:	88 85       	ldd	r24, Y+8	; 0x08
    2ba8:	8d 7f       	andi	r24, 0xFD	; 253
    2baa:	88 87       	std	Y+8, r24	; 0x08
    2bac:	89 85       	ldd	r24, Y+9	; 0x09
    2bae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb0:	04 96       	adiw	r24, 0x04	; 4
    2bb2:	fc 01       	movw	r30, r24
    2bb4:	25 91       	lpm	r18, Z+
    2bb6:	34 91       	lpm	r19, Z+
    2bb8:	ce 01       	movw	r24, r28
    2bba:	b8 01       	movw	r22, r16
    2bbc:	a7 01       	movw	r20, r14
    2bbe:	f9 01       	movw	r30, r18
    2bc0:	09 95       	icall
    2bc2:	df be       	out	0x3f, r13	; 63
    2bc4:	df 91       	pop	r29
    2bc6:	cf 91       	pop	r28
    2bc8:	1f 91       	pop	r17
    2bca:	0f 91       	pop	r16
    2bcc:	ff 90       	pop	r15
    2bce:	ef 90       	pop	r14
    2bd0:	df 90       	pop	r13
    2bd2:	08 95       	ret

00002bd4 <__uartHWSetBaudRate>:
    2bd4:	bf 92       	push	r11
    2bd6:	cf 92       	push	r12
    2bd8:	df 92       	push	r13
    2bda:	ef 92       	push	r14
    2bdc:	ff 92       	push	r15
    2bde:	0f 93       	push	r16
    2be0:	1f 93       	push	r17
    2be2:	cf 93       	push	r28
    2be4:	df 93       	push	r29
    2be6:	7a 01       	movw	r14, r20
    2be8:	8b 01       	movw	r16, r22
    2bea:	ec 01       	movw	r28, r24
    2bec:	bf b6       	in	r11, 0x3f	; 63
    2bee:	f8 94       	cli
    2bf0:	4f 3f       	cpi	r20, 0xFF	; 255
    2bf2:	8f ef       	ldi	r24, 0xFF	; 255
    2bf4:	58 07       	cpc	r21, r24
    2bf6:	8f ef       	ldi	r24, 0xFF	; 255
    2bf8:	68 07       	cpc	r22, r24
    2bfa:	8f ef       	ldi	r24, 0xFF	; 255
    2bfc:	78 07       	cpc	r23, r24
    2bfe:	21 f4       	brne	.+8      	; 0x2c08 <__uartHWSetBaudRate+0x34>
    2c00:	a1 e0       	ldi	r26, 0x01	; 1
    2c02:	ca 2e       	mov	r12, r26
    2c04:	d1 2c       	mov	r13, r1
    2c06:	24 c0       	rjmp	.+72     	; 0x2c50 <__uartHWSetBaudRate+0x7c>
    2c08:	cb 01       	movw	r24, r22
    2c0a:	ba 01       	movw	r22, r20
    2c0c:	f3 e0       	ldi	r31, 0x03	; 3
    2c0e:	66 0f       	add	r22, r22
    2c10:	77 1f       	adc	r23, r23
    2c12:	88 1f       	adc	r24, r24
    2c14:	99 1f       	adc	r25, r25
    2c16:	fa 95       	dec	r31
    2c18:	d1 f7       	brne	.-12     	; 0x2c0e <__uartHWSetBaudRate+0x3a>
    2c1a:	20 91 c5 03 	lds	r18, 0x03C5
    2c1e:	30 91 c6 03 	lds	r19, 0x03C6
    2c22:	40 91 c7 03 	lds	r20, 0x03C7
    2c26:	50 91 c8 03 	lds	r21, 0x03C8
    2c2a:	62 0f       	add	r22, r18
    2c2c:	73 1f       	adc	r23, r19
    2c2e:	84 1f       	adc	r24, r20
    2c30:	95 1f       	adc	r25, r21
    2c32:	a8 01       	movw	r20, r16
    2c34:	97 01       	movw	r18, r14
    2c36:	e4 e0       	ldi	r30, 0x04	; 4
    2c38:	22 0f       	add	r18, r18
    2c3a:	33 1f       	adc	r19, r19
    2c3c:	44 1f       	adc	r20, r20
    2c3e:	55 1f       	adc	r21, r21
    2c40:	ea 95       	dec	r30
    2c42:	d1 f7       	brne	.-12     	; 0x2c38 <__uartHWSetBaudRate+0x64>
    2c44:	0e 94 2e 22 	call	0x445c	; 0x445c <__udivmodsi4>
    2c48:	69 01       	movw	r12, r18
    2c4a:	08 94       	sec
    2c4c:	c1 08       	sbc	r12, r1
    2c4e:	d1 08       	sbc	r13, r1
    2c50:	98 a9       	ldd	r25, Y+48	; 0x30
    2c52:	99 23       	and	r25, r25
    2c54:	c9 f1       	breq	.+114    	; 0x2cc8 <__uartHWSetBaudRate+0xf4>
    2c56:	ec a1       	ldd	r30, Y+36	; 0x24
    2c58:	fd a1       	ldd	r31, Y+37	; 0x25
    2c5a:	80 81       	ld	r24, Z
    2c5c:	90 95       	com	r25
    2c5e:	89 23       	and	r24, r25
    2c60:	80 83       	st	Z, r24
    2c62:	8f ef       	ldi	r24, 0xFF	; 255
    2c64:	e8 16       	cp	r14, r24
    2c66:	8f ef       	ldi	r24, 0xFF	; 255
    2c68:	f8 06       	cpc	r15, r24
    2c6a:	8f ef       	ldi	r24, 0xFF	; 255
    2c6c:	08 07       	cpc	r16, r24
    2c6e:	8f ef       	ldi	r24, 0xFF	; 255
    2c70:	18 07       	cpc	r17, r24
    2c72:	19 f4       	brne	.+6      	; 0x2c7a <__uartHWSetBaudRate+0xa6>
    2c74:	21 e0       	ldi	r18, 0x01	; 1
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	1d c0       	rjmp	.+58     	; 0x2cb4 <__uartHWSetBaudRate+0xe0>
    2c7a:	32 e0       	ldi	r19, 0x02	; 2
    2c7c:	ee 0c       	add	r14, r14
    2c7e:	ff 1c       	adc	r15, r15
    2c80:	00 1f       	adc	r16, r16
    2c82:	11 1f       	adc	r17, r17
    2c84:	3a 95       	dec	r19
    2c86:	d1 f7       	brne	.-12     	; 0x2c7c <__uartHWSetBaudRate+0xa8>
    2c88:	60 91 c5 03 	lds	r22, 0x03C5
    2c8c:	70 91 c6 03 	lds	r23, 0x03C6
    2c90:	80 91 c7 03 	lds	r24, 0x03C7
    2c94:	90 91 c8 03 	lds	r25, 0x03C8
    2c98:	6e 0d       	add	r22, r14
    2c9a:	7f 1d       	adc	r23, r15
    2c9c:	80 1f       	adc	r24, r16
    2c9e:	91 1f       	adc	r25, r17
    2ca0:	ee 0c       	add	r14, r14
    2ca2:	ff 1c       	adc	r15, r15
    2ca4:	00 1f       	adc	r16, r16
    2ca6:	11 1f       	adc	r17, r17
    2ca8:	a8 01       	movw	r20, r16
    2caa:	97 01       	movw	r18, r14
    2cac:	0e 94 2e 22 	call	0x445c	; 0x445c <__udivmodsi4>
    2cb0:	21 50       	subi	r18, 0x01	; 1
    2cb2:	30 40       	sbci	r19, 0x00	; 0
    2cb4:	2c 15       	cp	r18, r12
    2cb6:	3d 05       	cpc	r19, r13
    2cb8:	38 f0       	brcs	.+14     	; 0x2cc8 <__uartHWSetBaudRate+0xf4>
    2cba:	ec a1       	ldd	r30, Y+36	; 0x24
    2cbc:	fd a1       	ldd	r31, Y+37	; 0x25
    2cbe:	80 81       	ld	r24, Z
    2cc0:	98 a9       	ldd	r25, Y+48	; 0x30
    2cc2:	89 2b       	or	r24, r25
    2cc4:	80 83       	st	Z, r24
    2cc6:	69 01       	movw	r12, r18
    2cc8:	e8 a5       	ldd	r30, Y+40	; 0x28
    2cca:	f9 a5       	ldd	r31, Y+41	; 0x29
    2ccc:	c0 82       	st	Z, r12
    2cce:	ea a5       	ldd	r30, Y+42	; 0x2a
    2cd0:	fb a5       	ldd	r31, Y+43	; 0x2b
    2cd2:	d0 82       	st	Z, r13
    2cd4:	bf be       	out	0x3f, r11	; 63
    2cd6:	df 91       	pop	r29
    2cd8:	cf 91       	pop	r28
    2cda:	1f 91       	pop	r17
    2cdc:	0f 91       	pop	r16
    2cde:	ff 90       	pop	r15
    2ce0:	ef 90       	pop	r14
    2ce2:	df 90       	pop	r13
    2ce4:	cf 90       	pop	r12
    2ce6:	bf 90       	pop	r11
    2ce8:	08 95       	ret

00002cea <__uartHWOff>:
    2cea:	dc 01       	movw	r26, r24
    2cec:	96 96       	adiw	r26, 0x26	; 38
    2cee:	ed 91       	ld	r30, X+
    2cf0:	fc 91       	ld	r31, X
    2cf2:	97 97       	sbiw	r26, 0x27	; 39
    2cf4:	80 81       	ld	r24, Z
    2cf6:	87 72       	andi	r24, 0x27	; 39
    2cf8:	80 83       	st	Z, r24
    2cfa:	d0 96       	adiw	r26, 0x30	; 48
    2cfc:	9c 91       	ld	r25, X
    2cfe:	d0 97       	sbiw	r26, 0x30	; 48
    2d00:	99 23       	and	r25, r25
    2d02:	41 f0       	breq	.+16     	; 0x2d14 <__uartHWOff+0x2a>
    2d04:	94 96       	adiw	r26, 0x24	; 36
    2d06:	ed 91       	ld	r30, X+
    2d08:	fc 91       	ld	r31, X
    2d0a:	95 97       	sbiw	r26, 0x25	; 37
    2d0c:	80 81       	ld	r24, Z
    2d0e:	90 95       	com	r25
    2d10:	89 23       	and	r24, r25
    2d12:	80 83       	st	Z, r24
    2d14:	08 95       	ret

00002d16 <oneWireReceiveMode>:
    2d16:	dc 01       	movw	r26, r24
    2d18:	57 96       	adiw	r26, 0x17	; 23
    2d1a:	8c 91       	ld	r24, X
    2d1c:	57 97       	sbiw	r26, 0x17	; 23
    2d1e:	88 23       	and	r24, r24
    2d20:	71 f0       	breq	.+28     	; 0x2d3e <oneWireReceiveMode+0x28>
    2d22:	96 96       	adiw	r26, 0x26	; 38
    2d24:	ed 91       	ld	r30, X+
    2d26:	fc 91       	ld	r31, X
    2d28:	97 97       	sbiw	r26, 0x27	; 39
    2d2a:	80 81       	ld	r24, Z
    2d2c:	87 7b       	andi	r24, 0xB7	; 183
    2d2e:	80 83       	st	Z, r24
    2d30:	96 96       	adiw	r26, 0x26	; 38
    2d32:	ed 91       	ld	r30, X+
    2d34:	fc 91       	ld	r31, X
    2d36:	97 97       	sbiw	r26, 0x27	; 39
    2d38:	80 81       	ld	r24, Z
    2d3a:	80 69       	ori	r24, 0x90	; 144
    2d3c:	80 83       	st	Z, r24
    2d3e:	08 95       	ret

00002d40 <__uartHWStartXmit>:
    2d40:	dc 01       	movw	r26, r24
    2d42:	9c 96       	adiw	r26, 0x2c	; 44
    2d44:	ed 91       	ld	r30, X+
    2d46:	fc 91       	ld	r31, X
    2d48:	9d 97       	sbiw	r26, 0x2d	; 45
    2d4a:	60 83       	st	Z, r22
    2d4c:	08 95       	ret

00002d4e <startXmitMode>:
    2d4e:	dc 01       	movw	r26, r24
    2d50:	57 96       	adiw	r26, 0x17	; 23
    2d52:	8c 91       	ld	r24, X
    2d54:	57 97       	sbiw	r26, 0x17	; 23
    2d56:	88 23       	and	r24, r24
    2d58:	71 f0       	breq	.+28     	; 0x2d76 <startXmitMode+0x28>
    2d5a:	96 96       	adiw	r26, 0x26	; 38
    2d5c:	ed 91       	ld	r30, X+
    2d5e:	fc 91       	ld	r31, X
    2d60:	97 97       	sbiw	r26, 0x27	; 39
    2d62:	80 81       	ld	r24, Z
    2d64:	8f 76       	andi	r24, 0x6F	; 111
    2d66:	80 83       	st	Z, r24
    2d68:	96 96       	adiw	r26, 0x26	; 38
    2d6a:	ed 91       	ld	r30, X+
    2d6c:	fc 91       	ld	r31, X
    2d6e:	97 97       	sbiw	r26, 0x27	; 39
    2d70:	80 81       	ld	r24, Z
    2d72:	88 64       	ori	r24, 0x48	; 72
    2d74:	80 83       	st	Z, r24
    2d76:	08 95       	ret

00002d78 <__uartHWInit>:
    2d78:	cf 93       	push	r28
    2d7a:	df 93       	push	r29
    2d7c:	ec 01       	movw	r28, r24
    2d7e:	0e 94 98 15 	call	0x2b30	; 0x2b30 <_uartSetBaudRate>
    2d82:	8f 89       	ldd	r24, Y+23	; 0x17
    2d84:	88 23       	and	r24, r24
    2d86:	11 f0       	breq	.+4      	; 0x2d8c <__uartHWInit+0x14>
    2d88:	20 e9       	ldi	r18, 0x90	; 144
    2d8a:	0c c0       	rjmp	.+24     	; 0x2da4 <__uartHWInit+0x2c>
    2d8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d90:	89 2b       	or	r24, r25
    2d92:	11 f0       	breq	.+4      	; 0x2d98 <__uartHWInit+0x20>
    2d94:	20 e9       	ldi	r18, 0x90	; 144
    2d96:	01 c0       	rjmp	.+2      	; 0x2d9a <__uartHWInit+0x22>
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d9c:	98 89       	ldd	r25, Y+16	; 0x10
    2d9e:	89 2b       	or	r24, r25
    2da0:	09 f0       	breq	.+2      	; 0x2da4 <__uartHWInit+0x2c>
    2da2:	28 64       	ori	r18, 0x48	; 72
    2da4:	ee a1       	ldd	r30, Y+38	; 0x26
    2da6:	ff a1       	ldd	r31, Y+39	; 0x27
    2da8:	20 83       	st	Z, r18
    2daa:	df 91       	pop	r29
    2dac:	cf 91       	pop	r28
    2dae:	08 95       	ret

00002db0 <__uartReceiveService>:
    2db0:	dc 01       	movw	r26, r24
    2db2:	26 2f       	mov	r18, r22
    2db4:	14 96       	adiw	r26, 0x04	; 4
    2db6:	8d 91       	ld	r24, X+
    2db8:	9c 91       	ld	r25, X
    2dba:	15 97       	sbiw	r26, 0x05	; 5
    2dbc:	89 2b       	or	r24, r25
    2dbe:	59 f0       	breq	.+22     	; 0x2dd6 <__uartReceiveService+0x26>
    2dc0:	14 96       	adiw	r26, 0x04	; 4
    2dc2:	ed 91       	ld	r30, X+
    2dc4:	fc 91       	ld	r31, X
    2dc6:	15 97       	sbiw	r26, 0x05	; 5
    2dc8:	16 96       	adiw	r26, 0x06	; 6
    2dca:	6d 91       	ld	r22, X+
    2dcc:	7c 91       	ld	r23, X
    2dce:	17 97       	sbiw	r26, 0x07	; 7
    2dd0:	82 2f       	mov	r24, r18
    2dd2:	09 95       	icall
    2dd4:	08 95       	ret
    2dd6:	90 96       	adiw	r26, 0x20	; 32
    2dd8:	ed 91       	ld	r30, X+
    2dda:	fc 91       	ld	r31, X
    2ddc:	91 97       	sbiw	r26, 0x21	; 33
    2dde:	cd 01       	movw	r24, r26
    2de0:	09 95       	icall
    2de2:	08 95       	ret

00002de4 <__uartGetByte>:
    2de4:	fc 01       	movw	r30, r24
    2de6:	22 a1       	ldd	r18, Z+34	; 0x22
    2de8:	33 a1       	ldd	r19, Z+35	; 0x23
    2dea:	f9 01       	movw	r30, r18
    2dec:	09 95       	icall
    2dee:	08 95       	ret

00002df0 <__uartGetByteBuffered>:
    2df0:	df 93       	push	r29
    2df2:	cf 93       	push	r28
    2df4:	0f 92       	push	r0
    2df6:	cd b7       	in	r28, 0x3d	; 61
    2df8:	de b7       	in	r29, 0x3e	; 62
    2dfa:	fc 01       	movw	r30, r24
    2dfc:	80 81       	ld	r24, Z
    2dfe:	91 81       	ldd	r25, Z+1	; 0x01
    2e00:	be 01       	movw	r22, r28
    2e02:	6f 5f       	subi	r22, 0xFF	; 255
    2e04:	7f 4f       	sbci	r23, 0xFF	; 255
    2e06:	0e 94 0c 18 	call	0x3018	; 0x3018 <bufferGet>
    2e0a:	88 23       	and	r24, r24
    2e0c:	19 f4       	brne	.+6      	; 0x2e14 <__uartGetByteBuffered+0x24>
    2e0e:	2f ef       	ldi	r18, 0xFF	; 255
    2e10:	3f ef       	ldi	r19, 0xFF	; 255
    2e12:	03 c0       	rjmp	.+6      	; 0x2e1a <__uartGetByteBuffered+0x2a>
    2e14:	89 81       	ldd	r24, Y+1	; 0x01
    2e16:	28 2f       	mov	r18, r24
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	c9 01       	movw	r24, r18
    2e1c:	0f 90       	pop	r0
    2e1e:	cf 91       	pop	r28
    2e20:	df 91       	pop	r29
    2e22:	08 95       	ret

00002e24 <__uartReceiveBuffered>:
    2e24:	cf 93       	push	r28
    2e26:	df 93       	push	r29
    2e28:	ec 01       	movw	r28, r24
    2e2a:	88 81       	ld	r24, Y
    2e2c:	99 81       	ldd	r25, Y+1	; 0x01
    2e2e:	0e 94 54 18 	call	0x30a8	; 0x30a8 <bufferPut>
    2e32:	88 23       	and	r24, r24
    2e34:	31 f4       	brne	.+12     	; 0x2e42 <__uartReceiveBuffered+0x1e>
    2e36:	88 85       	ldd	r24, Y+8	; 0x08
    2e38:	84 60       	ori	r24, 0x04	; 4
    2e3a:	88 87       	std	Y+8, r24	; 0x08
    2e3c:	85 ef       	ldi	r24, 0xF5	; 245
    2e3e:	0e 94 61 11 	call	0x22c2	; 0x22c2 <setError>
    2e42:	df 91       	pop	r29
    2e44:	cf 91       	pop	r28
    2e46:	08 95       	ret

00002e48 <_uartStartXmit>:
    2e48:	dc 01       	movw	r26, r24
    2e4a:	19 96       	adiw	r26, 0x09	; 9
    2e4c:	8d 91       	ld	r24, X+
    2e4e:	9c 91       	ld	r25, X
    2e50:	1a 97       	sbiw	r26, 0x0a	; 10
    2e52:	02 96       	adiw	r24, 0x02	; 2
    2e54:	fc 01       	movw	r30, r24
    2e56:	25 91       	lpm	r18, Z+
    2e58:	34 91       	lpm	r19, Z+
    2e5a:	cd 01       	movw	r24, r26
    2e5c:	f9 01       	movw	r30, r18
    2e5e:	09 95       	icall
    2e60:	08 95       	ret

00002e62 <_uartTransmitBlockStart>:
    2e62:	cf 93       	push	r28
    2e64:	df 93       	push	r29
    2e66:	ec 01       	movw	r28, r24
    2e68:	88 85       	ldd	r24, Y+8	; 0x08
    2e6a:	8e 7f       	andi	r24, 0xFE	; 254
    2e6c:	88 87       	std	Y+8, r24	; 0x08
    2e6e:	e8 8d       	ldd	r30, Y+24	; 0x18
    2e70:	f9 8d       	ldd	r31, Y+25	; 0x19
    2e72:	30 97       	sbiw	r30, 0x00	; 0
    2e74:	21 f0       	breq	.+8      	; 0x2e7e <_uartTransmitBlockStart+0x1c>
    2e76:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e78:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e7a:	6f ef       	ldi	r22, 0xFF	; 255
    2e7c:	09 95       	icall
    2e7e:	e9 85       	ldd	r30, Y+9	; 0x09
    2e80:	fa 85       	ldd	r31, Y+10	; 0x0a
    2e82:	38 96       	adiw	r30, 0x08	; 8
    2e84:	25 91       	lpm	r18, Z+
    2e86:	34 91       	lpm	r19, Z+
    2e88:	21 15       	cp	r18, r1
    2e8a:	31 05       	cpc	r19, r1
    2e8c:	19 f0       	breq	.+6      	; 0x2e94 <_uartTransmitBlockStart+0x32>
    2e8e:	ce 01       	movw	r24, r28
    2e90:	f9 01       	movw	r30, r18
    2e92:	09 95       	icall
    2e94:	df 91       	pop	r29
    2e96:	cf 91       	pop	r28
    2e98:	08 95       	ret

00002e9a <_uartTransmitBlockEnd>:
    2e9a:	cf 93       	push	r28
    2e9c:	df 93       	push	r29
    2e9e:	ec 01       	movw	r28, r24
    2ea0:	88 85       	ldd	r24, Y+8	; 0x08
    2ea2:	81 60       	ori	r24, 0x01	; 1
    2ea4:	88 87       	std	Y+8, r24	; 0x08
    2ea6:	e9 85       	ldd	r30, Y+9	; 0x09
    2ea8:	fa 85       	ldd	r31, Y+10	; 0x0a
    2eaa:	3a 96       	adiw	r30, 0x0a	; 10
    2eac:	25 91       	lpm	r18, Z+
    2eae:	34 91       	lpm	r19, Z+
    2eb0:	21 15       	cp	r18, r1
    2eb2:	31 05       	cpc	r19, r1
    2eb4:	19 f0       	breq	.+6      	; 0x2ebc <_uartTransmitBlockEnd+0x22>
    2eb6:	ce 01       	movw	r24, r28
    2eb8:	f9 01       	movw	r30, r18
    2eba:	09 95       	icall
    2ebc:	e8 8d       	ldd	r30, Y+24	; 0x18
    2ebe:	f9 8d       	ldd	r31, Y+25	; 0x19
    2ec0:	30 97       	sbiw	r30, 0x00	; 0
    2ec2:	21 f0       	breq	.+8      	; 0x2ecc <_uartTransmitBlockEnd+0x32>
    2ec4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ec6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2ec8:	60 e0       	ldi	r22, 0x00	; 0
    2eca:	09 95       	icall
    2ecc:	df 91       	pop	r29
    2ece:	cf 91       	pop	r28
    2ed0:	08 95       	ret

00002ed2 <_uartSendBuffer>:
    2ed2:	ef 92       	push	r14
    2ed4:	ff 92       	push	r15
    2ed6:	0f 93       	push	r16
    2ed8:	1f 93       	push	r17
    2eda:	cf 93       	push	r28
    2edc:	df 93       	push	r29
    2ede:	8c 01       	movw	r16, r24
    2ee0:	7b 01       	movw	r14, r22
    2ee2:	ea 01       	movw	r28, r20
    2ee4:	0b c0       	rjmp	.+22     	; 0x2efc <_uartSendBuffer+0x2a>
    2ee6:	d7 01       	movw	r26, r14
    2ee8:	6d 91       	ld	r22, X+
    2eea:	7d 01       	movw	r14, r26
    2eec:	d8 01       	movw	r26, r16
    2eee:	5c 96       	adiw	r26, 0x1c	; 28
    2ef0:	ed 91       	ld	r30, X+
    2ef2:	fc 91       	ld	r31, X
    2ef4:	5d 97       	sbiw	r26, 0x1d	; 29
    2ef6:	c8 01       	movw	r24, r16
    2ef8:	09 95       	icall
    2efa:	21 97       	sbiw	r28, 0x01	; 1
    2efc:	20 97       	sbiw	r28, 0x00	; 0
    2efe:	99 f7       	brne	.-26     	; 0x2ee6 <_uartSendBuffer+0x14>
    2f00:	df 91       	pop	r29
    2f02:	cf 91       	pop	r28
    2f04:	1f 91       	pop	r17
    2f06:	0f 91       	pop	r16
    2f08:	ff 90       	pop	r15
    2f0a:	ef 90       	pop	r14
    2f0c:	08 95       	ret

00002f0e <_uartSendByte>:
    2f0e:	1f 93       	push	r17
    2f10:	fc 01       	movw	r30, r24
    2f12:	16 2f       	mov	r17, r22
    2f14:	24 8d       	ldd	r18, Z+28	; 0x1c
    2f16:	35 8d       	ldd	r19, Z+29	; 0x1d
    2f18:	f9 01       	movw	r30, r18
    2f1a:	09 95       	icall
    2f1c:	81 2f       	mov	r24, r17
    2f1e:	1f 91       	pop	r17
    2f20:	08 95       	ret

00002f22 <__uartTransmitService>:
    2f22:	fc 01       	movw	r30, r24
    2f24:	26 8d       	ldd	r18, Z+30	; 0x1e
    2f26:	37 8d       	ldd	r19, Z+31	; 0x1f
    2f28:	f9 01       	movw	r30, r18
    2f2a:	09 95       	icall
    2f2c:	08 95       	ret

00002f2e <__uartSendNextBuffered>:
    2f2e:	ff 92       	push	r15
    2f30:	0f 93       	push	r16
    2f32:	1f 93       	push	r17
    2f34:	df 93       	push	r29
    2f36:	cf 93       	push	r28
    2f38:	0f 92       	push	r0
    2f3a:	cd b7       	in	r28, 0x3d	; 61
    2f3c:	de b7       	in	r29, 0x3e	; 62
    2f3e:	8c 01       	movw	r16, r24
    2f40:	ff b6       	in	r15, 0x3f	; 63
    2f42:	f8 94       	cli
    2f44:	fc 01       	movw	r30, r24
    2f46:	82 81       	ldd	r24, Z+2	; 0x02
    2f48:	93 81       	ldd	r25, Z+3	; 0x03
    2f4a:	be 01       	movw	r22, r28
    2f4c:	6f 5f       	subi	r22, 0xFF	; 255
    2f4e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f50:	0e 94 0c 18 	call	0x3018	; 0x3018 <bufferGet>
    2f54:	88 23       	and	r24, r24
    2f56:	29 f0       	breq	.+10     	; 0x2f62 <__uartSendNextBuffered+0x34>
    2f58:	c8 01       	movw	r24, r16
    2f5a:	69 81       	ldd	r22, Y+1	; 0x01
    2f5c:	0e 94 24 17 	call	0x2e48	; 0x2e48 <_uartStartXmit>
    2f60:	07 c0       	rjmp	.+14     	; 0x2f70 <__uartSendNextBuffered+0x42>
    2f62:	c8 01       	movw	r24, r16
    2f64:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <_uartTransmitBlockEnd>
    2f68:	f8 01       	movw	r30, r16
    2f6a:	80 85       	ldd	r24, Z+8	; 0x08
    2f6c:	8d 7f       	andi	r24, 0xFD	; 253
    2f6e:	80 87       	std	Z+8, r24	; 0x08
    2f70:	ff be       	out	0x3f, r15	; 63
    2f72:	0f 90       	pop	r0
    2f74:	cf 91       	pop	r28
    2f76:	df 91       	pop	r29
    2f78:	1f 91       	pop	r17
    2f7a:	0f 91       	pop	r16
    2f7c:	ff 90       	pop	r15
    2f7e:	08 95       	ret

00002f80 <__uartSendBuffered>:
    2f80:	0f 93       	push	r16
    2f82:	1f 93       	push	r17
    2f84:	cf 93       	push	r28
    2f86:	df 93       	push	r29
    2f88:	16 2f       	mov	r17, r22
    2f8a:	ec 01       	movw	r28, r24
    2f8c:	02 c0       	rjmp	.+4      	; 0x2f92 <__uartSendBuffered+0x12>
    2f8e:	0e 94 c5 18 	call	0x318a	; 0x318a <breathe>
    2f92:	8a 81       	ldd	r24, Y+2	; 0x02
    2f94:	9b 81       	ldd	r25, Y+3	; 0x03
    2f96:	0e 94 4c 18 	call	0x3098	; 0x3098 <bufferIsFull>
    2f9a:	88 23       	and	r24, r24
    2f9c:	c1 f7       	brne	.-16     	; 0x2f8e <__uartSendBuffered+0xe>
    2f9e:	0f b7       	in	r16, 0x3f	; 63
    2fa0:	f8 94       	cli
    2fa2:	88 85       	ldd	r24, Y+8	; 0x08
    2fa4:	81 fd       	sbrc	r24, 1
    2fa6:	0b c0       	rjmp	.+22     	; 0x2fbe <__uartSendBuffered+0x3e>
    2fa8:	88 85       	ldd	r24, Y+8	; 0x08
    2faa:	82 60       	ori	r24, 0x02	; 2
    2fac:	88 87       	std	Y+8, r24	; 0x08
    2fae:	ce 01       	movw	r24, r28
    2fb0:	0e 94 31 17 	call	0x2e62	; 0x2e62 <_uartTransmitBlockStart>
    2fb4:	ce 01       	movw	r24, r28
    2fb6:	61 2f       	mov	r22, r17
    2fb8:	0e 94 24 17 	call	0x2e48	; 0x2e48 <_uartStartXmit>
    2fbc:	05 c0       	rjmp	.+10     	; 0x2fc8 <__uartSendBuffered+0x48>
    2fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc2:	61 2f       	mov	r22, r17
    2fc4:	0e 94 54 18 	call	0x30a8	; 0x30a8 <bufferPut>
    2fc8:	0f bf       	out	0x3f, r16	; 63
    2fca:	df 91       	pop	r29
    2fcc:	cf 91       	pop	r28
    2fce:	1f 91       	pop	r17
    2fd0:	0f 91       	pop	r16
    2fd2:	08 95       	ret

00002fd4 <uartReceivePollingMode>:
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	96 96       	adiw	r26, 0x26	; 38
    2fd8:	ed 91       	ld	r30, X+
    2fda:	fc 91       	ld	r31, X
    2fdc:	97 97       	sbiw	r26, 0x27	; 39
    2fde:	66 23       	and	r22, r22
    2fe0:	19 f0       	breq	.+6      	; 0x2fe8 <uartReceivePollingMode+0x14>
    2fe2:	80 81       	ld	r24, Z
    2fe4:	8f 77       	andi	r24, 0x7F	; 127
    2fe6:	02 c0       	rjmp	.+4      	; 0x2fec <uartReceivePollingMode+0x18>
    2fe8:	80 81       	ld	r24, Z
    2fea:	80 68       	ori	r24, 0x80	; 128
    2fec:	80 83       	st	Z, r24
    2fee:	08 95       	ret

00002ff0 <uartPollByte>:
    2ff0:	dc 01       	movw	r26, r24
    2ff2:	94 96       	adiw	r26, 0x24	; 36
    2ff4:	ed 91       	ld	r30, X+
    2ff6:	fc 91       	ld	r31, X
    2ff8:	95 97       	sbiw	r26, 0x25	; 37
    2ffa:	80 81       	ld	r24, Z
    2ffc:	87 fd       	sbrc	r24, 7
    2ffe:	03 c0       	rjmp	.+6      	; 0x3006 <uartPollByte+0x16>
    3000:	2f ef       	ldi	r18, 0xFF	; 255
    3002:	3f ef       	ldi	r19, 0xFF	; 255
    3004:	07 c0       	rjmp	.+14     	; 0x3014 <uartPollByte+0x24>
    3006:	9c 96       	adiw	r26, 0x2c	; 44
    3008:	ed 91       	ld	r30, X+
    300a:	fc 91       	ld	r31, X
    300c:	9d 97       	sbiw	r26, 0x2d	; 45
    300e:	80 81       	ld	r24, Z
    3010:	28 2f       	mov	r18, r24
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	c9 01       	movw	r24, r18
    3016:	08 95       	ret

00003018 <bufferGet>:
    3018:	cf 93       	push	r28
    301a:	df 93       	push	r29
    301c:	dc 01       	movw	r26, r24
    301e:	eb 01       	movw	r28, r22
    3020:	4f b7       	in	r20, 0x3f	; 63
    3022:	f8 94       	cli
    3024:	00 97       	sbiw	r24, 0x00	; 0
    3026:	99 f1       	breq	.+102    	; 0x308e <bufferGet+0x76>
    3028:	12 96       	adiw	r26, 0x02	; 2
    302a:	8d 91       	ld	r24, X+
    302c:	9c 91       	ld	r25, X
    302e:	13 97       	sbiw	r26, 0x03	; 3
    3030:	89 2b       	or	r24, r25
    3032:	69 f1       	breq	.+90     	; 0x308e <bufferGet+0x76>
    3034:	14 96       	adiw	r26, 0x04	; 4
    3036:	8d 91       	ld	r24, X+
    3038:	9c 91       	ld	r25, X
    303a:	15 97       	sbiw	r26, 0x05	; 5
    303c:	89 2b       	or	r24, r25
    303e:	39 f1       	breq	.+78     	; 0x308e <bufferGet+0x76>
    3040:	16 96       	adiw	r26, 0x06	; 6
    3042:	2d 91       	ld	r18, X+
    3044:	3c 91       	ld	r19, X
    3046:	17 97       	sbiw	r26, 0x07	; 7
    3048:	ed 91       	ld	r30, X+
    304a:	fc 91       	ld	r31, X
    304c:	11 97       	sbiw	r26, 0x01	; 1
    304e:	e2 0f       	add	r30, r18
    3050:	f3 1f       	adc	r31, r19
    3052:	80 81       	ld	r24, Z
    3054:	88 83       	st	Y, r24
    3056:	2f 5f       	subi	r18, 0xFF	; 255
    3058:	3f 4f       	sbci	r19, 0xFF	; 255
    305a:	17 96       	adiw	r26, 0x07	; 7
    305c:	3c 93       	st	X, r19
    305e:	2e 93       	st	-X, r18
    3060:	16 97       	sbiw	r26, 0x06	; 6
    3062:	12 96       	adiw	r26, 0x02	; 2
    3064:	8d 91       	ld	r24, X+
    3066:	9c 91       	ld	r25, X
    3068:	13 97       	sbiw	r26, 0x03	; 3
    306a:	28 17       	cp	r18, r24
    306c:	39 07       	cpc	r19, r25
    306e:	21 f4       	brne	.+8      	; 0x3078 <bufferGet+0x60>
    3070:	17 96       	adiw	r26, 0x07	; 7
    3072:	1c 92       	st	X, r1
    3074:	1e 92       	st	-X, r1
    3076:	16 97       	sbiw	r26, 0x06	; 6
    3078:	14 96       	adiw	r26, 0x04	; 4
    307a:	8d 91       	ld	r24, X+
    307c:	9c 91       	ld	r25, X
    307e:	15 97       	sbiw	r26, 0x05	; 5
    3080:	01 97       	sbiw	r24, 0x01	; 1
    3082:	15 96       	adiw	r26, 0x05	; 5
    3084:	9c 93       	st	X, r25
    3086:	8e 93       	st	-X, r24
    3088:	14 97       	sbiw	r26, 0x04	; 4
    308a:	8f ef       	ldi	r24, 0xFF	; 255
    308c:	01 c0       	rjmp	.+2      	; 0x3090 <bufferGet+0x78>
    308e:	80 e0       	ldi	r24, 0x00	; 0
    3090:	4f bf       	out	0x3f, r20	; 63
    3092:	df 91       	pop	r29
    3094:	cf 91       	pop	r28
    3096:	08 95       	ret

00003098 <bufferIsFull>:
    3098:	0e 94 21 19 	call	0x3242	; 0x3242 <bufferFreeSpace>
    309c:	89 2b       	or	r24, r25
    309e:	11 f0       	breq	.+4      	; 0x30a4 <bufferIsFull+0xc>
    30a0:	80 e0       	ldi	r24, 0x00	; 0
    30a2:	08 95       	ret
    30a4:	8f ef       	ldi	r24, 0xFF	; 255
    30a6:	08 95       	ret

000030a8 <bufferPut>:
    30a8:	1f 93       	push	r17
    30aa:	cf 93       	push	r28
    30ac:	df 93       	push	r29
    30ae:	ec 01       	movw	r28, r24
    30b0:	46 2f       	mov	r20, r22
    30b2:	1f b7       	in	r17, 0x3f	; 63
    30b4:	f8 94       	cli
    30b6:	2c 81       	ldd	r18, Y+4	; 0x04
    30b8:	3d 81       	ldd	r19, Y+5	; 0x05
    30ba:	6a 81       	ldd	r22, Y+2	; 0x02
    30bc:	7b 81       	ldd	r23, Y+3	; 0x03
    30be:	26 17       	cp	r18, r22
    30c0:	37 07       	cpc	r19, r23
    30c2:	10 f0       	brcs	.+4      	; 0x30c8 <bufferPut+0x20>
    30c4:	80 e0       	ldi	r24, 0x00	; 0
    30c6:	11 c0       	rjmp	.+34     	; 0x30ea <bufferPut+0x42>
    30c8:	8e 81       	ldd	r24, Y+6	; 0x06
    30ca:	9f 81       	ldd	r25, Y+7	; 0x07
    30cc:	82 0f       	add	r24, r18
    30ce:	93 1f       	adc	r25, r19
    30d0:	0e 94 1a 22 	call	0x4434	; 0x4434 <__udivmodhi4>
    30d4:	e8 81       	ld	r30, Y
    30d6:	f9 81       	ldd	r31, Y+1	; 0x01
    30d8:	e8 0f       	add	r30, r24
    30da:	f9 1f       	adc	r31, r25
    30dc:	40 83       	st	Z, r20
    30de:	8c 81       	ldd	r24, Y+4	; 0x04
    30e0:	9d 81       	ldd	r25, Y+5	; 0x05
    30e2:	01 96       	adiw	r24, 0x01	; 1
    30e4:	9d 83       	std	Y+5, r25	; 0x05
    30e6:	8c 83       	std	Y+4, r24	; 0x04
    30e8:	8f ef       	ldi	r24, 0xFF	; 255
    30ea:	1f bf       	out	0x3f, r17	; 63
    30ec:	df 91       	pop	r29
    30ee:	cf 91       	pop	r28
    30f0:	1f 91       	pop	r17
    30f2:	08 95       	ret

000030f4 <clockHasElapsed>:
    30f4:	0f 93       	push	r16
    30f6:	1f 93       	push	r17
    30f8:	00 e0       	ldi	r16, 0x00	; 0
    30fa:	10 e0       	ldi	r17, 0x00	; 0
    30fc:	0e 94 83 18 	call	0x3106	; 0x3106 <clockHasElapsedGetOverflow>
    3100:	1f 91       	pop	r17
    3102:	0f 91       	pop	r16
    3104:	08 95       	ret

00003106 <clockHasElapsedGetOverflow>:
    3106:	8f 92       	push	r8
    3108:	9f 92       	push	r9
    310a:	af 92       	push	r10
    310c:	bf 92       	push	r11
    310e:	cf 92       	push	r12
    3110:	df 92       	push	r13
    3112:	ef 92       	push	r14
    3114:	ff 92       	push	r15
    3116:	0f 93       	push	r16
    3118:	1f 93       	push	r17
    311a:	cf 93       	push	r28
    311c:	df 93       	push	r29
    311e:	6b 01       	movw	r12, r22
    3120:	7c 01       	movw	r14, r24
    3122:	49 01       	movw	r8, r18
    3124:	5a 01       	movw	r10, r20
    3126:	e8 01       	movw	r28, r16
    3128:	0e 94 57 0b 	call	0x16ae	; 0x16ae <clockGetus>
    312c:	6c 19       	sub	r22, r12
    312e:	7d 09       	sbc	r23, r13
    3130:	8e 09       	sbc	r24, r14
    3132:	9f 09       	sbc	r25, r15
    3134:	68 15       	cp	r22, r8
    3136:	79 05       	cpc	r23, r9
    3138:	8a 05       	cpc	r24, r10
    313a:	9b 05       	cpc	r25, r11
    313c:	68 f0       	brcs	.+26     	; 0x3158 <clockHasElapsedGetOverflow+0x52>
    313e:	01 15       	cp	r16, r1
    3140:	11 05       	cpc	r17, r1
    3142:	41 f0       	breq	.+16     	; 0x3154 <clockHasElapsedGetOverflow+0x4e>
    3144:	68 19       	sub	r22, r8
    3146:	79 09       	sbc	r23, r9
    3148:	8a 09       	sbc	r24, r10
    314a:	9b 09       	sbc	r25, r11
    314c:	68 83       	st	Y, r22
    314e:	79 83       	std	Y+1, r23	; 0x01
    3150:	8a 83       	std	Y+2, r24	; 0x02
    3152:	9b 83       	std	Y+3, r25	; 0x03
    3154:	8f ef       	ldi	r24, 0xFF	; 255
    3156:	0c c0       	rjmp	.+24     	; 0x3170 <clockHasElapsedGetOverflow+0x6a>
    3158:	01 15       	cp	r16, r1
    315a:	11 05       	cpc	r17, r1
    315c:	41 f0       	breq	.+16     	; 0x316e <clockHasElapsedGetOverflow+0x68>
    315e:	86 1a       	sub	r8, r22
    3160:	97 0a       	sbc	r9, r23
    3162:	a8 0a       	sbc	r10, r24
    3164:	b9 0a       	sbc	r11, r25
    3166:	88 82       	st	Y, r8
    3168:	99 82       	std	Y+1, r9	; 0x01
    316a:	aa 82       	std	Y+2, r10	; 0x02
    316c:	bb 82       	std	Y+3, r11	; 0x03
    316e:	80 e0       	ldi	r24, 0x00	; 0
    3170:	df 91       	pop	r29
    3172:	cf 91       	pop	r28
    3174:	1f 91       	pop	r17
    3176:	0f 91       	pop	r16
    3178:	ff 90       	pop	r15
    317a:	ef 90       	pop	r14
    317c:	df 90       	pop	r13
    317e:	cf 90       	pop	r12
    3180:	bf 90       	pop	r11
    3182:	af 90       	pop	r10
    3184:	9f 90       	pop	r9
    3186:	8f 90       	pop	r8
    3188:	08 95       	ret

0000318a <breathe>:
    318a:	8f b7       	in	r24, 0x3f	; 63
    318c:	78 94       	sei
	...
    319a:	00 00       	nop
    319c:	8f bf       	out	0x3f, r24	; 63
    319e:	08 95       	ret

000031a0 <pin_low>:
    31a0:	cf 93       	push	r28
    31a2:	df 93       	push	r29
    31a4:	9c 01       	movw	r18, r24
    31a6:	00 97       	sbiw	r24, 0x00	; 0
    31a8:	e9 f0       	breq	.+58     	; 0x31e4 <pin_low+0x44>
    31aa:	fc 01       	movw	r30, r24
    31ac:	85 91       	lpm	r24, Z+
    31ae:	94 91       	lpm	r25, Z+
    31b0:	fc 01       	movw	r30, r24
    31b2:	a5 91       	lpm	r26, Z+
    31b4:	b4 91       	lpm	r27, Z+
    31b6:	02 96       	adiw	r24, 0x02	; 2
    31b8:	fc 01       	movw	r30, r24
    31ba:	c5 91       	lpm	r28, Z+
    31bc:	d4 91       	lpm	r29, Z+
    31be:	2e 5f       	subi	r18, 0xFE	; 254
    31c0:	3f 4f       	sbci	r19, 0xFF	; 255
    31c2:	f9 01       	movw	r30, r18
    31c4:	24 91       	lpm	r18, Z+
    31c6:	88 81       	ld	r24, Y
    31c8:	82 23       	and	r24, r18
    31ca:	49 f0       	breq	.+18     	; 0x31de <pin_low+0x3e>
    31cc:	9f b7       	in	r25, 0x3f	; 63
    31ce:	f8 94       	cli
    31d0:	8c 91       	ld	r24, X
    31d2:	20 95       	com	r18
    31d4:	82 23       	and	r24, r18
    31d6:	8c 93       	st	X, r24
    31d8:	9f bf       	out	0x3f, r25	; 63
    31da:	00 00       	nop
    31dc:	03 c0       	rjmp	.+6      	; 0x31e4 <pin_low+0x44>
    31de:	87 ef       	ldi	r24, 0xF7	; 247
    31e0:	0e 94 61 11 	call	0x22c2	; 0x22c2 <setError>
    31e4:	df 91       	pop	r29
    31e6:	cf 91       	pop	r28
    31e8:	08 95       	ret

000031ea <pin_high>:
    31ea:	cf 93       	push	r28
    31ec:	df 93       	push	r29
    31ee:	9c 01       	movw	r18, r24
    31f0:	00 97       	sbiw	r24, 0x00	; 0
    31f2:	e1 f0       	breq	.+56     	; 0x322c <pin_high+0x42>
    31f4:	fc 01       	movw	r30, r24
    31f6:	85 91       	lpm	r24, Z+
    31f8:	94 91       	lpm	r25, Z+
    31fa:	fc 01       	movw	r30, r24
    31fc:	a5 91       	lpm	r26, Z+
    31fe:	b4 91       	lpm	r27, Z+
    3200:	02 96       	adiw	r24, 0x02	; 2
    3202:	fc 01       	movw	r30, r24
    3204:	c5 91       	lpm	r28, Z+
    3206:	d4 91       	lpm	r29, Z+
    3208:	2e 5f       	subi	r18, 0xFE	; 254
    320a:	3f 4f       	sbci	r19, 0xFF	; 255
    320c:	f9 01       	movw	r30, r18
    320e:	24 91       	lpm	r18, Z+
    3210:	88 81       	ld	r24, Y
    3212:	82 23       	and	r24, r18
    3214:	41 f0       	breq	.+16     	; 0x3226 <pin_high+0x3c>
    3216:	9f b7       	in	r25, 0x3f	; 63
    3218:	f8 94       	cli
    321a:	8c 91       	ld	r24, X
    321c:	82 2b       	or	r24, r18
    321e:	8c 93       	st	X, r24
    3220:	9f bf       	out	0x3f, r25	; 63
    3222:	00 00       	nop
    3224:	03 c0       	rjmp	.+6      	; 0x322c <pin_high+0x42>
    3226:	87 ef       	ldi	r24, 0xF7	; 247
    3228:	0e 94 61 11 	call	0x22c2	; 0x22c2 <setError>
    322c:	df 91       	pop	r29
    322e:	cf 91       	pop	r28
    3230:	08 95       	ret

00003232 <pin_set>:
    3232:	66 23       	and	r22, r22
    3234:	19 f0       	breq	.+6      	; 0x323c <pin_set+0xa>
    3236:	0e 94 f5 18 	call	0x31ea	; 0x31ea <pin_high>
    323a:	08 95       	ret
    323c:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <pin_low>
    3240:	08 95       	ret

00003242 <bufferFreeSpace>:
    3242:	fc 01       	movw	r30, r24
    3244:	4f b7       	in	r20, 0x3f	; 63
    3246:	f8 94       	cli
    3248:	00 97       	sbiw	r24, 0x00	; 0
    324a:	19 f4       	brne	.+6      	; 0x3252 <bufferFreeSpace+0x10>
    324c:	20 e0       	ldi	r18, 0x00	; 0
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	06 c0       	rjmp	.+12     	; 0x325e <bufferFreeSpace+0x1c>
    3252:	22 81       	ldd	r18, Z+2	; 0x02
    3254:	33 81       	ldd	r19, Z+3	; 0x03
    3256:	84 81       	ldd	r24, Z+4	; 0x04
    3258:	95 81       	ldd	r25, Z+5	; 0x05
    325a:	28 1b       	sub	r18, r24
    325c:	39 0b       	sbc	r19, r25
    325e:	4f bf       	out	0x3f, r20	; 63
    3260:	c9 01       	movw	r24, r18
    3262:	08 95       	ret

00003264 <__scheduleUpdate>:
    3264:	2f 92       	push	r2
    3266:	3f 92       	push	r3
    3268:	4f 92       	push	r4
    326a:	5f 92       	push	r5
    326c:	6f 92       	push	r6
    326e:	7f 92       	push	r7
    3270:	8f 92       	push	r8
    3272:	9f 92       	push	r9
    3274:	af 92       	push	r10
    3276:	bf 92       	push	r11
    3278:	cf 92       	push	r12
    327a:	df 92       	push	r13
    327c:	ef 92       	push	r14
    327e:	ff 92       	push	r15
    3280:	0f 93       	push	r16
    3282:	1f 93       	push	r17
    3284:	df 93       	push	r29
    3286:	cf 93       	push	r28
    3288:	cd b7       	in	r28, 0x3d	; 61
    328a:	de b7       	in	r29, 0x3e	; 62
    328c:	27 97       	sbiw	r28, 0x07	; 7
    328e:	0f b6       	in	r0, 0x3f	; 63
    3290:	f8 94       	cli
    3292:	de bf       	out	0x3e, r29	; 62
    3294:	0f be       	out	0x3f, r0	; 63
    3296:	cd bf       	out	0x3d, r28	; 61
    3298:	80 91 6e 00 	lds	r24, 0x006E
    329c:	8b 7f       	andi	r24, 0xFB	; 251
    329e:	80 93 6e 00 	sts	0x006E, r24
    32a2:	2f b7       	in	r18, 0x3f	; 63
    32a4:	2f 83       	std	Y+7, r18	; 0x07
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
    32a6:	78 94       	sei
    32a8:	8f ef       	ldi	r24, 0xFF	; 255
    32aa:	80 93 1a 10 	sts	0x101A, r24
    32ae:	10 92 1b 10 	sts	0x101B, r1
    32b2:	80 91 97 05 	lds	r24, 0x0597
    32b6:	48 2f       	mov	r20, r24
    32b8:	50 e0       	ldi	r21, 0x00	; 0
    32ba:	41 50       	subi	r20, 0x01	; 1
    32bc:	50 40       	sbci	r21, 0x00	; 0
    32be:	5e 83       	std	Y+6, r21	; 0x06
    32c0:	4d 83       	std	Y+5, r20	; 0x05
    32c2:	8d e0       	ldi	r24, 0x0D	; 13
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	48 9f       	mul	r20, r24
    32c8:	50 01       	movw	r10, r0
    32ca:	49 9f       	mul	r20, r25
    32cc:	b0 0c       	add	r11, r0
    32ce:	58 9f       	mul	r21, r24
    32d0:	b0 0c       	add	r11, r0
    32d2:	11 24       	eor	r1, r1
    32d4:	ad e0       	ldi	r26, 0x0D	; 13
    32d6:	b0 e1       	ldi	r27, 0x10	; 16
    32d8:	aa 0e       	add	r10, r26
    32da:	bb 1e       	adc	r11, r27
    32dc:	66 24       	eor	r6, r6
    32de:	77 24       	eor	r7, r7
    32e0:	43 01       	movw	r8, r6
    32e2:	56 c0       	rjmp	.+172    	; 0x3390 <__scheduleUpdate+0x12c>
    32e4:	f5 01       	movw	r30, r10
    32e6:	80 81       	ld	r24, Z
    32e8:	88 23       	and	r24, r24
    32ea:	09 f4       	brne	.+2      	; 0x32ee <__scheduleUpdate+0x8a>
    32ec:	48 c0       	rjmp	.+144    	; 0x337e <__scheduleUpdate+0x11a>
    32ee:	21 84       	ldd	r2, Z+9	; 0x09
    32f0:	32 84       	ldd	r3, Z+10	; 0x0a
    32f2:	43 84       	ldd	r4, Z+11	; 0x0b
    32f4:	54 84       	ldd	r5, Z+12	; 0x0c
    32f6:	c5 80       	ldd	r12, Z+5	; 0x05
    32f8:	d6 80       	ldd	r13, Z+6	; 0x06
    32fa:	e7 80       	ldd	r14, Z+7	; 0x07
    32fc:	f0 84       	ldd	r15, Z+8	; 0x08
    32fe:	c2 01       	movw	r24, r4
    3300:	b1 01       	movw	r22, r2
    3302:	a7 01       	movw	r20, r14
    3304:	96 01       	movw	r18, r12
    3306:	8e 01       	movw	r16, r28
    3308:	0f 5f       	subi	r16, 0xFF	; 255
    330a:	1f 4f       	sbci	r17, 0xFF	; 255
    330c:	0e 94 83 18 	call	0x3106	; 0x3106 <clockHasElapsedGetOverflow>
    3310:	88 23       	and	r24, r24
    3312:	19 f1       	breq	.+70     	; 0x335a <__scheduleUpdate+0xf6>
    3314:	d5 01       	movw	r26, r10
    3316:	11 96       	adiw	r26, 0x01	; 1
    3318:	ed 91       	ld	r30, X+
    331a:	fc 91       	ld	r31, X
    331c:	12 97       	sbiw	r26, 0x02	; 2
    331e:	13 96       	adiw	r26, 0x03	; 3
    3320:	8d 91       	ld	r24, X+
    3322:	9c 91       	ld	r25, X
    3324:	14 97       	sbiw	r26, 0x04	; 4
    3326:	1c 92       	st	X, r1
    3328:	20 91 1c 10 	lds	r18, 0x101C
    332c:	30 91 1d 10 	lds	r19, 0x101D
    3330:	21 50       	subi	r18, 0x01	; 1
    3332:	30 40       	sbci	r19, 0x00	; 0
    3334:	30 93 1d 10 	sts	0x101D, r19
    3338:	20 93 1c 10 	sts	0x101C, r18
    333c:	c2 0c       	add	r12, r2
    333e:	d3 1c       	adc	r13, r3
    3340:	e4 1c       	adc	r14, r4
    3342:	f5 1c       	adc	r15, r5
    3344:	09 81       	ldd	r16, Y+1	; 0x01
    3346:	1a 81       	ldd	r17, Y+2	; 0x02
    3348:	2b 81       	ldd	r18, Y+3	; 0x03
    334a:	3c 81       	ldd	r19, Y+4	; 0x04
    334c:	b7 01       	movw	r22, r14
    334e:	a6 01       	movw	r20, r12
    3350:	09 95       	icall
    3352:	bf ef       	ldi	r27, 0xFF	; 255
    3354:	b0 93 1b 10 	sts	0x101B, r27
    3358:	12 c0       	rjmp	.+36     	; 0x337e <__scheduleUpdate+0x11a>
    335a:	61 14       	cp	r6, r1
    335c:	71 04       	cpc	r7, r1
    335e:	81 04       	cpc	r8, r1
    3360:	91 04       	cpc	r9, r1
    3362:	49 f0       	breq	.+18     	; 0x3376 <__scheduleUpdate+0x112>
    3364:	89 81       	ldd	r24, Y+1	; 0x01
    3366:	9a 81       	ldd	r25, Y+2	; 0x02
    3368:	ab 81       	ldd	r26, Y+3	; 0x03
    336a:	bc 81       	ldd	r27, Y+4	; 0x04
    336c:	86 15       	cp	r24, r6
    336e:	97 05       	cpc	r25, r7
    3370:	a8 05       	cpc	r26, r8
    3372:	b9 05       	cpc	r27, r9
    3374:	20 f4       	brcc	.+8      	; 0x337e <__scheduleUpdate+0x11a>
    3376:	69 80       	ldd	r6, Y+1	; 0x01
    3378:	7a 80       	ldd	r7, Y+2	; 0x02
    337a:	8b 80       	ldd	r8, Y+3	; 0x03
    337c:	9c 80       	ldd	r9, Y+4	; 0x04
    337e:	ed 81       	ldd	r30, Y+5	; 0x05
    3380:	fe 81       	ldd	r31, Y+6	; 0x06
    3382:	31 97       	sbiw	r30, 0x01	; 1
    3384:	fe 83       	std	Y+6, r31	; 0x06
    3386:	ed 83       	std	Y+5, r30	; 0x05
    3388:	23 ef       	ldi	r18, 0xF3	; 243
    338a:	3f ef       	ldi	r19, 0xFF	; 255
    338c:	a2 0e       	add	r10, r18
    338e:	b3 1e       	adc	r11, r19
    3390:	4d 81       	ldd	r20, Y+5	; 0x05
    3392:	5e 81       	ldd	r21, Y+6	; 0x06
    3394:	4f 5f       	subi	r20, 0xFF	; 255
    3396:	5f 4f       	sbci	r21, 0xFF	; 255
    3398:	09 f0       	breq	.+2      	; 0x339c <__scheduleUpdate+0x138>
    339a:	a4 cf       	rjmp	.-184    	; 0x32e4 <__scheduleUpdate+0x80>
    339c:	80 91 1b 10 	lds	r24, 0x101B
    33a0:	88 23       	and	r24, r24
    33a2:	09 f0       	breq	.+2      	; 0x33a6 <__scheduleUpdate+0x142>
    33a4:	84 cf       	rjmp	.-248    	; 0x32ae <__scheduleUpdate+0x4a>
    33a6:	10 92 1a 10 	sts	0x101A, r1
    33aa:	80 91 1c 10 	lds	r24, 0x101C
    33ae:	90 91 1d 10 	lds	r25, 0x101D
    33b2:	18 16       	cp	r1, r24
    33b4:	19 06       	cpc	r1, r25
    33b6:	d4 f4       	brge	.+52     	; 0x33ec <__scheduleUpdate+0x188>
    33b8:	26 b5       	in	r18, 0x26	; 38
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	c9 01       	movw	r24, r18
    33be:	6a ef       	ldi	r22, 0xFA	; 250
    33c0:	70 e0       	ldi	r23, 0x00	; 0
    33c2:	0e 94 1a 22 	call	0x4434	; 0x4434 <__udivmodhi4>
    33c6:	86 e0       	ldi	r24, 0x06	; 6
    33c8:	9f ef       	ldi	r25, 0xFF	; 255
    33ca:	dc 01       	movw	r26, r24
    33cc:	6a 9f       	mul	r22, r26
    33ce:	c0 01       	movw	r24, r0
    33d0:	6b 9f       	mul	r22, r27
    33d2:	90 0d       	add	r25, r0
    33d4:	7a 9f       	mul	r23, r26
    33d6:	90 0d       	add	r25, r0
    33d8:	11 24       	eor	r1, r1
    33da:	82 0f       	add	r24, r18
    33dc:	93 1f       	adc	r25, r19
    33de:	88 bd       	out	0x28, r24	; 40
    33e0:	aa 9a       	sbi	0x15, 2	; 21
    33e2:	80 91 6e 00 	lds	r24, 0x006E
    33e6:	84 60       	ori	r24, 0x04	; 4
    33e8:	80 93 6e 00 	sts	0x006E, r24
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
    33ec:	bf 81       	ldd	r27, Y+7	; 0x07
    33ee:	bf bf       	out	0x3f, r27	; 63
    33f0:	27 96       	adiw	r28, 0x07	; 7
    33f2:	0f b6       	in	r0, 0x3f	; 63
    33f4:	f8 94       	cli
    33f6:	de bf       	out	0x3e, r29	; 62
    33f8:	0f be       	out	0x3f, r0	; 63
    33fa:	cd bf       	out	0x3d, r28	; 61
    33fc:	cf 91       	pop	r28
    33fe:	df 91       	pop	r29
    3400:	1f 91       	pop	r17
    3402:	0f 91       	pop	r16
    3404:	ff 90       	pop	r15
    3406:	ef 90       	pop	r14
    3408:	df 90       	pop	r13
    340a:	cf 90       	pop	r12
    340c:	bf 90       	pop	r11
    340e:	af 90       	pop	r10
    3410:	9f 90       	pop	r9
    3412:	8f 90       	pop	r8
    3414:	7f 90       	pop	r7
    3416:	6f 90       	pop	r6
    3418:	5f 90       	pop	r5
    341a:	4f 90       	pop	r4
    341c:	3f 90       	pop	r3
    341e:	2f 90       	pop	r2
    3420:	08 95       	ret

00003422 <__vector_22>:
    3422:	1f 92       	push	r1
    3424:	0f 92       	push	r0
    3426:	0f b6       	in	r0, 0x3f	; 63
    3428:	0f 92       	push	r0
    342a:	11 24       	eor	r1, r1
    342c:	2f 93       	push	r18
    342e:	3f 93       	push	r19
    3430:	4f 93       	push	r20
    3432:	5f 93       	push	r21
    3434:	6f 93       	push	r22
    3436:	7f 93       	push	r23
    3438:	8f 93       	push	r24
    343a:	9f 93       	push	r25
    343c:	af 93       	push	r26
    343e:	bf 93       	push	r27
    3440:	ef 93       	push	r30
    3442:	ff 93       	push	r31
    3444:	0e 94 32 19 	call	0x3264	; 0x3264 <__scheduleUpdate>
    3448:	ff 91       	pop	r31
    344a:	ef 91       	pop	r30
    344c:	bf 91       	pop	r27
    344e:	af 91       	pop	r26
    3450:	9f 91       	pop	r25
    3452:	8f 91       	pop	r24
    3454:	7f 91       	pop	r23
    3456:	6f 91       	pop	r22
    3458:	5f 91       	pop	r21
    345a:	4f 91       	pop	r20
    345c:	3f 91       	pop	r19
    345e:	2f 91       	pop	r18
    3460:	0f 90       	pop	r0
    3462:	0f be       	out	0x3f, r0	; 63
    3464:	0f 90       	pop	r0
    3466:	1f 90       	pop	r1
    3468:	18 95       	reti

0000346a <scheduleJob>:
    346a:	2f 92       	push	r2
    346c:	3f 92       	push	r3
    346e:	4f 92       	push	r4
    3470:	5f 92       	push	r5
    3472:	6f 92       	push	r6
    3474:	7f 92       	push	r7
    3476:	8f 92       	push	r8
    3478:	9f 92       	push	r9
    347a:	af 92       	push	r10
    347c:	bf 92       	push	r11
    347e:	cf 92       	push	r12
    3480:	df 92       	push	r13
    3482:	ef 92       	push	r14
    3484:	ff 92       	push	r15
    3486:	0f 93       	push	r16
    3488:	1f 93       	push	r17
    348a:	df 93       	push	r29
    348c:	cf 93       	push	r28
    348e:	00 d0       	rcall	.+0      	; 0x3490 <scheduleJob+0x26>
    3490:	00 d0       	rcall	.+0      	; 0x3492 <scheduleJob+0x28>
    3492:	cd b7       	in	r28, 0x3d	; 61
    3494:	de b7       	in	r29, 0x3e	; 62
    3496:	1c 01       	movw	r2, r24
    3498:	2b 01       	movw	r4, r22
    349a:	49 01       	movw	r8, r18
    349c:	5a 01       	movw	r10, r20
    349e:	67 01       	movw	r12, r14
    34a0:	78 01       	movw	r14, r16
    34a2:	88 ee       	ldi	r24, 0xE8	; 232
    34a4:	c8 16       	cp	r12, r24
    34a6:	83 e0       	ldi	r24, 0x03	; 3
    34a8:	d8 06       	cpc	r13, r24
    34aa:	80 e0       	ldi	r24, 0x00	; 0
    34ac:	e8 06       	cpc	r14, r24
    34ae:	80 e0       	ldi	r24, 0x00	; 0
    34b0:	f8 06       	cpc	r15, r24
    34b2:	38 f4       	brcc	.+14     	; 0x34c2 <scheduleJob+0x58>
    34b4:	80 91 1a 10 	lds	r24, 0x101A
    34b8:	88 23       	and	r24, r24
    34ba:	c1 f1       	breq	.+112    	; 0x352c <scheduleJob+0xc2>
    34bc:	8f ef       	ldi	r24, 0xFF	; 255
    34be:	80 93 1b 10 	sts	0x101B, r24
    34c2:	6f b7       	in	r22, 0x3f	; 63
#endif  /* C++ */
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
    34c4:	f8 94       	cli
    34c6:	80 91 97 05 	lds	r24, 0x0597
    34ca:	48 2f       	mov	r20, r24
    34cc:	50 e0       	ldi	r21, 0x00	; 0
    34ce:	ad e0       	ldi	r26, 0x0D	; 13
    34d0:	b0 e1       	ldi	r27, 0x10	; 16
    34d2:	20 e0       	ldi	r18, 0x00	; 0
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	20 c0       	rjmp	.+64     	; 0x3518 <scheduleJob+0xae>
    34d8:	fd 01       	movw	r30, r26
    34da:	8c 91       	ld	r24, X
    34dc:	1d 96       	adiw	r26, 0x0d	; 13
    34de:	88 23       	and	r24, r24
    34e0:	c9 f4       	brne	.+50     	; 0x3514 <scheduleJob+0xaa>
    34e2:	8f ef       	ldi	r24, 0xFF	; 255
    34e4:	80 83       	st	Z, r24
    34e6:	32 82       	std	Z+2, r3	; 0x02
    34e8:	21 82       	std	Z+1, r2	; 0x01
    34ea:	54 82       	std	Z+4, r5	; 0x04
    34ec:	43 82       	std	Z+3, r4	; 0x03
    34ee:	81 86       	std	Z+9, r8	; 0x09
    34f0:	92 86       	std	Z+10, r9	; 0x0a
    34f2:	a3 86       	std	Z+11, r10	; 0x0b
    34f4:	b4 86       	std	Z+12, r11	; 0x0c
    34f6:	c5 82       	std	Z+5, r12	; 0x05
    34f8:	d6 82       	std	Z+6, r13	; 0x06
    34fa:	e7 82       	std	Z+7, r14	; 0x07
    34fc:	f0 86       	std	Z+8, r15	; 0x08
    34fe:	80 91 1c 10 	lds	r24, 0x101C
    3502:	90 91 1d 10 	lds	r25, 0x101D
    3506:	01 96       	adiw	r24, 0x01	; 1
    3508:	90 93 1d 10 	sts	0x101D, r25
    350c:	80 93 1c 10 	sts	0x101C, r24
    3510:	8f ef       	ldi	r24, 0xFF	; 255
    3512:	06 c0       	rjmp	.+12     	; 0x3520 <scheduleJob+0xb6>
    3514:	2f 5f       	subi	r18, 0xFF	; 255
    3516:	3f 4f       	sbci	r19, 0xFF	; 255
    3518:	24 17       	cp	r18, r20
    351a:	35 07       	cpc	r19, r21
    351c:	ec f2       	brlt	.-70     	; 0x34d8 <scheduleJob+0x6e>
    351e:	80 e0       	ldi	r24, 0x00	; 0
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
    3520:	6f bf       	out	0x3f, r22	; 63
    3522:	88 23       	and	r24, r24
    3524:	f1 f4       	brne	.+60     	; 0x3562 <scheduleJob+0xf8>
    3526:	8f ef       	ldi	r24, 0xFF	; 255
    3528:	0e 94 61 11 	call	0x22c2	; 0x22c2 <setError>
    352c:	3e 01       	movw	r6, r28
    352e:	08 94       	sec
    3530:	61 1c       	adc	r6, r1
    3532:	71 1c       	adc	r7, r1
    3534:	c5 01       	movw	r24, r10
    3536:	b4 01       	movw	r22, r8
    3538:	a7 01       	movw	r20, r14
    353a:	96 01       	movw	r18, r12
    353c:	83 01       	movw	r16, r6
    353e:	0e 94 83 18 	call	0x3106	; 0x3106 <clockHasElapsedGetOverflow>
    3542:	88 23       	and	r24, r24
    3544:	b9 f3       	breq	.-18     	; 0x3534 <scheduleJob+0xca>
    3546:	c8 0c       	add	r12, r8
    3548:	d9 1c       	adc	r13, r9
    354a:	ea 1c       	adc	r14, r10
    354c:	fb 1c       	adc	r15, r11
    354e:	09 81       	ldd	r16, Y+1	; 0x01
    3550:	1a 81       	ldd	r17, Y+2	; 0x02
    3552:	2b 81       	ldd	r18, Y+3	; 0x03
    3554:	3c 81       	ldd	r19, Y+4	; 0x04
    3556:	c2 01       	movw	r24, r4
    3558:	b7 01       	movw	r22, r14
    355a:	a6 01       	movw	r20, r12
    355c:	f1 01       	movw	r30, r2
    355e:	09 95       	icall
    3560:	06 c0       	rjmp	.+12     	; 0x356e <scheduleJob+0x104>
    3562:	80 91 1a 10 	lds	r24, 0x101A
    3566:	88 23       	and	r24, r24
    3568:	11 f4       	brne	.+4      	; 0x356e <scheduleJob+0x104>
    356a:	0e 94 32 19 	call	0x3264	; 0x3264 <__scheduleUpdate>
    356e:	0f 90       	pop	r0
    3570:	0f 90       	pop	r0
    3572:	0f 90       	pop	r0
    3574:	0f 90       	pop	r0
    3576:	cf 91       	pop	r28
    3578:	df 91       	pop	r29
    357a:	1f 91       	pop	r17
    357c:	0f 91       	pop	r16
    357e:	ff 90       	pop	r15
    3580:	ef 90       	pop	r14
    3582:	df 90       	pop	r13
    3584:	cf 90       	pop	r12
    3586:	bf 90       	pop	r11
    3588:	af 90       	pop	r10
    358a:	9f 90       	pop	r9
    358c:	8f 90       	pop	r8
    358e:	7f 90       	pop	r7
    3590:	6f 90       	pop	r6
    3592:	5f 90       	pop	r5
    3594:	4f 90       	pop	r4
    3596:	3f 90       	pop	r3
    3598:	2f 90       	pop	r2
    359a:	08 95       	ret

0000359c <vfprintf>:
    359c:	ab e0       	ldi	r26, 0x0B	; 11
    359e:	b0 e0       	ldi	r27, 0x00	; 0
    35a0:	e4 ed       	ldi	r30, 0xD4	; 212
    35a2:	fa e1       	ldi	r31, 0x1A	; 26
    35a4:	0c 94 6f 22 	jmp	0x44de	; 0x44de <__prologue_saves__+0x8>
    35a8:	5c 01       	movw	r10, r24
    35aa:	4b 01       	movw	r8, r22
    35ac:	7a 01       	movw	r14, r20
    35ae:	fc 01       	movw	r30, r24
    35b0:	17 82       	std	Z+7, r1	; 0x07
    35b2:	16 82       	std	Z+6, r1	; 0x06
    35b4:	83 81       	ldd	r24, Z+3	; 0x03
    35b6:	81 fd       	sbrc	r24, 1
    35b8:	08 c0       	rjmp	.+16     	; 0x35ca <vfprintf+0x2e>
    35ba:	6f ef       	ldi	r22, 0xFF	; 255
    35bc:	7f ef       	ldi	r23, 0xFF	; 255
    35be:	08 c1       	rjmp	.+528    	; 0x37d0 <vfprintf+0x234>
    35c0:	42 e0       	ldi	r20, 0x02	; 2
    35c2:	50 e0       	ldi	r21, 0x00	; 0
    35c4:	e4 0e       	add	r14, r20
    35c6:	f5 1e       	adc	r15, r21
    35c8:	04 c0       	rjmp	.+8      	; 0x35d2 <vfprintf+0x36>
    35ca:	3e 01       	movw	r6, r28
    35cc:	08 94       	sec
    35ce:	61 1c       	adc	r6, r1
    35d0:	71 1c       	adc	r7, r1
    35d2:	f5 01       	movw	r30, r10
    35d4:	d3 80       	ldd	r13, Z+3	; 0x03
    35d6:	f4 01       	movw	r30, r8
    35d8:	d3 fc       	sbrc	r13, 3
    35da:	85 91       	lpm	r24, Z+
    35dc:	d3 fe       	sbrs	r13, 3
    35de:	81 91       	ld	r24, Z+
    35e0:	4f 01       	movw	r8, r30
    35e2:	88 23       	and	r24, r24
    35e4:	09 f4       	brne	.+2      	; 0x35e8 <vfprintf+0x4c>
    35e6:	f1 c0       	rjmp	.+482    	; 0x37ca <vfprintf+0x22e>
    35e8:	85 32       	cpi	r24, 0x25	; 37
    35ea:	59 f4       	brne	.+22     	; 0x3602 <vfprintf+0x66>
    35ec:	d3 fc       	sbrc	r13, 3
    35ee:	65 91       	lpm	r22, Z+
    35f0:	d3 fe       	sbrs	r13, 3
    35f2:	61 91       	ld	r22, Z+
    35f4:	4f 01       	movw	r8, r30
    35f6:	65 32       	cpi	r22, 0x25	; 37
    35f8:	19 f0       	breq	.+6      	; 0x3600 <vfprintf+0x64>
    35fa:	06 2f       	mov	r16, r22
    35fc:	10 e0       	ldi	r17, 0x00	; 0
    35fe:	1b c0       	rjmp	.+54     	; 0x3636 <vfprintf+0x9a>
    3600:	85 e2       	ldi	r24, 0x25	; 37
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	2b c0       	rjmp	.+86     	; 0x365c <vfprintf+0xc0>
    3606:	00 23       	and	r16, r16
    3608:	09 f4       	brne	.+2      	; 0x360c <vfprintf+0x70>
    360a:	df c0       	rjmp	.+446    	; 0x37ca <vfprintf+0x22e>
    360c:	8b ee       	ldi	r24, 0xEB	; 235
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	60 2f       	mov	r22, r16
    3612:	70 e0       	ldi	r23, 0x00	; 0
    3614:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <strchr_P>
    3618:	89 2b       	or	r24, r25
    361a:	39 f4       	brne	.+14     	; 0x362a <vfprintf+0x8e>
    361c:	03 32       	cpi	r16, 0x23	; 35
    361e:	11 f4       	brne	.+4      	; 0x3624 <vfprintf+0x88>
    3620:	10 61       	ori	r17, 0x10	; 16
    3622:	03 c0       	rjmp	.+6      	; 0x362a <vfprintf+0x8e>
    3624:	0c 36       	cpi	r16, 0x6C	; 108
    3626:	61 f4       	brne	.+24     	; 0x3640 <vfprintf+0xa4>
    3628:	10 68       	ori	r17, 0x80	; 128
    362a:	f4 01       	movw	r30, r8
    362c:	d3 fc       	sbrc	r13, 3
    362e:	05 91       	lpm	r16, Z+
    3630:	d3 fe       	sbrs	r13, 3
    3632:	01 91       	ld	r16, Z+
    3634:	4f 01       	movw	r8, r30
    3636:	17 ff       	sbrs	r17, 7
    3638:	e6 cf       	rjmp	.-52     	; 0x3606 <vfprintf+0x6a>
    363a:	00 23       	and	r16, r16
    363c:	09 f4       	brne	.+2      	; 0x3640 <vfprintf+0xa4>
    363e:	c5 c0       	rjmp	.+394    	; 0x37ca <vfprintf+0x22e>
    3640:	84 ee       	ldi	r24, 0xE4	; 228
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	60 2f       	mov	r22, r16
    3646:	70 e0       	ldi	r23, 0x00	; 0
    3648:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <strchr_P>
    364c:	89 2b       	or	r24, r25
    364e:	51 f0       	breq	.+20     	; 0x3664 <vfprintf+0xc8>
    3650:	44 e0       	ldi	r20, 0x04	; 4
    3652:	50 e0       	ldi	r21, 0x00	; 0
    3654:	e4 0e       	add	r14, r20
    3656:	f5 1e       	adc	r15, r21
    3658:	8f e3       	ldi	r24, 0x3F	; 63
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	b5 01       	movw	r22, r10
    365e:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <fputc>
    3662:	b7 cf       	rjmp	.-146    	; 0x35d2 <vfprintf+0x36>
    3664:	03 36       	cpi	r16, 0x63	; 99
    3666:	29 f0       	breq	.+10     	; 0x3672 <vfprintf+0xd6>
    3668:	03 37       	cpi	r16, 0x73	; 115
    366a:	79 f0       	breq	.+30     	; 0x368a <vfprintf+0xee>
    366c:	03 35       	cpi	r16, 0x53	; 83
    366e:	f1 f4       	brne	.+60     	; 0x36ac <vfprintf+0x110>
    3670:	0b c0       	rjmp	.+22     	; 0x3688 <vfprintf+0xec>
    3672:	87 01       	movw	r16, r14
    3674:	0e 5f       	subi	r16, 0xFE	; 254
    3676:	1f 4f       	sbci	r17, 0xFF	; 255
    3678:	f7 01       	movw	r30, r14
    367a:	80 81       	ld	r24, Z
    367c:	91 81       	ldd	r25, Z+1	; 0x01
    367e:	b5 01       	movw	r22, r10
    3680:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <fputc>
    3684:	78 01       	movw	r14, r16
    3686:	a5 cf       	rjmp	.-182    	; 0x35d2 <vfprintf+0x36>
    3688:	11 60       	ori	r17, 0x01	; 1
    368a:	f7 01       	movw	r30, r14
    368c:	c0 80       	ld	r12, Z
    368e:	d1 80       	ldd	r13, Z+1	; 0x01
    3690:	04 c0       	rjmp	.+8      	; 0x369a <vfprintf+0xfe>
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	b5 01       	movw	r22, r10
    3696:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <fputc>
    369a:	f6 01       	movw	r30, r12
    369c:	10 fd       	sbrc	r17, 0
    369e:	85 91       	lpm	r24, Z+
    36a0:	10 ff       	sbrs	r17, 0
    36a2:	81 91       	ld	r24, Z+
    36a4:	6f 01       	movw	r12, r30
    36a6:	88 23       	and	r24, r24
    36a8:	a1 f7       	brne	.-24     	; 0x3692 <vfprintf+0xf6>
    36aa:	8a cf       	rjmp	.-236    	; 0x35c0 <vfprintf+0x24>
    36ac:	04 36       	cpi	r16, 0x64	; 100
    36ae:	11 f0       	breq	.+4      	; 0x36b4 <vfprintf+0x118>
    36b0:	09 36       	cpi	r16, 0x69	; 105
    36b2:	39 f5       	brne	.+78     	; 0x3702 <vfprintf+0x166>
    36b4:	17 ff       	sbrs	r17, 7
    36b6:	08 c0       	rjmp	.+16     	; 0x36c8 <vfprintf+0x12c>
    36b8:	f7 01       	movw	r30, r14
    36ba:	20 81       	ld	r18, Z
    36bc:	31 81       	ldd	r19, Z+1	; 0x01
    36be:	42 81       	ldd	r20, Z+2	; 0x02
    36c0:	53 81       	ldd	r21, Z+3	; 0x03
    36c2:	84 e0       	ldi	r24, 0x04	; 4
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	0a c0       	rjmp	.+20     	; 0x36dc <vfprintf+0x140>
    36c8:	f7 01       	movw	r30, r14
    36ca:	80 81       	ld	r24, Z
    36cc:	91 81       	ldd	r25, Z+1	; 0x01
    36ce:	9c 01       	movw	r18, r24
    36d0:	44 27       	eor	r20, r20
    36d2:	37 fd       	sbrc	r19, 7
    36d4:	40 95       	com	r20
    36d6:	54 2f       	mov	r21, r20
    36d8:	82 e0       	ldi	r24, 0x02	; 2
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	e8 0e       	add	r14, r24
    36de:	f9 1e       	adc	r15, r25
    36e0:	1f 7e       	andi	r17, 0xEF	; 239
    36e2:	57 ff       	sbrs	r21, 7
    36e4:	08 c0       	rjmp	.+16     	; 0x36f6 <vfprintf+0x15a>
    36e6:	50 95       	com	r21
    36e8:	40 95       	com	r20
    36ea:	30 95       	com	r19
    36ec:	21 95       	neg	r18
    36ee:	3f 4f       	sbci	r19, 0xFF	; 255
    36f0:	4f 4f       	sbci	r20, 0xFF	; 255
    36f2:	5f 4f       	sbci	r21, 0xFF	; 255
    36f4:	10 64       	ori	r17, 0x40	; 64
    36f6:	ca 01       	movw	r24, r20
    36f8:	b9 01       	movw	r22, r18
    36fa:	a3 01       	movw	r20, r6
    36fc:	2a e0       	ldi	r18, 0x0A	; 10
    36fe:	30 e0       	ldi	r19, 0x00	; 0
    3700:	34 c0       	rjmp	.+104    	; 0x376a <vfprintf+0x1ce>
    3702:	00 37       	cpi	r16, 0x70	; 112
    3704:	a9 f0       	breq	.+42     	; 0x3730 <vfprintf+0x194>
    3706:	01 37       	cpi	r16, 0x71	; 113
    3708:	30 f4       	brcc	.+12     	; 0x3716 <vfprintf+0x17a>
    370a:	08 35       	cpi	r16, 0x58	; 88
    370c:	b1 f0       	breq	.+44     	; 0x373a <vfprintf+0x19e>
    370e:	0f 36       	cpi	r16, 0x6F	; 111
    3710:	09 f0       	breq	.+2      	; 0x3714 <vfprintf+0x178>
    3712:	5b c0       	rjmp	.+182    	; 0x37ca <vfprintf+0x22e>
    3714:	06 c0       	rjmp	.+12     	; 0x3722 <vfprintf+0x186>
    3716:	05 37       	cpi	r16, 0x75	; 117
    3718:	39 f0       	breq	.+14     	; 0x3728 <vfprintf+0x18c>
    371a:	08 37       	cpi	r16, 0x78	; 120
    371c:	09 f0       	breq	.+2      	; 0x3720 <vfprintf+0x184>
    371e:	55 c0       	rjmp	.+170    	; 0x37ca <vfprintf+0x22e>
    3720:	08 c0       	rjmp	.+16     	; 0x3732 <vfprintf+0x196>
    3722:	28 e0       	ldi	r18, 0x08	; 8
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	0c c0       	rjmp	.+24     	; 0x3740 <vfprintf+0x1a4>
    3728:	1f 7e       	andi	r17, 0xEF	; 239
    372a:	2a e0       	ldi	r18, 0x0A	; 10
    372c:	30 e0       	ldi	r19, 0x00	; 0
    372e:	08 c0       	rjmp	.+16     	; 0x3740 <vfprintf+0x1a4>
    3730:	10 61       	ori	r17, 0x10	; 16
    3732:	14 62       	ori	r17, 0x24	; 36
    3734:	20 e1       	ldi	r18, 0x10	; 16
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	03 c0       	rjmp	.+6      	; 0x3740 <vfprintf+0x1a4>
    373a:	14 60       	ori	r17, 0x04	; 4
    373c:	20 e1       	ldi	r18, 0x10	; 16
    373e:	32 e0       	ldi	r19, 0x02	; 2
    3740:	17 ff       	sbrs	r17, 7
    3742:	08 c0       	rjmp	.+16     	; 0x3754 <vfprintf+0x1b8>
    3744:	f7 01       	movw	r30, r14
    3746:	60 81       	ld	r22, Z
    3748:	71 81       	ldd	r23, Z+1	; 0x01
    374a:	82 81       	ldd	r24, Z+2	; 0x02
    374c:	93 81       	ldd	r25, Z+3	; 0x03
    374e:	44 e0       	ldi	r20, 0x04	; 4
    3750:	50 e0       	ldi	r21, 0x00	; 0
    3752:	08 c0       	rjmp	.+16     	; 0x3764 <vfprintf+0x1c8>
    3754:	f7 01       	movw	r30, r14
    3756:	80 81       	ld	r24, Z
    3758:	91 81       	ldd	r25, Z+1	; 0x01
    375a:	bc 01       	movw	r22, r24
    375c:	80 e0       	ldi	r24, 0x00	; 0
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	42 e0       	ldi	r20, 0x02	; 2
    3762:	50 e0       	ldi	r21, 0x00	; 0
    3764:	e4 0e       	add	r14, r20
    3766:	f5 1e       	adc	r15, r21
    3768:	a3 01       	movw	r20, r6
    376a:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <__ultoa_invert>
    376e:	d8 2e       	mov	r13, r24
    3770:	d6 18       	sub	r13, r6
    3772:	01 2f       	mov	r16, r17
    3774:	10 e0       	ldi	r17, 0x00	; 0
    3776:	06 ff       	sbrs	r16, 6
    3778:	05 c0       	rjmp	.+10     	; 0x3784 <vfprintf+0x1e8>
    377a:	8d e2       	ldi	r24, 0x2D	; 45
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	b5 01       	movw	r22, r10
    3780:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <fputc>
    3784:	04 ff       	sbrs	r16, 4
    3786:	15 c0       	rjmp	.+42     	; 0x37b2 <vfprintf+0x216>
    3788:	fe 01       	movw	r30, r28
    378a:	ed 0d       	add	r30, r13
    378c:	f1 1d       	adc	r31, r1
    378e:	80 81       	ld	r24, Z
    3790:	80 33       	cpi	r24, 0x30	; 48
    3792:	79 f0       	breq	.+30     	; 0x37b2 <vfprintf+0x216>
    3794:	80 e3       	ldi	r24, 0x30	; 48
    3796:	90 e0       	ldi	r25, 0x00	; 0
    3798:	b5 01       	movw	r22, r10
    379a:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <fputc>
    379e:	02 ff       	sbrs	r16, 2
    37a0:	08 c0       	rjmp	.+16     	; 0x37b2 <vfprintf+0x216>
    37a2:	00 72       	andi	r16, 0x20	; 32
    37a4:	10 70       	andi	r17, 0x00	; 0
    37a6:	c8 01       	movw	r24, r16
    37a8:	88 5a       	subi	r24, 0xA8	; 168
    37aa:	9f 4f       	sbci	r25, 0xFF	; 255
    37ac:	b5 01       	movw	r22, r10
    37ae:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <fputc>
    37b2:	da 94       	dec	r13
    37b4:	f3 01       	movw	r30, r6
    37b6:	ed 0d       	add	r30, r13
    37b8:	f1 1d       	adc	r31, r1
    37ba:	80 81       	ld	r24, Z
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	b5 01       	movw	r22, r10
    37c0:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <fputc>
    37c4:	dd 20       	and	r13, r13
    37c6:	a9 f7       	brne	.-22     	; 0x37b2 <vfprintf+0x216>
    37c8:	04 cf       	rjmp	.-504    	; 0x35d2 <vfprintf+0x36>
    37ca:	f5 01       	movw	r30, r10
    37cc:	66 81       	ldd	r22, Z+6	; 0x06
    37ce:	77 81       	ldd	r23, Z+7	; 0x07
    37d0:	cb 01       	movw	r24, r22
    37d2:	2b 96       	adiw	r28, 0x0b	; 11
    37d4:	ee e0       	ldi	r30, 0x0E	; 14
    37d6:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__epilogue_restores__+0x8>

000037da <__subsf3>:
    37da:	50 58       	subi	r21, 0x80	; 128

000037dc <__addsf3>:
    37dc:	bb 27       	eor	r27, r27
    37de:	aa 27       	eor	r26, r26
    37e0:	0e d0       	rcall	.+28     	; 0x37fe <__addsf3x>
    37e2:	e5 c0       	rjmp	.+458    	; 0x39ae <__fp_round>
    37e4:	d6 d0       	rcall	.+428    	; 0x3992 <__fp_pscA>
    37e6:	30 f0       	brcs	.+12     	; 0x37f4 <__addsf3+0x18>
    37e8:	db d0       	rcall	.+438    	; 0x39a0 <__fp_pscB>
    37ea:	20 f0       	brcs	.+8      	; 0x37f4 <__addsf3+0x18>
    37ec:	31 f4       	brne	.+12     	; 0x37fa <__addsf3+0x1e>
    37ee:	9f 3f       	cpi	r25, 0xFF	; 255
    37f0:	11 f4       	brne	.+4      	; 0x37f6 <__addsf3+0x1a>
    37f2:	1e f4       	brtc	.+6      	; 0x37fa <__addsf3+0x1e>
    37f4:	cb c0       	rjmp	.+406    	; 0x398c <__fp_nan>
    37f6:	0e f4       	brtc	.+2      	; 0x37fa <__addsf3+0x1e>
    37f8:	e0 95       	com	r30
    37fa:	e7 fb       	bst	r30, 7
    37fc:	c1 c0       	rjmp	.+386    	; 0x3980 <__fp_inf>

000037fe <__addsf3x>:
    37fe:	e9 2f       	mov	r30, r25
    3800:	e7 d0       	rcall	.+462    	; 0x39d0 <__fp_split3>
    3802:	80 f3       	brcs	.-32     	; 0x37e4 <__addsf3+0x8>
    3804:	ba 17       	cp	r27, r26
    3806:	62 07       	cpc	r22, r18
    3808:	73 07       	cpc	r23, r19
    380a:	84 07       	cpc	r24, r20
    380c:	95 07       	cpc	r25, r21
    380e:	18 f0       	brcs	.+6      	; 0x3816 <__addsf3x+0x18>
    3810:	71 f4       	brne	.+28     	; 0x382e <__addsf3x+0x30>
    3812:	9e f5       	brtc	.+102    	; 0x387a <__addsf3x+0x7c>
    3814:	ff c0       	rjmp	.+510    	; 0x3a14 <__fp_zero>
    3816:	0e f4       	brtc	.+2      	; 0x381a <__addsf3x+0x1c>
    3818:	e0 95       	com	r30
    381a:	0b 2e       	mov	r0, r27
    381c:	ba 2f       	mov	r27, r26
    381e:	a0 2d       	mov	r26, r0
    3820:	0b 01       	movw	r0, r22
    3822:	b9 01       	movw	r22, r18
    3824:	90 01       	movw	r18, r0
    3826:	0c 01       	movw	r0, r24
    3828:	ca 01       	movw	r24, r20
    382a:	a0 01       	movw	r20, r0
    382c:	11 24       	eor	r1, r1
    382e:	ff 27       	eor	r31, r31
    3830:	59 1b       	sub	r21, r25
    3832:	99 f0       	breq	.+38     	; 0x385a <__addsf3x+0x5c>
    3834:	59 3f       	cpi	r21, 0xF9	; 249
    3836:	50 f4       	brcc	.+20     	; 0x384c <__addsf3x+0x4e>
    3838:	50 3e       	cpi	r21, 0xE0	; 224
    383a:	68 f1       	brcs	.+90     	; 0x3896 <__addsf3x+0x98>
    383c:	1a 16       	cp	r1, r26
    383e:	f0 40       	sbci	r31, 0x00	; 0
    3840:	a2 2f       	mov	r26, r18
    3842:	23 2f       	mov	r18, r19
    3844:	34 2f       	mov	r19, r20
    3846:	44 27       	eor	r20, r20
    3848:	58 5f       	subi	r21, 0xF8	; 248
    384a:	f3 cf       	rjmp	.-26     	; 0x3832 <__addsf3x+0x34>
    384c:	46 95       	lsr	r20
    384e:	37 95       	ror	r19
    3850:	27 95       	ror	r18
    3852:	a7 95       	ror	r26
    3854:	f0 40       	sbci	r31, 0x00	; 0
    3856:	53 95       	inc	r21
    3858:	c9 f7       	brne	.-14     	; 0x384c <__addsf3x+0x4e>
    385a:	7e f4       	brtc	.+30     	; 0x387a <__addsf3x+0x7c>
    385c:	1f 16       	cp	r1, r31
    385e:	ba 0b       	sbc	r27, r26
    3860:	62 0b       	sbc	r22, r18
    3862:	73 0b       	sbc	r23, r19
    3864:	84 0b       	sbc	r24, r20
    3866:	ba f0       	brmi	.+46     	; 0x3896 <__addsf3x+0x98>
    3868:	91 50       	subi	r25, 0x01	; 1
    386a:	a1 f0       	breq	.+40     	; 0x3894 <__addsf3x+0x96>
    386c:	ff 0f       	add	r31, r31
    386e:	bb 1f       	adc	r27, r27
    3870:	66 1f       	adc	r22, r22
    3872:	77 1f       	adc	r23, r23
    3874:	88 1f       	adc	r24, r24
    3876:	c2 f7       	brpl	.-16     	; 0x3868 <__addsf3x+0x6a>
    3878:	0e c0       	rjmp	.+28     	; 0x3896 <__addsf3x+0x98>
    387a:	ba 0f       	add	r27, r26
    387c:	62 1f       	adc	r22, r18
    387e:	73 1f       	adc	r23, r19
    3880:	84 1f       	adc	r24, r20
    3882:	48 f4       	brcc	.+18     	; 0x3896 <__addsf3x+0x98>
    3884:	87 95       	ror	r24
    3886:	77 95       	ror	r23
    3888:	67 95       	ror	r22
    388a:	b7 95       	ror	r27
    388c:	f7 95       	ror	r31
    388e:	9e 3f       	cpi	r25, 0xFE	; 254
    3890:	08 f0       	brcs	.+2      	; 0x3894 <__addsf3x+0x96>
    3892:	b3 cf       	rjmp	.-154    	; 0x37fa <__addsf3+0x1e>
    3894:	93 95       	inc	r25
    3896:	88 0f       	add	r24, r24
    3898:	08 f0       	brcs	.+2      	; 0x389c <__addsf3x+0x9e>
    389a:	99 27       	eor	r25, r25
    389c:	ee 0f       	add	r30, r30
    389e:	97 95       	ror	r25
    38a0:	87 95       	ror	r24
    38a2:	08 95       	ret

000038a4 <__fixsfsi>:
    38a4:	04 d0       	rcall	.+8      	; 0x38ae <__fixunssfsi>
    38a6:	68 94       	set
    38a8:	b1 11       	cpse	r27, r1
    38aa:	b5 c0       	rjmp	.+362    	; 0x3a16 <__fp_szero>
    38ac:	08 95       	ret

000038ae <__fixunssfsi>:
    38ae:	98 d0       	rcall	.+304    	; 0x39e0 <__fp_splitA>
    38b0:	88 f0       	brcs	.+34     	; 0x38d4 <__fixunssfsi+0x26>
    38b2:	9f 57       	subi	r25, 0x7F	; 127
    38b4:	90 f0       	brcs	.+36     	; 0x38da <__fixunssfsi+0x2c>
    38b6:	b9 2f       	mov	r27, r25
    38b8:	99 27       	eor	r25, r25
    38ba:	b7 51       	subi	r27, 0x17	; 23
    38bc:	a0 f0       	brcs	.+40     	; 0x38e6 <__fixunssfsi+0x38>
    38be:	d1 f0       	breq	.+52     	; 0x38f4 <__fixunssfsi+0x46>
    38c0:	66 0f       	add	r22, r22
    38c2:	77 1f       	adc	r23, r23
    38c4:	88 1f       	adc	r24, r24
    38c6:	99 1f       	adc	r25, r25
    38c8:	1a f0       	brmi	.+6      	; 0x38d0 <__fixunssfsi+0x22>
    38ca:	ba 95       	dec	r27
    38cc:	c9 f7       	brne	.-14     	; 0x38c0 <__fixunssfsi+0x12>
    38ce:	12 c0       	rjmp	.+36     	; 0x38f4 <__fixunssfsi+0x46>
    38d0:	b1 30       	cpi	r27, 0x01	; 1
    38d2:	81 f0       	breq	.+32     	; 0x38f4 <__fixunssfsi+0x46>
    38d4:	9f d0       	rcall	.+318    	; 0x3a14 <__fp_zero>
    38d6:	b1 e0       	ldi	r27, 0x01	; 1
    38d8:	08 95       	ret
    38da:	9c c0       	rjmp	.+312    	; 0x3a14 <__fp_zero>
    38dc:	67 2f       	mov	r22, r23
    38de:	78 2f       	mov	r23, r24
    38e0:	88 27       	eor	r24, r24
    38e2:	b8 5f       	subi	r27, 0xF8	; 248
    38e4:	39 f0       	breq	.+14     	; 0x38f4 <__fixunssfsi+0x46>
    38e6:	b9 3f       	cpi	r27, 0xF9	; 249
    38e8:	cc f3       	brlt	.-14     	; 0x38dc <__fixunssfsi+0x2e>
    38ea:	86 95       	lsr	r24
    38ec:	77 95       	ror	r23
    38ee:	67 95       	ror	r22
    38f0:	b3 95       	inc	r27
    38f2:	d9 f7       	brne	.-10     	; 0x38ea <__fixunssfsi+0x3c>
    38f4:	3e f4       	brtc	.+14     	; 0x3904 <__fixunssfsi+0x56>
    38f6:	90 95       	com	r25
    38f8:	80 95       	com	r24
    38fa:	70 95       	com	r23
    38fc:	61 95       	neg	r22
    38fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3900:	8f 4f       	sbci	r24, 0xFF	; 255
    3902:	9f 4f       	sbci	r25, 0xFF	; 255
    3904:	08 95       	ret

00003906 <__floatunsisf>:
    3906:	e8 94       	clt
    3908:	09 c0       	rjmp	.+18     	; 0x391c <__floatsisf+0x12>

0000390a <__floatsisf>:
    390a:	97 fb       	bst	r25, 7
    390c:	3e f4       	brtc	.+14     	; 0x391c <__floatsisf+0x12>
    390e:	90 95       	com	r25
    3910:	80 95       	com	r24
    3912:	70 95       	com	r23
    3914:	61 95       	neg	r22
    3916:	7f 4f       	sbci	r23, 0xFF	; 255
    3918:	8f 4f       	sbci	r24, 0xFF	; 255
    391a:	9f 4f       	sbci	r25, 0xFF	; 255
    391c:	99 23       	and	r25, r25
    391e:	a9 f0       	breq	.+42     	; 0x394a <__floatsisf+0x40>
    3920:	f9 2f       	mov	r31, r25
    3922:	96 e9       	ldi	r25, 0x96	; 150
    3924:	bb 27       	eor	r27, r27
    3926:	93 95       	inc	r25
    3928:	f6 95       	lsr	r31
    392a:	87 95       	ror	r24
    392c:	77 95       	ror	r23
    392e:	67 95       	ror	r22
    3930:	b7 95       	ror	r27
    3932:	f1 11       	cpse	r31, r1
    3934:	f8 cf       	rjmp	.-16     	; 0x3926 <__floatsisf+0x1c>
    3936:	fa f4       	brpl	.+62     	; 0x3976 <__floatsisf+0x6c>
    3938:	bb 0f       	add	r27, r27
    393a:	11 f4       	brne	.+4      	; 0x3940 <__floatsisf+0x36>
    393c:	60 ff       	sbrs	r22, 0
    393e:	1b c0       	rjmp	.+54     	; 0x3976 <__floatsisf+0x6c>
    3940:	6f 5f       	subi	r22, 0xFF	; 255
    3942:	7f 4f       	sbci	r23, 0xFF	; 255
    3944:	8f 4f       	sbci	r24, 0xFF	; 255
    3946:	9f 4f       	sbci	r25, 0xFF	; 255
    3948:	16 c0       	rjmp	.+44     	; 0x3976 <__floatsisf+0x6c>
    394a:	88 23       	and	r24, r24
    394c:	11 f0       	breq	.+4      	; 0x3952 <__floatsisf+0x48>
    394e:	96 e9       	ldi	r25, 0x96	; 150
    3950:	11 c0       	rjmp	.+34     	; 0x3974 <__floatsisf+0x6a>
    3952:	77 23       	and	r23, r23
    3954:	21 f0       	breq	.+8      	; 0x395e <__floatsisf+0x54>
    3956:	9e e8       	ldi	r25, 0x8E	; 142
    3958:	87 2f       	mov	r24, r23
    395a:	76 2f       	mov	r23, r22
    395c:	05 c0       	rjmp	.+10     	; 0x3968 <__floatsisf+0x5e>
    395e:	66 23       	and	r22, r22
    3960:	71 f0       	breq	.+28     	; 0x397e <__floatsisf+0x74>
    3962:	96 e8       	ldi	r25, 0x86	; 134
    3964:	86 2f       	mov	r24, r22
    3966:	70 e0       	ldi	r23, 0x00	; 0
    3968:	60 e0       	ldi	r22, 0x00	; 0
    396a:	2a f0       	brmi	.+10     	; 0x3976 <__floatsisf+0x6c>
    396c:	9a 95       	dec	r25
    396e:	66 0f       	add	r22, r22
    3970:	77 1f       	adc	r23, r23
    3972:	88 1f       	adc	r24, r24
    3974:	da f7       	brpl	.-10     	; 0x396c <__floatsisf+0x62>
    3976:	88 0f       	add	r24, r24
    3978:	96 95       	lsr	r25
    397a:	87 95       	ror	r24
    397c:	97 f9       	bld	r25, 7
    397e:	08 95       	ret

00003980 <__fp_inf>:
    3980:	97 f9       	bld	r25, 7
    3982:	9f 67       	ori	r25, 0x7F	; 127
    3984:	80 e8       	ldi	r24, 0x80	; 128
    3986:	70 e0       	ldi	r23, 0x00	; 0
    3988:	60 e0       	ldi	r22, 0x00	; 0
    398a:	08 95       	ret

0000398c <__fp_nan>:
    398c:	9f ef       	ldi	r25, 0xFF	; 255
    398e:	80 ec       	ldi	r24, 0xC0	; 192
    3990:	08 95       	ret

00003992 <__fp_pscA>:
    3992:	00 24       	eor	r0, r0
    3994:	0a 94       	dec	r0
    3996:	16 16       	cp	r1, r22
    3998:	17 06       	cpc	r1, r23
    399a:	18 06       	cpc	r1, r24
    399c:	09 06       	cpc	r0, r25
    399e:	08 95       	ret

000039a0 <__fp_pscB>:
    39a0:	00 24       	eor	r0, r0
    39a2:	0a 94       	dec	r0
    39a4:	12 16       	cp	r1, r18
    39a6:	13 06       	cpc	r1, r19
    39a8:	14 06       	cpc	r1, r20
    39aa:	05 06       	cpc	r0, r21
    39ac:	08 95       	ret

000039ae <__fp_round>:
    39ae:	09 2e       	mov	r0, r25
    39b0:	03 94       	inc	r0
    39b2:	00 0c       	add	r0, r0
    39b4:	11 f4       	brne	.+4      	; 0x39ba <__fp_round+0xc>
    39b6:	88 23       	and	r24, r24
    39b8:	52 f0       	brmi	.+20     	; 0x39ce <__fp_round+0x20>
    39ba:	bb 0f       	add	r27, r27
    39bc:	40 f4       	brcc	.+16     	; 0x39ce <__fp_round+0x20>
    39be:	bf 2b       	or	r27, r31
    39c0:	11 f4       	brne	.+4      	; 0x39c6 <__fp_round+0x18>
    39c2:	60 ff       	sbrs	r22, 0
    39c4:	04 c0       	rjmp	.+8      	; 0x39ce <__fp_round+0x20>
    39c6:	6f 5f       	subi	r22, 0xFF	; 255
    39c8:	7f 4f       	sbci	r23, 0xFF	; 255
    39ca:	8f 4f       	sbci	r24, 0xFF	; 255
    39cc:	9f 4f       	sbci	r25, 0xFF	; 255
    39ce:	08 95       	ret

000039d0 <__fp_split3>:
    39d0:	57 fd       	sbrc	r21, 7
    39d2:	90 58       	subi	r25, 0x80	; 128
    39d4:	44 0f       	add	r20, r20
    39d6:	55 1f       	adc	r21, r21
    39d8:	59 f0       	breq	.+22     	; 0x39f0 <__fp_splitA+0x10>
    39da:	5f 3f       	cpi	r21, 0xFF	; 255
    39dc:	71 f0       	breq	.+28     	; 0x39fa <__fp_splitA+0x1a>
    39de:	47 95       	ror	r20

000039e0 <__fp_splitA>:
    39e0:	88 0f       	add	r24, r24
    39e2:	97 fb       	bst	r25, 7
    39e4:	99 1f       	adc	r25, r25
    39e6:	61 f0       	breq	.+24     	; 0x3a00 <__fp_splitA+0x20>
    39e8:	9f 3f       	cpi	r25, 0xFF	; 255
    39ea:	79 f0       	breq	.+30     	; 0x3a0a <__fp_splitA+0x2a>
    39ec:	87 95       	ror	r24
    39ee:	08 95       	ret
    39f0:	12 16       	cp	r1, r18
    39f2:	13 06       	cpc	r1, r19
    39f4:	14 06       	cpc	r1, r20
    39f6:	55 1f       	adc	r21, r21
    39f8:	f2 cf       	rjmp	.-28     	; 0x39de <__fp_split3+0xe>
    39fa:	46 95       	lsr	r20
    39fc:	f1 df       	rcall	.-30     	; 0x39e0 <__fp_splitA>
    39fe:	08 c0       	rjmp	.+16     	; 0x3a10 <__fp_splitA+0x30>
    3a00:	16 16       	cp	r1, r22
    3a02:	17 06       	cpc	r1, r23
    3a04:	18 06       	cpc	r1, r24
    3a06:	99 1f       	adc	r25, r25
    3a08:	f1 cf       	rjmp	.-30     	; 0x39ec <__fp_splitA+0xc>
    3a0a:	86 95       	lsr	r24
    3a0c:	71 05       	cpc	r23, r1
    3a0e:	61 05       	cpc	r22, r1
    3a10:	08 94       	sec
    3a12:	08 95       	ret

00003a14 <__fp_zero>:
    3a14:	e8 94       	clt

00003a16 <__fp_szero>:
    3a16:	bb 27       	eor	r27, r27
    3a18:	66 27       	eor	r22, r22
    3a1a:	77 27       	eor	r23, r23
    3a1c:	cb 01       	movw	r24, r22
    3a1e:	97 f9       	bld	r25, 7
    3a20:	08 95       	ret

00003a22 <__mulsf3>:
    3a22:	0b d0       	rcall	.+22     	; 0x3a3a <__mulsf3x>
    3a24:	c4 cf       	rjmp	.-120    	; 0x39ae <__fp_round>
    3a26:	b5 df       	rcall	.-150    	; 0x3992 <__fp_pscA>
    3a28:	28 f0       	brcs	.+10     	; 0x3a34 <__mulsf3+0x12>
    3a2a:	ba df       	rcall	.-140    	; 0x39a0 <__fp_pscB>
    3a2c:	18 f0       	brcs	.+6      	; 0x3a34 <__mulsf3+0x12>
    3a2e:	95 23       	and	r25, r21
    3a30:	09 f0       	breq	.+2      	; 0x3a34 <__mulsf3+0x12>
    3a32:	a6 cf       	rjmp	.-180    	; 0x3980 <__fp_inf>
    3a34:	ab cf       	rjmp	.-170    	; 0x398c <__fp_nan>
    3a36:	11 24       	eor	r1, r1
    3a38:	ee cf       	rjmp	.-36     	; 0x3a16 <__fp_szero>

00003a3a <__mulsf3x>:
    3a3a:	ca df       	rcall	.-108    	; 0x39d0 <__fp_split3>
    3a3c:	a0 f3       	brcs	.-24     	; 0x3a26 <__mulsf3+0x4>

00003a3e <__mulsf3_pse>:
    3a3e:	95 9f       	mul	r25, r21
    3a40:	d1 f3       	breq	.-12     	; 0x3a36 <__mulsf3+0x14>
    3a42:	95 0f       	add	r25, r21
    3a44:	50 e0       	ldi	r21, 0x00	; 0
    3a46:	55 1f       	adc	r21, r21
    3a48:	62 9f       	mul	r22, r18
    3a4a:	f0 01       	movw	r30, r0
    3a4c:	72 9f       	mul	r23, r18
    3a4e:	bb 27       	eor	r27, r27
    3a50:	f0 0d       	add	r31, r0
    3a52:	b1 1d       	adc	r27, r1
    3a54:	63 9f       	mul	r22, r19
    3a56:	aa 27       	eor	r26, r26
    3a58:	f0 0d       	add	r31, r0
    3a5a:	b1 1d       	adc	r27, r1
    3a5c:	aa 1f       	adc	r26, r26
    3a5e:	64 9f       	mul	r22, r20
    3a60:	66 27       	eor	r22, r22
    3a62:	b0 0d       	add	r27, r0
    3a64:	a1 1d       	adc	r26, r1
    3a66:	66 1f       	adc	r22, r22
    3a68:	82 9f       	mul	r24, r18
    3a6a:	22 27       	eor	r18, r18
    3a6c:	b0 0d       	add	r27, r0
    3a6e:	a1 1d       	adc	r26, r1
    3a70:	62 1f       	adc	r22, r18
    3a72:	73 9f       	mul	r23, r19
    3a74:	b0 0d       	add	r27, r0
    3a76:	a1 1d       	adc	r26, r1
    3a78:	62 1f       	adc	r22, r18
    3a7a:	83 9f       	mul	r24, r19
    3a7c:	a0 0d       	add	r26, r0
    3a7e:	61 1d       	adc	r22, r1
    3a80:	22 1f       	adc	r18, r18
    3a82:	74 9f       	mul	r23, r20
    3a84:	33 27       	eor	r19, r19
    3a86:	a0 0d       	add	r26, r0
    3a88:	61 1d       	adc	r22, r1
    3a8a:	23 1f       	adc	r18, r19
    3a8c:	84 9f       	mul	r24, r20
    3a8e:	60 0d       	add	r22, r0
    3a90:	21 1d       	adc	r18, r1
    3a92:	82 2f       	mov	r24, r18
    3a94:	76 2f       	mov	r23, r22
    3a96:	6a 2f       	mov	r22, r26
    3a98:	11 24       	eor	r1, r1
    3a9a:	9f 57       	subi	r25, 0x7F	; 127
    3a9c:	50 40       	sbci	r21, 0x00	; 0
    3a9e:	8a f0       	brmi	.+34     	; 0x3ac2 <__mulsf3_pse+0x84>
    3aa0:	e1 f0       	breq	.+56     	; 0x3ada <__mulsf3_pse+0x9c>
    3aa2:	88 23       	and	r24, r24
    3aa4:	4a f0       	brmi	.+18     	; 0x3ab8 <__mulsf3_pse+0x7a>
    3aa6:	ee 0f       	add	r30, r30
    3aa8:	ff 1f       	adc	r31, r31
    3aaa:	bb 1f       	adc	r27, r27
    3aac:	66 1f       	adc	r22, r22
    3aae:	77 1f       	adc	r23, r23
    3ab0:	88 1f       	adc	r24, r24
    3ab2:	91 50       	subi	r25, 0x01	; 1
    3ab4:	50 40       	sbci	r21, 0x00	; 0
    3ab6:	a9 f7       	brne	.-22     	; 0x3aa2 <__mulsf3_pse+0x64>
    3ab8:	9e 3f       	cpi	r25, 0xFE	; 254
    3aba:	51 05       	cpc	r21, r1
    3abc:	70 f0       	brcs	.+28     	; 0x3ada <__mulsf3_pse+0x9c>
    3abe:	60 cf       	rjmp	.-320    	; 0x3980 <__fp_inf>
    3ac0:	aa cf       	rjmp	.-172    	; 0x3a16 <__fp_szero>
    3ac2:	5f 3f       	cpi	r21, 0xFF	; 255
    3ac4:	ec f3       	brlt	.-6      	; 0x3ac0 <__mulsf3_pse+0x82>
    3ac6:	98 3e       	cpi	r25, 0xE8	; 232
    3ac8:	dc f3       	brlt	.-10     	; 0x3ac0 <__mulsf3_pse+0x82>
    3aca:	86 95       	lsr	r24
    3acc:	77 95       	ror	r23
    3ace:	67 95       	ror	r22
    3ad0:	b7 95       	ror	r27
    3ad2:	f7 95       	ror	r31
    3ad4:	e7 95       	ror	r30
    3ad6:	9f 5f       	subi	r25, 0xFF	; 255
    3ad8:	c1 f7       	brne	.-16     	; 0x3aca <__mulsf3_pse+0x8c>
    3ada:	fe 2b       	or	r31, r30
    3adc:	88 0f       	add	r24, r24
    3ade:	91 1d       	adc	r25, r1
    3ae0:	96 95       	lsr	r25
    3ae2:	87 95       	ror	r24
    3ae4:	97 f9       	bld	r25, 7
    3ae6:	08 95       	ret

00003ae8 <dtostrf>:
    3ae8:	ef 92       	push	r14
    3aea:	ff 92       	push	r15
    3aec:	0f 93       	push	r16
    3aee:	1f 93       	push	r17
    3af0:	f2 2f       	mov	r31, r18
    3af2:	f0 2e       	mov	r15, r16
    3af4:	47 fd       	sbrc	r20, 7
    3af6:	02 c0       	rjmp	.+4      	; 0x3afc <dtostrf+0x14>
    3af8:	e4 e0       	ldi	r30, 0x04	; 4
    3afa:	01 c0       	rjmp	.+2      	; 0x3afe <dtostrf+0x16>
    3afc:	e4 e1       	ldi	r30, 0x14	; 20
    3afe:	24 2f       	mov	r18, r20
    3b00:	33 27       	eor	r19, r19
    3b02:	27 fd       	sbrc	r18, 7
    3b04:	30 95       	com	r19
    3b06:	37 ff       	sbrs	r19, 7
    3b08:	03 c0       	rjmp	.+6      	; 0x3b10 <dtostrf+0x28>
    3b0a:	30 95       	com	r19
    3b0c:	21 95       	neg	r18
    3b0e:	3f 4f       	sbci	r19, 0xFF	; 255
    3b10:	4f 2d       	mov	r20, r15
    3b12:	51 2f       	mov	r21, r17
    3b14:	0f 2f       	mov	r16, r31
    3b16:	ee 2e       	mov	r14, r30
    3b18:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <dtoa_prf>
    3b1c:	8f 2d       	mov	r24, r15
    3b1e:	91 2f       	mov	r25, r17
    3b20:	1f 91       	pop	r17
    3b22:	0f 91       	pop	r16
    3b24:	ff 90       	pop	r15
    3b26:	ef 90       	pop	r14
    3b28:	08 95       	ret

00003b2a <malloc>:
    3b2a:	cf 93       	push	r28
    3b2c:	df 93       	push	r29
    3b2e:	bc 01       	movw	r22, r24
    3b30:	82 30       	cpi	r24, 0x02	; 2
    3b32:	91 05       	cpc	r25, r1
    3b34:	10 f4       	brcc	.+4      	; 0x3b3a <malloc+0x10>
    3b36:	62 e0       	ldi	r22, 0x02	; 2
    3b38:	70 e0       	ldi	r23, 0x00	; 0
    3b3a:	a0 91 28 10 	lds	r26, 0x1028
    3b3e:	b0 91 29 10 	lds	r27, 0x1029
    3b42:	ed 01       	movw	r28, r26
    3b44:	e0 e0       	ldi	r30, 0x00	; 0
    3b46:	f0 e0       	ldi	r31, 0x00	; 0
    3b48:	40 e0       	ldi	r20, 0x00	; 0
    3b4a:	50 e0       	ldi	r21, 0x00	; 0
    3b4c:	21 c0       	rjmp	.+66     	; 0x3b90 <malloc+0x66>
    3b4e:	88 81       	ld	r24, Y
    3b50:	99 81       	ldd	r25, Y+1	; 0x01
    3b52:	86 17       	cp	r24, r22
    3b54:	97 07       	cpc	r25, r23
    3b56:	69 f4       	brne	.+26     	; 0x3b72 <malloc+0x48>
    3b58:	8a 81       	ldd	r24, Y+2	; 0x02
    3b5a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b5c:	30 97       	sbiw	r30, 0x00	; 0
    3b5e:	19 f0       	breq	.+6      	; 0x3b66 <malloc+0x3c>
    3b60:	93 83       	std	Z+3, r25	; 0x03
    3b62:	82 83       	std	Z+2, r24	; 0x02
    3b64:	04 c0       	rjmp	.+8      	; 0x3b6e <malloc+0x44>
    3b66:	90 93 29 10 	sts	0x1029, r25
    3b6a:	80 93 28 10 	sts	0x1028, r24
    3b6e:	fe 01       	movw	r30, r28
    3b70:	34 c0       	rjmp	.+104    	; 0x3bda <malloc+0xb0>
    3b72:	68 17       	cp	r22, r24
    3b74:	79 07       	cpc	r23, r25
    3b76:	38 f4       	brcc	.+14     	; 0x3b86 <malloc+0x5c>
    3b78:	41 15       	cp	r20, r1
    3b7a:	51 05       	cpc	r21, r1
    3b7c:	19 f0       	breq	.+6      	; 0x3b84 <malloc+0x5a>
    3b7e:	84 17       	cp	r24, r20
    3b80:	95 07       	cpc	r25, r21
    3b82:	08 f4       	brcc	.+2      	; 0x3b86 <malloc+0x5c>
    3b84:	ac 01       	movw	r20, r24
    3b86:	fe 01       	movw	r30, r28
    3b88:	8a 81       	ldd	r24, Y+2	; 0x02
    3b8a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b8c:	9c 01       	movw	r18, r24
    3b8e:	e9 01       	movw	r28, r18
    3b90:	20 97       	sbiw	r28, 0x00	; 0
    3b92:	e9 f6       	brne	.-70     	; 0x3b4e <malloc+0x24>
    3b94:	41 15       	cp	r20, r1
    3b96:	51 05       	cpc	r21, r1
    3b98:	a9 f1       	breq	.+106    	; 0x3c04 <malloc+0xda>
    3b9a:	ca 01       	movw	r24, r20
    3b9c:	86 1b       	sub	r24, r22
    3b9e:	97 0b       	sbc	r25, r23
    3ba0:	04 97       	sbiw	r24, 0x04	; 4
    3ba2:	08 f4       	brcc	.+2      	; 0x3ba6 <malloc+0x7c>
    3ba4:	ba 01       	movw	r22, r20
    3ba6:	e0 e0       	ldi	r30, 0x00	; 0
    3ba8:	f0 e0       	ldi	r31, 0x00	; 0
    3baa:	2a c0       	rjmp	.+84     	; 0x3c00 <malloc+0xd6>
    3bac:	8d 91       	ld	r24, X+
    3bae:	9c 91       	ld	r25, X
    3bb0:	11 97       	sbiw	r26, 0x01	; 1
    3bb2:	84 17       	cp	r24, r20
    3bb4:	95 07       	cpc	r25, r21
    3bb6:	f9 f4       	brne	.+62     	; 0x3bf6 <malloc+0xcc>
    3bb8:	64 17       	cp	r22, r20
    3bba:	75 07       	cpc	r23, r21
    3bbc:	81 f4       	brne	.+32     	; 0x3bde <malloc+0xb4>
    3bbe:	12 96       	adiw	r26, 0x02	; 2
    3bc0:	8d 91       	ld	r24, X+
    3bc2:	9c 91       	ld	r25, X
    3bc4:	13 97       	sbiw	r26, 0x03	; 3
    3bc6:	30 97       	sbiw	r30, 0x00	; 0
    3bc8:	19 f0       	breq	.+6      	; 0x3bd0 <malloc+0xa6>
    3bca:	93 83       	std	Z+3, r25	; 0x03
    3bcc:	82 83       	std	Z+2, r24	; 0x02
    3bce:	04 c0       	rjmp	.+8      	; 0x3bd8 <malloc+0xae>
    3bd0:	90 93 29 10 	sts	0x1029, r25
    3bd4:	80 93 28 10 	sts	0x1028, r24
    3bd8:	fd 01       	movw	r30, r26
    3bda:	32 96       	adiw	r30, 0x02	; 2
    3bdc:	4f c0       	rjmp	.+158    	; 0x3c7c <malloc+0x152>
    3bde:	ca 01       	movw	r24, r20
    3be0:	86 1b       	sub	r24, r22
    3be2:	97 0b       	sbc	r25, r23
    3be4:	fd 01       	movw	r30, r26
    3be6:	e8 0f       	add	r30, r24
    3be8:	f9 1f       	adc	r31, r25
    3bea:	61 93       	st	Z+, r22
    3bec:	71 93       	st	Z+, r23
    3bee:	02 97       	sbiw	r24, 0x02	; 2
    3bf0:	8d 93       	st	X+, r24
    3bf2:	9c 93       	st	X, r25
    3bf4:	43 c0       	rjmp	.+134    	; 0x3c7c <malloc+0x152>
    3bf6:	fd 01       	movw	r30, r26
    3bf8:	82 81       	ldd	r24, Z+2	; 0x02
    3bfa:	93 81       	ldd	r25, Z+3	; 0x03
    3bfc:	9c 01       	movw	r18, r24
    3bfe:	d9 01       	movw	r26, r18
    3c00:	10 97       	sbiw	r26, 0x00	; 0
    3c02:	a1 f6       	brne	.-88     	; 0x3bac <malloc+0x82>
    3c04:	80 91 26 10 	lds	r24, 0x1026
    3c08:	90 91 27 10 	lds	r25, 0x1027
    3c0c:	89 2b       	or	r24, r25
    3c0e:	41 f4       	brne	.+16     	; 0x3c20 <malloc+0xf6>
    3c10:	80 91 9a 05 	lds	r24, 0x059A
    3c14:	90 91 9b 05 	lds	r25, 0x059B
    3c18:	90 93 27 10 	sts	0x1027, r25
    3c1c:	80 93 26 10 	sts	0x1026, r24
    3c20:	40 91 9c 05 	lds	r20, 0x059C
    3c24:	50 91 9d 05 	lds	r21, 0x059D
    3c28:	41 15       	cp	r20, r1
    3c2a:	51 05       	cpc	r21, r1
    3c2c:	41 f4       	brne	.+16     	; 0x3c3e <malloc+0x114>
    3c2e:	4d b7       	in	r20, 0x3d	; 61
    3c30:	5e b7       	in	r21, 0x3e	; 62
    3c32:	80 91 98 05 	lds	r24, 0x0598
    3c36:	90 91 99 05 	lds	r25, 0x0599
    3c3a:	48 1b       	sub	r20, r24
    3c3c:	59 0b       	sbc	r21, r25
    3c3e:	20 91 26 10 	lds	r18, 0x1026
    3c42:	30 91 27 10 	lds	r19, 0x1027
    3c46:	24 17       	cp	r18, r20
    3c48:	35 07       	cpc	r19, r21
    3c4a:	b0 f4       	brcc	.+44     	; 0x3c78 <malloc+0x14e>
    3c4c:	ca 01       	movw	r24, r20
    3c4e:	82 1b       	sub	r24, r18
    3c50:	93 0b       	sbc	r25, r19
    3c52:	86 17       	cp	r24, r22
    3c54:	97 07       	cpc	r25, r23
    3c56:	80 f0       	brcs	.+32     	; 0x3c78 <malloc+0x14e>
    3c58:	ab 01       	movw	r20, r22
    3c5a:	4e 5f       	subi	r20, 0xFE	; 254
    3c5c:	5f 4f       	sbci	r21, 0xFF	; 255
    3c5e:	84 17       	cp	r24, r20
    3c60:	95 07       	cpc	r25, r21
    3c62:	50 f0       	brcs	.+20     	; 0x3c78 <malloc+0x14e>
    3c64:	42 0f       	add	r20, r18
    3c66:	53 1f       	adc	r21, r19
    3c68:	50 93 27 10 	sts	0x1027, r21
    3c6c:	40 93 26 10 	sts	0x1026, r20
    3c70:	f9 01       	movw	r30, r18
    3c72:	61 93       	st	Z+, r22
    3c74:	71 93       	st	Z+, r23
    3c76:	02 c0       	rjmp	.+4      	; 0x3c7c <malloc+0x152>
    3c78:	e0 e0       	ldi	r30, 0x00	; 0
    3c7a:	f0 e0       	ldi	r31, 0x00	; 0
    3c7c:	cf 01       	movw	r24, r30
    3c7e:	df 91       	pop	r29
    3c80:	cf 91       	pop	r28
    3c82:	08 95       	ret

00003c84 <free>:
    3c84:	cf 93       	push	r28
    3c86:	df 93       	push	r29
    3c88:	00 97       	sbiw	r24, 0x00	; 0
    3c8a:	09 f4       	brne	.+2      	; 0x3c8e <free+0xa>
    3c8c:	50 c0       	rjmp	.+160    	; 0x3d2e <free+0xaa>
    3c8e:	ec 01       	movw	r28, r24
    3c90:	22 97       	sbiw	r28, 0x02	; 2
    3c92:	1b 82       	std	Y+3, r1	; 0x03
    3c94:	1a 82       	std	Y+2, r1	; 0x02
    3c96:	a0 91 28 10 	lds	r26, 0x1028
    3c9a:	b0 91 29 10 	lds	r27, 0x1029
    3c9e:	10 97       	sbiw	r26, 0x00	; 0
    3ca0:	09 f1       	breq	.+66     	; 0x3ce4 <free+0x60>
    3ca2:	40 e0       	ldi	r20, 0x00	; 0
    3ca4:	50 e0       	ldi	r21, 0x00	; 0
    3ca6:	ac 17       	cp	r26, r28
    3ca8:	bd 07       	cpc	r27, r29
    3caa:	08 f1       	brcs	.+66     	; 0x3cee <free+0x6a>
    3cac:	bb 83       	std	Y+3, r27	; 0x03
    3cae:	aa 83       	std	Y+2, r26	; 0x02
    3cb0:	fe 01       	movw	r30, r28
    3cb2:	21 91       	ld	r18, Z+
    3cb4:	31 91       	ld	r19, Z+
    3cb6:	e2 0f       	add	r30, r18
    3cb8:	f3 1f       	adc	r31, r19
    3cba:	ae 17       	cp	r26, r30
    3cbc:	bf 07       	cpc	r27, r31
    3cbe:	79 f4       	brne	.+30     	; 0x3cde <free+0x5a>
    3cc0:	8d 91       	ld	r24, X+
    3cc2:	9c 91       	ld	r25, X
    3cc4:	11 97       	sbiw	r26, 0x01	; 1
    3cc6:	28 0f       	add	r18, r24
    3cc8:	39 1f       	adc	r19, r25
    3cca:	2e 5f       	subi	r18, 0xFE	; 254
    3ccc:	3f 4f       	sbci	r19, 0xFF	; 255
    3cce:	39 83       	std	Y+1, r19	; 0x01
    3cd0:	28 83       	st	Y, r18
    3cd2:	12 96       	adiw	r26, 0x02	; 2
    3cd4:	8d 91       	ld	r24, X+
    3cd6:	9c 91       	ld	r25, X
    3cd8:	13 97       	sbiw	r26, 0x03	; 3
    3cda:	9b 83       	std	Y+3, r25	; 0x03
    3cdc:	8a 83       	std	Y+2, r24	; 0x02
    3cde:	41 15       	cp	r20, r1
    3ce0:	51 05       	cpc	r21, r1
    3ce2:	71 f4       	brne	.+28     	; 0x3d00 <free+0x7c>
    3ce4:	d0 93 29 10 	sts	0x1029, r29
    3ce8:	c0 93 28 10 	sts	0x1028, r28
    3cec:	20 c0       	rjmp	.+64     	; 0x3d2e <free+0xaa>
    3cee:	12 96       	adiw	r26, 0x02	; 2
    3cf0:	8d 91       	ld	r24, X+
    3cf2:	9c 91       	ld	r25, X
    3cf4:	13 97       	sbiw	r26, 0x03	; 3
    3cf6:	ad 01       	movw	r20, r26
    3cf8:	00 97       	sbiw	r24, 0x00	; 0
    3cfa:	11 f0       	breq	.+4      	; 0x3d00 <free+0x7c>
    3cfc:	dc 01       	movw	r26, r24
    3cfe:	d3 cf       	rjmp	.-90     	; 0x3ca6 <free+0x22>
    3d00:	fa 01       	movw	r30, r20
    3d02:	d3 83       	std	Z+3, r29	; 0x03
    3d04:	c2 83       	std	Z+2, r28	; 0x02
    3d06:	21 91       	ld	r18, Z+
    3d08:	31 91       	ld	r19, Z+
    3d0a:	e2 0f       	add	r30, r18
    3d0c:	f3 1f       	adc	r31, r19
    3d0e:	ce 17       	cp	r28, r30
    3d10:	df 07       	cpc	r29, r31
    3d12:	69 f4       	brne	.+26     	; 0x3d2e <free+0xaa>
    3d14:	88 81       	ld	r24, Y
    3d16:	99 81       	ldd	r25, Y+1	; 0x01
    3d18:	28 0f       	add	r18, r24
    3d1a:	39 1f       	adc	r19, r25
    3d1c:	2e 5f       	subi	r18, 0xFE	; 254
    3d1e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d20:	fa 01       	movw	r30, r20
    3d22:	31 83       	std	Z+1, r19	; 0x01
    3d24:	20 83       	st	Z, r18
    3d26:	8a 81       	ldd	r24, Y+2	; 0x02
    3d28:	9b 81       	ldd	r25, Y+3	; 0x03
    3d2a:	93 83       	std	Z+3, r25	; 0x03
    3d2c:	82 83       	std	Z+2, r24	; 0x02
    3d2e:	df 91       	pop	r29
    3d30:	cf 91       	pop	r28
    3d32:	08 95       	ret

00003d34 <exit>:
    3d34:	f8 94       	cli
    3d36:	0c 94 a8 22 	jmp	0x4550	; 0x4550 <_exit>

00003d3a <strchr_P>:
    3d3a:	fc 01       	movw	r30, r24
    3d3c:	05 90       	lpm	r0, Z+
    3d3e:	06 16       	cp	r0, r22
    3d40:	21 f0       	breq	.+8      	; 0x3d4a <strchr_P+0x10>
    3d42:	00 20       	and	r0, r0
    3d44:	d9 f7       	brne	.-10     	; 0x3d3c <strchr_P+0x2>
    3d46:	c0 01       	movw	r24, r0
    3d48:	08 95       	ret
    3d4a:	31 97       	sbiw	r30, 0x01	; 1
    3d4c:	cf 01       	movw	r24, r30
    3d4e:	08 95       	ret

00003d50 <memcpy>:
    3d50:	fb 01       	movw	r30, r22
    3d52:	dc 01       	movw	r26, r24
    3d54:	02 c0       	rjmp	.+4      	; 0x3d5a <memcpy+0xa>
    3d56:	01 90       	ld	r0, Z+
    3d58:	0d 92       	st	X+, r0
    3d5a:	41 50       	subi	r20, 0x01	; 1
    3d5c:	50 40       	sbci	r21, 0x00	; 0
    3d5e:	d8 f7       	brcc	.-10     	; 0x3d56 <memcpy+0x6>
    3d60:	08 95       	ret

00003d62 <ltoa>:
    3d62:	fa 01       	movw	r30, r20
    3d64:	cf 93       	push	r28
    3d66:	ff 93       	push	r31
    3d68:	ef 93       	push	r30
    3d6a:	22 30       	cpi	r18, 0x02	; 2
    3d6c:	44 f1       	brlt	.+80     	; 0x3dbe <ltoa+0x5c>
    3d6e:	25 32       	cpi	r18, 0x25	; 37
    3d70:	34 f5       	brge	.+76     	; 0x3dbe <ltoa+0x5c>
    3d72:	c2 2f       	mov	r28, r18
    3d74:	e8 94       	clt
    3d76:	ca 30       	cpi	r28, 0x0A	; 10
    3d78:	49 f4       	brne	.+18     	; 0x3d8c <ltoa+0x2a>
    3d7a:	97 fb       	bst	r25, 7
    3d7c:	3e f4       	brtc	.+14     	; 0x3d8c <ltoa+0x2a>
    3d7e:	90 95       	com	r25
    3d80:	80 95       	com	r24
    3d82:	70 95       	com	r23
    3d84:	61 95       	neg	r22
    3d86:	7f 4f       	sbci	r23, 0xFF	; 255
    3d88:	8f 4f       	sbci	r24, 0xFF	; 255
    3d8a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d8c:	2c 2f       	mov	r18, r28
    3d8e:	33 27       	eor	r19, r19
    3d90:	44 27       	eor	r20, r20
    3d92:	55 27       	eor	r21, r21
    3d94:	ff 93       	push	r31
    3d96:	ef 93       	push	r30
    3d98:	0e 94 2e 22 	call	0x445c	; 0x445c <__udivmodsi4>
    3d9c:	ef 91       	pop	r30
    3d9e:	ff 91       	pop	r31
    3da0:	60 5d       	subi	r22, 0xD0	; 208
    3da2:	6a 33       	cpi	r22, 0x3A	; 58
    3da4:	0c f0       	brlt	.+2      	; 0x3da8 <ltoa+0x46>
    3da6:	69 5d       	subi	r22, 0xD9	; 217
    3da8:	61 93       	st	Z+, r22
    3daa:	b9 01       	movw	r22, r18
    3dac:	ca 01       	movw	r24, r20
    3dae:	60 50       	subi	r22, 0x00	; 0
    3db0:	70 40       	sbci	r23, 0x00	; 0
    3db2:	80 40       	sbci	r24, 0x00	; 0
    3db4:	90 40       	sbci	r25, 0x00	; 0
    3db6:	51 f7       	brne	.-44     	; 0x3d8c <ltoa+0x2a>
    3db8:	16 f4       	brtc	.+4      	; 0x3dbe <ltoa+0x5c>
    3dba:	cd e2       	ldi	r28, 0x2D	; 45
    3dbc:	c1 93       	st	Z+, r28
    3dbe:	10 82       	st	Z, r1
    3dc0:	8f 91       	pop	r24
    3dc2:	9f 91       	pop	r25
    3dc4:	cf 91       	pop	r28
    3dc6:	0c 94 eb 21 	jmp	0x43d6	; 0x43d6 <strrev>

00003dca <ultoa>:
    3dca:	fa 01       	movw	r30, r20
    3dcc:	cf 93       	push	r28
    3dce:	ff 93       	push	r31
    3dd0:	ef 93       	push	r30
    3dd2:	22 30       	cpi	r18, 0x02	; 2
    3dd4:	cc f0       	brlt	.+50     	; 0x3e08 <ultoa+0x3e>
    3dd6:	25 32       	cpi	r18, 0x25	; 37
    3dd8:	bc f4       	brge	.+46     	; 0x3e08 <ultoa+0x3e>
    3dda:	c2 2f       	mov	r28, r18
    3ddc:	2c 2f       	mov	r18, r28
    3dde:	33 27       	eor	r19, r19
    3de0:	44 27       	eor	r20, r20
    3de2:	55 27       	eor	r21, r21
    3de4:	ff 93       	push	r31
    3de6:	ef 93       	push	r30
    3de8:	0e 94 2e 22 	call	0x445c	; 0x445c <__udivmodsi4>
    3dec:	ef 91       	pop	r30
    3dee:	ff 91       	pop	r31
    3df0:	60 5d       	subi	r22, 0xD0	; 208
    3df2:	6a 33       	cpi	r22, 0x3A	; 58
    3df4:	0c f0       	brlt	.+2      	; 0x3df8 <ultoa+0x2e>
    3df6:	69 5d       	subi	r22, 0xD9	; 217
    3df8:	61 93       	st	Z+, r22
    3dfa:	b9 01       	movw	r22, r18
    3dfc:	ca 01       	movw	r24, r20
    3dfe:	60 50       	subi	r22, 0x00	; 0
    3e00:	70 40       	sbci	r23, 0x00	; 0
    3e02:	80 40       	sbci	r24, 0x00	; 0
    3e04:	90 40       	sbci	r25, 0x00	; 0
    3e06:	51 f7       	brne	.-44     	; 0x3ddc <ultoa+0x12>
    3e08:	10 82       	st	Z, r1
    3e0a:	8f 91       	pop	r24
    3e0c:	9f 91       	pop	r25
    3e0e:	cf 91       	pop	r28
    3e10:	0c 94 eb 21 	jmp	0x43d6	; 0x43d6 <strrev>

00003e14 <fprintf_P>:
    3e14:	a0 e0       	ldi	r26, 0x00	; 0
    3e16:	b0 e0       	ldi	r27, 0x00	; 0
    3e18:	e0 e1       	ldi	r30, 0x10	; 16
    3e1a:	ff e1       	ldi	r31, 0x1F	; 31
    3e1c:	0c 94 79 22 	jmp	0x44f2	; 0x44f2 <__prologue_saves__+0x1c>
    3e20:	0f 81       	ldd	r16, Y+7	; 0x07
    3e22:	18 85       	ldd	r17, Y+8	; 0x08
    3e24:	9e 01       	movw	r18, r28
    3e26:	25 5f       	subi	r18, 0xF5	; 245
    3e28:	3f 4f       	sbci	r19, 0xFF	; 255
    3e2a:	f8 01       	movw	r30, r16
    3e2c:	83 81       	ldd	r24, Z+3	; 0x03
    3e2e:	88 60       	ori	r24, 0x08	; 8
    3e30:	83 83       	std	Z+3, r24	; 0x03
    3e32:	c8 01       	movw	r24, r16
    3e34:	69 85       	ldd	r22, Y+9	; 0x09
    3e36:	7a 85       	ldd	r23, Y+10	; 0x0a
    3e38:	a9 01       	movw	r20, r18
    3e3a:	0e 94 ce 1a 	call	0x359c	; 0x359c <vfprintf>
    3e3e:	f8 01       	movw	r30, r16
    3e40:	23 81       	ldd	r18, Z+3	; 0x03
    3e42:	27 7f       	andi	r18, 0xF7	; 247
    3e44:	23 83       	std	Z+3, r18	; 0x03
    3e46:	20 96       	adiw	r28, 0x00	; 0
    3e48:	e4 e0       	ldi	r30, 0x04	; 4
    3e4a:	0c 94 95 22 	jmp	0x452a	; 0x452a <__epilogue_restores__+0x1c>

00003e4e <fputc>:
    3e4e:	0f 93       	push	r16
    3e50:	1f 93       	push	r17
    3e52:	cf 93       	push	r28
    3e54:	df 93       	push	r29
    3e56:	8c 01       	movw	r16, r24
    3e58:	eb 01       	movw	r28, r22
    3e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e5c:	81 ff       	sbrs	r24, 1
    3e5e:	1b c0       	rjmp	.+54     	; 0x3e96 <fputc+0x48>
    3e60:	82 ff       	sbrs	r24, 2
    3e62:	0d c0       	rjmp	.+26     	; 0x3e7e <fputc+0x30>
    3e64:	2e 81       	ldd	r18, Y+6	; 0x06
    3e66:	3f 81       	ldd	r19, Y+7	; 0x07
    3e68:	8c 81       	ldd	r24, Y+4	; 0x04
    3e6a:	9d 81       	ldd	r25, Y+5	; 0x05
    3e6c:	28 17       	cp	r18, r24
    3e6e:	39 07       	cpc	r19, r25
    3e70:	64 f4       	brge	.+24     	; 0x3e8a <fputc+0x3c>
    3e72:	e8 81       	ld	r30, Y
    3e74:	f9 81       	ldd	r31, Y+1	; 0x01
    3e76:	01 93       	st	Z+, r16
    3e78:	f9 83       	std	Y+1, r31	; 0x01
    3e7a:	e8 83       	st	Y, r30
    3e7c:	06 c0       	rjmp	.+12     	; 0x3e8a <fputc+0x3c>
    3e7e:	e8 85       	ldd	r30, Y+8	; 0x08
    3e80:	f9 85       	ldd	r31, Y+9	; 0x09
    3e82:	80 2f       	mov	r24, r16
    3e84:	09 95       	icall
    3e86:	89 2b       	or	r24, r25
    3e88:	31 f4       	brne	.+12     	; 0x3e96 <fputc+0x48>
    3e8a:	8e 81       	ldd	r24, Y+6	; 0x06
    3e8c:	9f 81       	ldd	r25, Y+7	; 0x07
    3e8e:	01 96       	adiw	r24, 0x01	; 1
    3e90:	9f 83       	std	Y+7, r25	; 0x07
    3e92:	8e 83       	std	Y+6, r24	; 0x06
    3e94:	02 c0       	rjmp	.+4      	; 0x3e9a <fputc+0x4c>
    3e96:	0f ef       	ldi	r16, 0xFF	; 255
    3e98:	1f ef       	ldi	r17, 0xFF	; 255
    3e9a:	c8 01       	movw	r24, r16
    3e9c:	df 91       	pop	r29
    3e9e:	cf 91       	pop	r28
    3ea0:	1f 91       	pop	r17
    3ea2:	0f 91       	pop	r16
    3ea4:	08 95       	ret

00003ea6 <__ultoa_invert>:
    3ea6:	fa 01       	movw	r30, r20
    3ea8:	aa 27       	eor	r26, r26
    3eaa:	28 30       	cpi	r18, 0x08	; 8
    3eac:	51 f1       	breq	.+84     	; 0x3f02 <__ultoa_invert+0x5c>
    3eae:	20 31       	cpi	r18, 0x10	; 16
    3eb0:	81 f1       	breq	.+96     	; 0x3f12 <__ultoa_invert+0x6c>
    3eb2:	e8 94       	clt
    3eb4:	6f 93       	push	r22
    3eb6:	6e 7f       	andi	r22, 0xFE	; 254
    3eb8:	6e 5f       	subi	r22, 0xFE	; 254
    3eba:	7f 4f       	sbci	r23, 0xFF	; 255
    3ebc:	8f 4f       	sbci	r24, 0xFF	; 255
    3ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    3ec0:	af 4f       	sbci	r26, 0xFF	; 255
    3ec2:	b1 e0       	ldi	r27, 0x01	; 1
    3ec4:	3e d0       	rcall	.+124    	; 0x3f42 <__ultoa_invert+0x9c>
    3ec6:	b4 e0       	ldi	r27, 0x04	; 4
    3ec8:	3c d0       	rcall	.+120    	; 0x3f42 <__ultoa_invert+0x9c>
    3eca:	67 0f       	add	r22, r23
    3ecc:	78 1f       	adc	r23, r24
    3ece:	89 1f       	adc	r24, r25
    3ed0:	9a 1f       	adc	r25, r26
    3ed2:	a1 1d       	adc	r26, r1
    3ed4:	68 0f       	add	r22, r24
    3ed6:	79 1f       	adc	r23, r25
    3ed8:	8a 1f       	adc	r24, r26
    3eda:	91 1d       	adc	r25, r1
    3edc:	a1 1d       	adc	r26, r1
    3ede:	6a 0f       	add	r22, r26
    3ee0:	71 1d       	adc	r23, r1
    3ee2:	81 1d       	adc	r24, r1
    3ee4:	91 1d       	adc	r25, r1
    3ee6:	a1 1d       	adc	r26, r1
    3ee8:	20 d0       	rcall	.+64     	; 0x3f2a <__ultoa_invert+0x84>
    3eea:	09 f4       	brne	.+2      	; 0x3eee <__ultoa_invert+0x48>
    3eec:	68 94       	set
    3eee:	3f 91       	pop	r19
    3ef0:	2a e0       	ldi	r18, 0x0A	; 10
    3ef2:	26 9f       	mul	r18, r22
    3ef4:	11 24       	eor	r1, r1
    3ef6:	30 19       	sub	r19, r0
    3ef8:	30 5d       	subi	r19, 0xD0	; 208
    3efa:	31 93       	st	Z+, r19
    3efc:	de f6       	brtc	.-74     	; 0x3eb4 <__ultoa_invert+0xe>
    3efe:	cf 01       	movw	r24, r30
    3f00:	08 95       	ret
    3f02:	46 2f       	mov	r20, r22
    3f04:	47 70       	andi	r20, 0x07	; 7
    3f06:	40 5d       	subi	r20, 0xD0	; 208
    3f08:	41 93       	st	Z+, r20
    3f0a:	b3 e0       	ldi	r27, 0x03	; 3
    3f0c:	0f d0       	rcall	.+30     	; 0x3f2c <__ultoa_invert+0x86>
    3f0e:	c9 f7       	brne	.-14     	; 0x3f02 <__ultoa_invert+0x5c>
    3f10:	f6 cf       	rjmp	.-20     	; 0x3efe <__ultoa_invert+0x58>
    3f12:	46 2f       	mov	r20, r22
    3f14:	4f 70       	andi	r20, 0x0F	; 15
    3f16:	40 5d       	subi	r20, 0xD0	; 208
    3f18:	4a 33       	cpi	r20, 0x3A	; 58
    3f1a:	18 f0       	brcs	.+6      	; 0x3f22 <__ultoa_invert+0x7c>
    3f1c:	49 5d       	subi	r20, 0xD9	; 217
    3f1e:	31 fd       	sbrc	r19, 1
    3f20:	40 52       	subi	r20, 0x20	; 32
    3f22:	41 93       	st	Z+, r20
    3f24:	02 d0       	rcall	.+4      	; 0x3f2a <__ultoa_invert+0x84>
    3f26:	a9 f7       	brne	.-22     	; 0x3f12 <__ultoa_invert+0x6c>
    3f28:	ea cf       	rjmp	.-44     	; 0x3efe <__ultoa_invert+0x58>
    3f2a:	b4 e0       	ldi	r27, 0x04	; 4
    3f2c:	a6 95       	lsr	r26
    3f2e:	97 95       	ror	r25
    3f30:	87 95       	ror	r24
    3f32:	77 95       	ror	r23
    3f34:	67 95       	ror	r22
    3f36:	ba 95       	dec	r27
    3f38:	c9 f7       	brne	.-14     	; 0x3f2c <__ultoa_invert+0x86>
    3f3a:	00 97       	sbiw	r24, 0x00	; 0
    3f3c:	61 05       	cpc	r22, r1
    3f3e:	71 05       	cpc	r23, r1
    3f40:	08 95       	ret
    3f42:	9b 01       	movw	r18, r22
    3f44:	ac 01       	movw	r20, r24
    3f46:	0a 2e       	mov	r0, r26
    3f48:	06 94       	lsr	r0
    3f4a:	57 95       	ror	r21
    3f4c:	47 95       	ror	r20
    3f4e:	37 95       	ror	r19
    3f50:	27 95       	ror	r18
    3f52:	ba 95       	dec	r27
    3f54:	c9 f7       	brne	.-14     	; 0x3f48 <__ultoa_invert+0xa2>
    3f56:	62 0f       	add	r22, r18
    3f58:	73 1f       	adc	r23, r19
    3f5a:	84 1f       	adc	r24, r20
    3f5c:	95 1f       	adc	r25, r21
    3f5e:	a0 1d       	adc	r26, r0
    3f60:	08 95       	ret

00003f62 <dtoa_prf>:
    3f62:	a9 e0       	ldi	r26, 0x09	; 9
    3f64:	b0 e0       	ldi	r27, 0x00	; 0
    3f66:	e7 eb       	ldi	r30, 0xB7	; 183
    3f68:	ff e1       	ldi	r31, 0x1F	; 31
    3f6a:	0c 94 6f 22 	jmp	0x44de	; 0x44de <__prologue_saves__+0x8>
    3f6e:	6a 01       	movw	r12, r20
    3f70:	12 2f       	mov	r17, r18
    3f72:	a0 2e       	mov	r10, r16
    3f74:	be 2c       	mov	r11, r14
    3f76:	2b e3       	ldi	r18, 0x3B	; 59
    3f78:	20 17       	cp	r18, r16
    3f7a:	18 f4       	brcc	.+6      	; 0x3f82 <dtoa_prf+0x20>
    3f7c:	2c e3       	ldi	r18, 0x3C	; 60
    3f7e:	92 2e       	mov	r9, r18
    3f80:	02 c0       	rjmp	.+4      	; 0x3f86 <dtoa_prf+0x24>
    3f82:	90 2e       	mov	r9, r16
    3f84:	93 94       	inc	r9
    3f86:	ae 01       	movw	r20, r28
    3f88:	4f 5f       	subi	r20, 0xFF	; 255
    3f8a:	5f 4f       	sbci	r21, 0xFF	; 255
    3f8c:	27 e0       	ldi	r18, 0x07	; 7
    3f8e:	09 2d       	mov	r16, r9
    3f90:	0e 94 13 21 	call	0x4226	; 0x4226 <__ftoa_engine>
    3f94:	bc 01       	movw	r22, r24
    3f96:	89 81       	ldd	r24, Y+1	; 0x01
    3f98:	e8 2e       	mov	r14, r24
    3f9a:	ff 24       	eor	r15, r15
    3f9c:	c7 01       	movw	r24, r14
    3f9e:	89 70       	andi	r24, 0x09	; 9
    3fa0:	90 70       	andi	r25, 0x00	; 0
    3fa2:	01 97       	sbiw	r24, 0x01	; 1
    3fa4:	11 f4       	brne	.+4      	; 0x3faa <dtoa_prf+0x48>
    3fa6:	ad e2       	ldi	r26, 0x2D	; 45
    3fa8:	09 c0       	rjmp	.+18     	; 0x3fbc <dtoa_prf+0x5a>
    3faa:	b1 fe       	sbrs	r11, 1
    3fac:	02 c0       	rjmp	.+4      	; 0x3fb2 <dtoa_prf+0x50>
    3fae:	ab e2       	ldi	r26, 0x2B	; 43
    3fb0:	05 c0       	rjmp	.+10     	; 0x3fbc <dtoa_prf+0x5a>
    3fb2:	b0 fc       	sbrc	r11, 0
    3fb4:	02 c0       	rjmp	.+4      	; 0x3fba <dtoa_prf+0x58>
    3fb6:	a0 e0       	ldi	r26, 0x00	; 0
    3fb8:	01 c0       	rjmp	.+2      	; 0x3fbc <dtoa_prf+0x5a>
    3fba:	a0 e2       	ldi	r26, 0x20	; 32
    3fbc:	e3 fe       	sbrs	r14, 3
    3fbe:	3b c0       	rjmp	.+118    	; 0x4036 <dtoa_prf+0xd4>
    3fc0:	aa 23       	and	r26, r26
    3fc2:	11 f4       	brne	.+4      	; 0x3fc8 <dtoa_prf+0x66>
    3fc4:	23 e0       	ldi	r18, 0x03	; 3
    3fc6:	01 c0       	rjmp	.+2      	; 0x3fca <dtoa_prf+0x68>
    3fc8:	24 e0       	ldi	r18, 0x04	; 4
    3fca:	21 17       	cp	r18, r17
    3fcc:	10 f0       	brcs	.+4      	; 0x3fd2 <dtoa_prf+0x70>
    3fce:	20 e0       	ldi	r18, 0x00	; 0
    3fd0:	02 c0       	rjmp	.+4      	; 0x3fd6 <dtoa_prf+0x74>
    3fd2:	12 1b       	sub	r17, r18
    3fd4:	21 2f       	mov	r18, r17
    3fd6:	eb 2c       	mov	r14, r11
    3fd8:	b4 fe       	sbrs	r11, 4
    3fda:	02 c0       	rjmp	.+4      	; 0x3fe0 <dtoa_prf+0x7e>
    3fdc:	32 2f       	mov	r19, r18
    3fde:	0a c0       	rjmp	.+20     	; 0x3ff4 <dtoa_prf+0x92>
    3fe0:	f6 01       	movw	r30, r12
    3fe2:	32 2f       	mov	r19, r18
    3fe4:	80 e2       	ldi	r24, 0x20	; 32
    3fe6:	02 c0       	rjmp	.+4      	; 0x3fec <dtoa_prf+0x8a>
    3fe8:	81 93       	st	Z+, r24
    3fea:	31 50       	subi	r19, 0x01	; 1
    3fec:	33 23       	and	r19, r19
    3fee:	e1 f7       	brne	.-8      	; 0x3fe8 <dtoa_prf+0x86>
    3ff0:	c2 0e       	add	r12, r18
    3ff2:	d1 1c       	adc	r13, r1
    3ff4:	aa 23       	and	r26, r26
    3ff6:	19 f0       	breq	.+6      	; 0x3ffe <dtoa_prf+0x9c>
    3ff8:	f6 01       	movw	r30, r12
    3ffa:	a1 93       	st	Z+, r26
    3ffc:	6f 01       	movw	r12, r30
    3ffe:	f6 01       	movw	r30, r12
    4000:	31 96       	adiw	r30, 0x01	; 1
    4002:	e2 fe       	sbrs	r14, 2
    4004:	05 c0       	rjmp	.+10     	; 0x4010 <dtoa_prf+0xae>
    4006:	9e e4       	ldi	r25, 0x4E	; 78
    4008:	d6 01       	movw	r26, r12
    400a:	9c 93       	st	X, r25
    400c:	81 e4       	ldi	r24, 0x41	; 65
    400e:	04 c0       	rjmp	.+8      	; 0x4018 <dtoa_prf+0xb6>
    4010:	9e e6       	ldi	r25, 0x6E	; 110
    4012:	d6 01       	movw	r26, r12
    4014:	9c 93       	st	X, r25
    4016:	81 e6       	ldi	r24, 0x61	; 97
    4018:	11 96       	adiw	r26, 0x01	; 1
    401a:	8c 93       	st	X, r24
    401c:	91 83       	std	Z+1, r25	; 0x01
    401e:	32 96       	adiw	r30, 0x02	; 2
    4020:	df 01       	movw	r26, r30
    4022:	83 2f       	mov	r24, r19
    4024:	90 e2       	ldi	r25, 0x20	; 32
    4026:	02 c0       	rjmp	.+4      	; 0x402c <dtoa_prf+0xca>
    4028:	9d 93       	st	X+, r25
    402a:	81 50       	subi	r24, 0x01	; 1
    402c:	88 23       	and	r24, r24
    402e:	e1 f7       	brne	.-8      	; 0x4028 <dtoa_prf+0xc6>
    4030:	e3 0f       	add	r30, r19
    4032:	f1 1d       	adc	r31, r1
    4034:	40 c0       	rjmp	.+128    	; 0x40b6 <dtoa_prf+0x154>
    4036:	e2 fe       	sbrs	r14, 2
    4038:	42 c0       	rjmp	.+132    	; 0x40be <dtoa_prf+0x15c>
    403a:	aa 23       	and	r26, r26
    403c:	11 f4       	brne	.+4      	; 0x4042 <dtoa_prf+0xe0>
    403e:	23 e0       	ldi	r18, 0x03	; 3
    4040:	01 c0       	rjmp	.+2      	; 0x4044 <dtoa_prf+0xe2>
    4042:	24 e0       	ldi	r18, 0x04	; 4
    4044:	21 17       	cp	r18, r17
    4046:	10 f0       	brcs	.+4      	; 0x404c <dtoa_prf+0xea>
    4048:	20 e0       	ldi	r18, 0x00	; 0
    404a:	02 c0       	rjmp	.+4      	; 0x4050 <dtoa_prf+0xee>
    404c:	12 1b       	sub	r17, r18
    404e:	21 2f       	mov	r18, r17
    4050:	eb 2c       	mov	r14, r11
    4052:	b4 fe       	sbrs	r11, 4
    4054:	02 c0       	rjmp	.+4      	; 0x405a <dtoa_prf+0xf8>
    4056:	92 2f       	mov	r25, r18
    4058:	0a c0       	rjmp	.+20     	; 0x406e <dtoa_prf+0x10c>
    405a:	f6 01       	movw	r30, r12
    405c:	92 2f       	mov	r25, r18
    405e:	80 e2       	ldi	r24, 0x20	; 32
    4060:	02 c0       	rjmp	.+4      	; 0x4066 <dtoa_prf+0x104>
    4062:	81 93       	st	Z+, r24
    4064:	91 50       	subi	r25, 0x01	; 1
    4066:	99 23       	and	r25, r25
    4068:	e1 f7       	brne	.-8      	; 0x4062 <dtoa_prf+0x100>
    406a:	c2 0e       	add	r12, r18
    406c:	d1 1c       	adc	r13, r1
    406e:	aa 23       	and	r26, r26
    4070:	19 f0       	breq	.+6      	; 0x4078 <dtoa_prf+0x116>
    4072:	f6 01       	movw	r30, r12
    4074:	a1 93       	st	Z+, r26
    4076:	6f 01       	movw	r12, r30
    4078:	f6 01       	movw	r30, r12
    407a:	31 96       	adiw	r30, 0x01	; 1
    407c:	e2 fe       	sbrs	r14, 2
    407e:	08 c0       	rjmp	.+16     	; 0x4090 <dtoa_prf+0x12e>
    4080:	89 e4       	ldi	r24, 0x49	; 73
    4082:	d6 01       	movw	r26, r12
    4084:	8c 93       	st	X, r24
    4086:	8e e4       	ldi	r24, 0x4E	; 78
    4088:	11 96       	adiw	r26, 0x01	; 1
    408a:	8c 93       	st	X, r24
    408c:	86 e4       	ldi	r24, 0x46	; 70
    408e:	07 c0       	rjmp	.+14     	; 0x409e <dtoa_prf+0x13c>
    4090:	89 e6       	ldi	r24, 0x69	; 105
    4092:	d6 01       	movw	r26, r12
    4094:	8c 93       	st	X, r24
    4096:	8e e6       	ldi	r24, 0x6E	; 110
    4098:	11 96       	adiw	r26, 0x01	; 1
    409a:	8c 93       	st	X, r24
    409c:	86 e6       	ldi	r24, 0x66	; 102
    409e:	81 83       	std	Z+1, r24	; 0x01
    40a0:	32 96       	adiw	r30, 0x02	; 2
    40a2:	df 01       	movw	r26, r30
    40a4:	89 2f       	mov	r24, r25
    40a6:	20 e2       	ldi	r18, 0x20	; 32
    40a8:	02 c0       	rjmp	.+4      	; 0x40ae <dtoa_prf+0x14c>
    40aa:	2d 93       	st	X+, r18
    40ac:	81 50       	subi	r24, 0x01	; 1
    40ae:	88 23       	and	r24, r24
    40b0:	e1 f7       	brne	.-8      	; 0x40aa <dtoa_prf+0x148>
    40b2:	e9 0f       	add	r30, r25
    40b4:	f1 1d       	adc	r31, r1
    40b6:	10 82       	st	Z, r1
    40b8:	2e ef       	ldi	r18, 0xFE	; 254
    40ba:	3f ef       	ldi	r19, 0xFF	; 255
    40bc:	af c0       	rjmp	.+350    	; 0x421c <dtoa_prf+0x2ba>
    40be:	16 16       	cp	r1, r22
    40c0:	17 06       	cpc	r1, r23
    40c2:	1c f0       	brlt	.+6      	; 0x40ca <dtoa_prf+0x168>
    40c4:	41 e0       	ldi	r20, 0x01	; 1
    40c6:	50 e0       	ldi	r21, 0x00	; 0
    40c8:	03 c0       	rjmp	.+6      	; 0x40d0 <dtoa_prf+0x16e>
    40ca:	ab 01       	movw	r20, r22
    40cc:	4f 5f       	subi	r20, 0xFF	; 255
    40ce:	5f 4f       	sbci	r21, 0xFF	; 255
    40d0:	aa 20       	and	r10, r10
    40d2:	19 f4       	brne	.+6      	; 0x40da <dtoa_prf+0x178>
    40d4:	80 e0       	ldi	r24, 0x00	; 0
    40d6:	90 e0       	ldi	r25, 0x00	; 0
    40d8:	03 c0       	rjmp	.+6      	; 0x40e0 <dtoa_prf+0x17e>
    40da:	8a 2d       	mov	r24, r10
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	01 96       	adiw	r24, 0x01	; 1
    40e0:	20 e0       	ldi	r18, 0x00	; 0
    40e2:	30 e0       	ldi	r19, 0x00	; 0
    40e4:	aa 23       	and	r26, r26
    40e6:	11 f0       	breq	.+4      	; 0x40ec <dtoa_prf+0x18a>
    40e8:	21 e0       	ldi	r18, 0x01	; 1
    40ea:	30 e0       	ldi	r19, 0x00	; 0
    40ec:	24 0f       	add	r18, r20
    40ee:	35 1f       	adc	r19, r21
    40f0:	28 0f       	add	r18, r24
    40f2:	39 1f       	adc	r19, r25
    40f4:	81 2f       	mov	r24, r17
    40f6:	90 e0       	ldi	r25, 0x00	; 0
    40f8:	28 17       	cp	r18, r24
    40fa:	39 07       	cpc	r19, r25
    40fc:	14 f0       	brlt	.+4      	; 0x4102 <dtoa_prf+0x1a0>
    40fe:	20 e0       	ldi	r18, 0x00	; 0
    4100:	02 c0       	rjmp	.+4      	; 0x4106 <dtoa_prf+0x1a4>
    4102:	12 1b       	sub	r17, r18
    4104:	21 2f       	mov	r18, r17
    4106:	4b 2d       	mov	r20, r11
    4108:	50 e0       	ldi	r21, 0x00	; 0
    410a:	ca 01       	movw	r24, r20
    410c:	80 71       	andi	r24, 0x10	; 16
    410e:	90 70       	andi	r25, 0x00	; 0
    4110:	b4 fc       	sbrc	r11, 4
    4112:	0d c0       	rjmp	.+26     	; 0x412e <dtoa_prf+0x1cc>
    4114:	b3 fc       	sbrc	r11, 3
    4116:	0b c0       	rjmp	.+22     	; 0x412e <dtoa_prf+0x1cc>
    4118:	f6 01       	movw	r30, r12
    411a:	32 2f       	mov	r19, r18
    411c:	40 e2       	ldi	r20, 0x20	; 32
    411e:	02 c0       	rjmp	.+4      	; 0x4124 <dtoa_prf+0x1c2>
    4120:	41 93       	st	Z+, r20
    4122:	31 50       	subi	r19, 0x01	; 1
    4124:	33 23       	and	r19, r19
    4126:	e1 f7       	brne	.-8      	; 0x4120 <dtoa_prf+0x1be>
    4128:	c2 0e       	add	r12, r18
    412a:	d1 1c       	adc	r13, r1
    412c:	01 c0       	rjmp	.+2      	; 0x4130 <dtoa_prf+0x1ce>
    412e:	32 2f       	mov	r19, r18
    4130:	aa 23       	and	r26, r26
    4132:	19 f0       	breq	.+6      	; 0x413a <dtoa_prf+0x1d8>
    4134:	f6 01       	movw	r30, r12
    4136:	a1 93       	st	Z+, r26
    4138:	6f 01       	movw	r12, r30
    413a:	89 2b       	or	r24, r25
    413c:	11 f0       	breq	.+4      	; 0x4142 <dtoa_prf+0x1e0>
    413e:	13 2f       	mov	r17, r19
    4140:	0a c0       	rjmp	.+20     	; 0x4156 <dtoa_prf+0x1f4>
    4142:	f6 01       	movw	r30, r12
    4144:	13 2f       	mov	r17, r19
    4146:	80 e3       	ldi	r24, 0x30	; 48
    4148:	02 c0       	rjmp	.+4      	; 0x414e <dtoa_prf+0x1ec>
    414a:	81 93       	st	Z+, r24
    414c:	11 50       	subi	r17, 0x01	; 1
    414e:	11 23       	and	r17, r17
    4150:	e1 f7       	brne	.-8      	; 0x414a <dtoa_prf+0x1e8>
    4152:	c3 0e       	add	r12, r19
    4154:	d1 1c       	adc	r13, r1
    4156:	09 2d       	mov	r16, r9
    4158:	06 0f       	add	r16, r22
    415a:	ba 80       	ldd	r11, Y+2	; 0x02
    415c:	90 e1       	ldi	r25, 0x10	; 16
    415e:	89 2e       	mov	r8, r25
    4160:	91 2c       	mov	r9, r1
    4162:	8e 20       	and	r8, r14
    4164:	9f 20       	and	r9, r15
    4166:	e4 fe       	sbrs	r14, 4
    4168:	04 c0       	rjmp	.+8      	; 0x4172 <dtoa_prf+0x210>
    416a:	f1 e3       	ldi	r31, 0x31	; 49
    416c:	bf 16       	cp	r11, r31
    416e:	09 f4       	brne	.+2      	; 0x4172 <dtoa_prf+0x210>
    4170:	01 50       	subi	r16, 0x01	; 1
    4172:	10 16       	cp	r1, r16
    4174:	14 f0       	brlt	.+4      	; 0x417a <dtoa_prf+0x218>
    4176:	01 e0       	ldi	r16, 0x01	; 1
    4178:	03 c0       	rjmp	.+6      	; 0x4180 <dtoa_prf+0x21e>
    417a:	09 30       	cpi	r16, 0x09	; 9
    417c:	08 f0       	brcs	.+2      	; 0x4180 <dtoa_prf+0x21e>
    417e:	08 e0       	ldi	r16, 0x08	; 8
    4180:	9b 01       	movw	r18, r22
    4182:	77 ff       	sbrs	r23, 7
    4184:	02 c0       	rjmp	.+4      	; 0x418a <dtoa_prf+0x228>
    4186:	20 e0       	ldi	r18, 0x00	; 0
    4188:	30 e0       	ldi	r19, 0x00	; 0
    418a:	cb 01       	movw	r24, r22
    418c:	01 96       	adiw	r24, 0x01	; 1
    418e:	82 1b       	sub	r24, r18
    4190:	93 0b       	sbc	r25, r19
    4192:	fe 01       	movw	r30, r28
    4194:	31 96       	adiw	r30, 0x01	; 1
    4196:	e8 0f       	add	r30, r24
    4198:	f9 1f       	adc	r31, r25
    419a:	8e e2       	ldi	r24, 0x2E	; 46
    419c:	f8 2e       	mov	r15, r24
    419e:	3b 01       	movw	r6, r22
    41a0:	60 1a       	sub	r6, r16
    41a2:	71 08       	sbc	r7, r1
    41a4:	8a 2d       	mov	r24, r10
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	44 27       	eor	r20, r20
    41aa:	55 27       	eor	r21, r21
    41ac:	48 1b       	sub	r20, r24
    41ae:	59 0b       	sbc	r21, r25
    41b0:	8f ef       	ldi	r24, 0xFF	; 255
    41b2:	2f 3f       	cpi	r18, 0xFF	; 255
    41b4:	38 07       	cpc	r19, r24
    41b6:	19 f4       	brne	.+6      	; 0x41be <dtoa_prf+0x25c>
    41b8:	d6 01       	movw	r26, r12
    41ba:	fd 92       	st	X+, r15
    41bc:	6d 01       	movw	r12, r26
    41be:	62 17       	cp	r22, r18
    41c0:	73 07       	cpc	r23, r19
    41c2:	2c f0       	brlt	.+10     	; 0x41ce <dtoa_prf+0x26c>
    41c4:	62 16       	cp	r6, r18
    41c6:	73 06       	cpc	r7, r19
    41c8:	14 f4       	brge	.+4      	; 0x41ce <dtoa_prf+0x26c>
    41ca:	80 81       	ld	r24, Z
    41cc:	01 c0       	rjmp	.+2      	; 0x41d0 <dtoa_prf+0x26e>
    41ce:	80 e3       	ldi	r24, 0x30	; 48
    41d0:	21 50       	subi	r18, 0x01	; 1
    41d2:	30 40       	sbci	r19, 0x00	; 0
    41d4:	31 96       	adiw	r30, 0x01	; 1
    41d6:	24 17       	cp	r18, r20
    41d8:	35 07       	cpc	r19, r21
    41da:	24 f0       	brlt	.+8      	; 0x41e4 <dtoa_prf+0x282>
    41dc:	d6 01       	movw	r26, r12
    41de:	8d 93       	st	X+, r24
    41e0:	6d 01       	movw	r12, r26
    41e2:	e6 cf       	rjmp	.-52     	; 0x41b0 <dtoa_prf+0x24e>
    41e4:	26 17       	cp	r18, r22
    41e6:	37 07       	cpc	r19, r23
    41e8:	49 f4       	brne	.+18     	; 0x41fc <dtoa_prf+0x29a>
    41ea:	b5 e3       	ldi	r27, 0x35	; 53
    41ec:	bb 15       	cp	r27, r11
    41ee:	28 f0       	brcs	.+10     	; 0x41fa <dtoa_prf+0x298>
    41f0:	bb 16       	cp	r11, r27
    41f2:	21 f4       	brne	.+8      	; 0x41fc <dtoa_prf+0x29a>
    41f4:	81 14       	cp	r8, r1
    41f6:	91 04       	cpc	r9, r1
    41f8:	09 f4       	brne	.+2      	; 0x41fc <dtoa_prf+0x29a>
    41fa:	81 e3       	ldi	r24, 0x31	; 49
    41fc:	f6 01       	movw	r30, r12
    41fe:	81 93       	st	Z+, r24
    4200:	d6 01       	movw	r26, r12
    4202:	81 2f       	mov	r24, r17
    4204:	90 e2       	ldi	r25, 0x20	; 32
    4206:	02 c0       	rjmp	.+4      	; 0x420c <dtoa_prf+0x2aa>
    4208:	9c 93       	st	X, r25
    420a:	81 50       	subi	r24, 0x01	; 1
    420c:	11 96       	adiw	r26, 0x01	; 1
    420e:	88 23       	and	r24, r24
    4210:	d9 f7       	brne	.-10     	; 0x4208 <dtoa_prf+0x2a6>
    4212:	e1 0f       	add	r30, r17
    4214:	f1 1d       	adc	r31, r1
    4216:	10 82       	st	Z, r1
    4218:	20 e0       	ldi	r18, 0x00	; 0
    421a:	30 e0       	ldi	r19, 0x00	; 0
    421c:	c9 01       	movw	r24, r18
    421e:	29 96       	adiw	r28, 0x09	; 9
    4220:	ee e0       	ldi	r30, 0x0E	; 14
    4222:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__epilogue_restores__+0x8>

00004226 <__ftoa_engine>:
    4226:	28 30       	cpi	r18, 0x08	; 8
    4228:	08 f0       	brcs	.+2      	; 0x422c <__ftoa_engine+0x6>
    422a:	27 e0       	ldi	r18, 0x07	; 7
    422c:	33 27       	eor	r19, r19
    422e:	da 01       	movw	r26, r20
    4230:	99 0f       	add	r25, r25
    4232:	31 1d       	adc	r19, r1
    4234:	87 fd       	sbrc	r24, 7
    4236:	91 60       	ori	r25, 0x01	; 1
    4238:	00 96       	adiw	r24, 0x00	; 0
    423a:	61 05       	cpc	r22, r1
    423c:	71 05       	cpc	r23, r1
    423e:	39 f4       	brne	.+14     	; 0x424e <__ftoa_engine+0x28>
    4240:	32 60       	ori	r19, 0x02	; 2
    4242:	2e 5f       	subi	r18, 0xFE	; 254
    4244:	3d 93       	st	X+, r19
    4246:	30 e3       	ldi	r19, 0x30	; 48
    4248:	2a 95       	dec	r18
    424a:	e1 f7       	brne	.-8      	; 0x4244 <__ftoa_engine+0x1e>
    424c:	08 95       	ret
    424e:	9f 3f       	cpi	r25, 0xFF	; 255
    4250:	30 f0       	brcs	.+12     	; 0x425e <__ftoa_engine+0x38>
    4252:	80 38       	cpi	r24, 0x80	; 128
    4254:	71 05       	cpc	r23, r1
    4256:	61 05       	cpc	r22, r1
    4258:	09 f0       	breq	.+2      	; 0x425c <__ftoa_engine+0x36>
    425a:	3c 5f       	subi	r19, 0xFC	; 252
    425c:	3c 5f       	subi	r19, 0xFC	; 252
    425e:	3d 93       	st	X+, r19
    4260:	91 30       	cpi	r25, 0x01	; 1
    4262:	08 f0       	brcs	.+2      	; 0x4266 <__ftoa_engine+0x40>
    4264:	80 68       	ori	r24, 0x80	; 128
    4266:	91 1d       	adc	r25, r1
    4268:	df 93       	push	r29
    426a:	cf 93       	push	r28
    426c:	1f 93       	push	r17
    426e:	0f 93       	push	r16
    4270:	ff 92       	push	r15
    4272:	ef 92       	push	r14
    4274:	19 2f       	mov	r17, r25
    4276:	98 7f       	andi	r25, 0xF8	; 248
    4278:	96 95       	lsr	r25
    427a:	e9 2f       	mov	r30, r25
    427c:	96 95       	lsr	r25
    427e:	96 95       	lsr	r25
    4280:	e9 0f       	add	r30, r25
    4282:	ff 27       	eor	r31, r31
    4284:	e5 56       	subi	r30, 0x65	; 101
    4286:	fb 4f       	sbci	r31, 0xFB	; 251
    4288:	99 27       	eor	r25, r25
    428a:	33 27       	eor	r19, r19
    428c:	ee 24       	eor	r14, r14
    428e:	ff 24       	eor	r15, r15
    4290:	a7 01       	movw	r20, r14
    4292:	e7 01       	movw	r28, r14
    4294:	05 90       	lpm	r0, Z+
    4296:	08 94       	sec
    4298:	07 94       	ror	r0
    429a:	28 f4       	brcc	.+10     	; 0x42a6 <__ftoa_engine+0x80>
    429c:	36 0f       	add	r19, r22
    429e:	e7 1e       	adc	r14, r23
    42a0:	f8 1e       	adc	r15, r24
    42a2:	49 1f       	adc	r20, r25
    42a4:	51 1d       	adc	r21, r1
    42a6:	66 0f       	add	r22, r22
    42a8:	77 1f       	adc	r23, r23
    42aa:	88 1f       	adc	r24, r24
    42ac:	99 1f       	adc	r25, r25
    42ae:	06 94       	lsr	r0
    42b0:	a1 f7       	brne	.-24     	; 0x429a <__ftoa_engine+0x74>
    42b2:	05 90       	lpm	r0, Z+
    42b4:	07 94       	ror	r0
    42b6:	28 f4       	brcc	.+10     	; 0x42c2 <__ftoa_engine+0x9c>
    42b8:	e7 0e       	add	r14, r23
    42ba:	f8 1e       	adc	r15, r24
    42bc:	49 1f       	adc	r20, r25
    42be:	56 1f       	adc	r21, r22
    42c0:	c1 1d       	adc	r28, r1
    42c2:	77 0f       	add	r23, r23
    42c4:	88 1f       	adc	r24, r24
    42c6:	99 1f       	adc	r25, r25
    42c8:	66 1f       	adc	r22, r22
    42ca:	06 94       	lsr	r0
    42cc:	a1 f7       	brne	.-24     	; 0x42b6 <__ftoa_engine+0x90>
    42ce:	05 90       	lpm	r0, Z+
    42d0:	07 94       	ror	r0
    42d2:	28 f4       	brcc	.+10     	; 0x42de <__ftoa_engine+0xb8>
    42d4:	f8 0e       	add	r15, r24
    42d6:	49 1f       	adc	r20, r25
    42d8:	56 1f       	adc	r21, r22
    42da:	c7 1f       	adc	r28, r23
    42dc:	d1 1d       	adc	r29, r1
    42de:	88 0f       	add	r24, r24
    42e0:	99 1f       	adc	r25, r25
    42e2:	66 1f       	adc	r22, r22
    42e4:	77 1f       	adc	r23, r23
    42e6:	06 94       	lsr	r0
    42e8:	a1 f7       	brne	.-24     	; 0x42d2 <__ftoa_engine+0xac>
    42ea:	05 90       	lpm	r0, Z+
    42ec:	07 94       	ror	r0
    42ee:	20 f4       	brcc	.+8      	; 0x42f8 <__ftoa_engine+0xd2>
    42f0:	49 0f       	add	r20, r25
    42f2:	56 1f       	adc	r21, r22
    42f4:	c7 1f       	adc	r28, r23
    42f6:	d8 1f       	adc	r29, r24
    42f8:	99 0f       	add	r25, r25
    42fa:	66 1f       	adc	r22, r22
    42fc:	77 1f       	adc	r23, r23
    42fe:	88 1f       	adc	r24, r24
    4300:	06 94       	lsr	r0
    4302:	a9 f7       	brne	.-22     	; 0x42ee <__ftoa_engine+0xc8>
    4304:	84 91       	lpm	r24, Z+
    4306:	10 95       	com	r17
    4308:	17 70       	andi	r17, 0x07	; 7
    430a:	41 f0       	breq	.+16     	; 0x431c <__ftoa_engine+0xf6>
    430c:	d6 95       	lsr	r29
    430e:	c7 95       	ror	r28
    4310:	57 95       	ror	r21
    4312:	47 95       	ror	r20
    4314:	f7 94       	ror	r15
    4316:	e7 94       	ror	r14
    4318:	1a 95       	dec	r17
    431a:	c1 f7       	brne	.-16     	; 0x430c <__ftoa_engine+0xe6>
    431c:	e1 e4       	ldi	r30, 0x41	; 65
    431e:	f4 e0       	ldi	r31, 0x04	; 4
    4320:	68 94       	set
    4322:	15 90       	lpm	r1, Z+
    4324:	15 91       	lpm	r17, Z+
    4326:	35 91       	lpm	r19, Z+
    4328:	65 91       	lpm	r22, Z+
    432a:	95 91       	lpm	r25, Z+
    432c:	05 90       	lpm	r0, Z+
    432e:	7f e2       	ldi	r23, 0x2F	; 47
    4330:	73 95       	inc	r23
    4332:	e1 18       	sub	r14, r1
    4334:	f1 0a       	sbc	r15, r17
    4336:	43 0b       	sbc	r20, r19
    4338:	56 0b       	sbc	r21, r22
    433a:	c9 0b       	sbc	r28, r25
    433c:	d0 09       	sbc	r29, r0
    433e:	c0 f7       	brcc	.-16     	; 0x4330 <__ftoa_engine+0x10a>
    4340:	e1 0c       	add	r14, r1
    4342:	f1 1e       	adc	r15, r17
    4344:	43 1f       	adc	r20, r19
    4346:	56 1f       	adc	r21, r22
    4348:	c9 1f       	adc	r28, r25
    434a:	d0 1d       	adc	r29, r0
    434c:	7e f4       	brtc	.+30     	; 0x436c <__ftoa_engine+0x146>
    434e:	70 33       	cpi	r23, 0x30	; 48
    4350:	11 f4       	brne	.+4      	; 0x4356 <__ftoa_engine+0x130>
    4352:	8a 95       	dec	r24
    4354:	e6 cf       	rjmp	.-52     	; 0x4322 <__ftoa_engine+0xfc>
    4356:	e8 94       	clt
    4358:	01 50       	subi	r16, 0x01	; 1
    435a:	30 f0       	brcs	.+12     	; 0x4368 <__ftoa_engine+0x142>
    435c:	08 0f       	add	r16, r24
    435e:	0a f4       	brpl	.+2      	; 0x4362 <__ftoa_engine+0x13c>
    4360:	00 27       	eor	r16, r16
    4362:	02 17       	cp	r16, r18
    4364:	08 f4       	brcc	.+2      	; 0x4368 <__ftoa_engine+0x142>
    4366:	20 2f       	mov	r18, r16
    4368:	23 95       	inc	r18
    436a:	02 2f       	mov	r16, r18
    436c:	7a 33       	cpi	r23, 0x3A	; 58
    436e:	28 f0       	brcs	.+10     	; 0x437a <__ftoa_engine+0x154>
    4370:	79 e3       	ldi	r23, 0x39	; 57
    4372:	7d 93       	st	X+, r23
    4374:	2a 95       	dec	r18
    4376:	e9 f7       	brne	.-6      	; 0x4372 <__ftoa_engine+0x14c>
    4378:	10 c0       	rjmp	.+32     	; 0x439a <__ftoa_engine+0x174>
    437a:	7d 93       	st	X+, r23
    437c:	2a 95       	dec	r18
    437e:	89 f6       	brne	.-94     	; 0x4322 <__ftoa_engine+0xfc>
    4380:	06 94       	lsr	r0
    4382:	97 95       	ror	r25
    4384:	67 95       	ror	r22
    4386:	37 95       	ror	r19
    4388:	17 95       	ror	r17
    438a:	17 94       	ror	r1
    438c:	e1 18       	sub	r14, r1
    438e:	f1 0a       	sbc	r15, r17
    4390:	43 0b       	sbc	r20, r19
    4392:	56 0b       	sbc	r21, r22
    4394:	c9 0b       	sbc	r28, r25
    4396:	d0 09       	sbc	r29, r0
    4398:	98 f0       	brcs	.+38     	; 0x43c0 <__ftoa_engine+0x19a>
    439a:	23 95       	inc	r18
    439c:	7e 91       	ld	r23, -X
    439e:	73 95       	inc	r23
    43a0:	7a 33       	cpi	r23, 0x3A	; 58
    43a2:	08 f0       	brcs	.+2      	; 0x43a6 <__ftoa_engine+0x180>
    43a4:	70 e3       	ldi	r23, 0x30	; 48
    43a6:	7c 93       	st	X, r23
    43a8:	20 13       	cpse	r18, r16
    43aa:	b8 f7       	brcc	.-18     	; 0x439a <__ftoa_engine+0x174>
    43ac:	7e 91       	ld	r23, -X
    43ae:	70 61       	ori	r23, 0x10	; 16
    43b0:	7d 93       	st	X+, r23
    43b2:	30 f0       	brcs	.+12     	; 0x43c0 <__ftoa_engine+0x19a>
    43b4:	83 95       	inc	r24
    43b6:	71 e3       	ldi	r23, 0x31	; 49
    43b8:	7d 93       	st	X+, r23
    43ba:	70 e3       	ldi	r23, 0x30	; 48
    43bc:	2a 95       	dec	r18
    43be:	e1 f7       	brne	.-8      	; 0x43b8 <__ftoa_engine+0x192>
    43c0:	11 24       	eor	r1, r1
    43c2:	ef 90       	pop	r14
    43c4:	ff 90       	pop	r15
    43c6:	0f 91       	pop	r16
    43c8:	1f 91       	pop	r17
    43ca:	cf 91       	pop	r28
    43cc:	df 91       	pop	r29
    43ce:	99 27       	eor	r25, r25
    43d0:	87 fd       	sbrc	r24, 7
    43d2:	90 95       	com	r25
    43d4:	08 95       	ret

000043d6 <strrev>:
    43d6:	dc 01       	movw	r26, r24
    43d8:	fc 01       	movw	r30, r24
    43da:	67 2f       	mov	r22, r23
    43dc:	71 91       	ld	r23, Z+
    43de:	77 23       	and	r23, r23
    43e0:	e1 f7       	brne	.-8      	; 0x43da <strrev+0x4>
    43e2:	32 97       	sbiw	r30, 0x02	; 2
    43e4:	04 c0       	rjmp	.+8      	; 0x43ee <strrev+0x18>
    43e6:	7c 91       	ld	r23, X
    43e8:	6d 93       	st	X+, r22
    43ea:	70 83       	st	Z, r23
    43ec:	62 91       	ld	r22, -Z
    43ee:	ae 17       	cp	r26, r30
    43f0:	bf 07       	cpc	r27, r31
    43f2:	c8 f3       	brcs	.-14     	; 0x43e6 <strrev+0x10>
    43f4:	08 95       	ret

000043f6 <__mulsi3>:
    43f6:	62 9f       	mul	r22, r18
    43f8:	d0 01       	movw	r26, r0
    43fa:	73 9f       	mul	r23, r19
    43fc:	f0 01       	movw	r30, r0
    43fe:	82 9f       	mul	r24, r18
    4400:	e0 0d       	add	r30, r0
    4402:	f1 1d       	adc	r31, r1
    4404:	64 9f       	mul	r22, r20
    4406:	e0 0d       	add	r30, r0
    4408:	f1 1d       	adc	r31, r1
    440a:	92 9f       	mul	r25, r18
    440c:	f0 0d       	add	r31, r0
    440e:	83 9f       	mul	r24, r19
    4410:	f0 0d       	add	r31, r0
    4412:	74 9f       	mul	r23, r20
    4414:	f0 0d       	add	r31, r0
    4416:	65 9f       	mul	r22, r21
    4418:	f0 0d       	add	r31, r0
    441a:	99 27       	eor	r25, r25
    441c:	72 9f       	mul	r23, r18
    441e:	b0 0d       	add	r27, r0
    4420:	e1 1d       	adc	r30, r1
    4422:	f9 1f       	adc	r31, r25
    4424:	63 9f       	mul	r22, r19
    4426:	b0 0d       	add	r27, r0
    4428:	e1 1d       	adc	r30, r1
    442a:	f9 1f       	adc	r31, r25
    442c:	bd 01       	movw	r22, r26
    442e:	cf 01       	movw	r24, r30
    4430:	11 24       	eor	r1, r1
    4432:	08 95       	ret

00004434 <__udivmodhi4>:
    4434:	aa 1b       	sub	r26, r26
    4436:	bb 1b       	sub	r27, r27
    4438:	51 e1       	ldi	r21, 0x11	; 17
    443a:	07 c0       	rjmp	.+14     	; 0x444a <__udivmodhi4_ep>

0000443c <__udivmodhi4_loop>:
    443c:	aa 1f       	adc	r26, r26
    443e:	bb 1f       	adc	r27, r27
    4440:	a6 17       	cp	r26, r22
    4442:	b7 07       	cpc	r27, r23
    4444:	10 f0       	brcs	.+4      	; 0x444a <__udivmodhi4_ep>
    4446:	a6 1b       	sub	r26, r22
    4448:	b7 0b       	sbc	r27, r23

0000444a <__udivmodhi4_ep>:
    444a:	88 1f       	adc	r24, r24
    444c:	99 1f       	adc	r25, r25
    444e:	5a 95       	dec	r21
    4450:	a9 f7       	brne	.-22     	; 0x443c <__udivmodhi4_loop>
    4452:	80 95       	com	r24
    4454:	90 95       	com	r25
    4456:	bc 01       	movw	r22, r24
    4458:	cd 01       	movw	r24, r26
    445a:	08 95       	ret

0000445c <__udivmodsi4>:
    445c:	a1 e2       	ldi	r26, 0x21	; 33
    445e:	1a 2e       	mov	r1, r26
    4460:	aa 1b       	sub	r26, r26
    4462:	bb 1b       	sub	r27, r27
    4464:	fd 01       	movw	r30, r26
    4466:	0d c0       	rjmp	.+26     	; 0x4482 <__udivmodsi4_ep>

00004468 <__udivmodsi4_loop>:
    4468:	aa 1f       	adc	r26, r26
    446a:	bb 1f       	adc	r27, r27
    446c:	ee 1f       	adc	r30, r30
    446e:	ff 1f       	adc	r31, r31
    4470:	a2 17       	cp	r26, r18
    4472:	b3 07       	cpc	r27, r19
    4474:	e4 07       	cpc	r30, r20
    4476:	f5 07       	cpc	r31, r21
    4478:	20 f0       	brcs	.+8      	; 0x4482 <__udivmodsi4_ep>
    447a:	a2 1b       	sub	r26, r18
    447c:	b3 0b       	sbc	r27, r19
    447e:	e4 0b       	sbc	r30, r20
    4480:	f5 0b       	sbc	r31, r21

00004482 <__udivmodsi4_ep>:
    4482:	66 1f       	adc	r22, r22
    4484:	77 1f       	adc	r23, r23
    4486:	88 1f       	adc	r24, r24
    4488:	99 1f       	adc	r25, r25
    448a:	1a 94       	dec	r1
    448c:	69 f7       	brne	.-38     	; 0x4468 <__udivmodsi4_loop>
    448e:	60 95       	com	r22
    4490:	70 95       	com	r23
    4492:	80 95       	com	r24
    4494:	90 95       	com	r25
    4496:	9b 01       	movw	r18, r22
    4498:	ac 01       	movw	r20, r24
    449a:	bd 01       	movw	r22, r26
    449c:	cf 01       	movw	r24, r30
    449e:	08 95       	ret

000044a0 <__divmodsi4>:
    44a0:	97 fb       	bst	r25, 7
    44a2:	09 2e       	mov	r0, r25
    44a4:	05 26       	eor	r0, r21
    44a6:	0e d0       	rcall	.+28     	; 0x44c4 <__divmodsi4_neg1>
    44a8:	57 fd       	sbrc	r21, 7
    44aa:	04 d0       	rcall	.+8      	; 0x44b4 <__divmodsi4_neg2>
    44ac:	d7 df       	rcall	.-82     	; 0x445c <__udivmodsi4>
    44ae:	0a d0       	rcall	.+20     	; 0x44c4 <__divmodsi4_neg1>
    44b0:	00 1c       	adc	r0, r0
    44b2:	38 f4       	brcc	.+14     	; 0x44c2 <__divmodsi4_exit>

000044b4 <__divmodsi4_neg2>:
    44b4:	50 95       	com	r21
    44b6:	40 95       	com	r20
    44b8:	30 95       	com	r19
    44ba:	21 95       	neg	r18
    44bc:	3f 4f       	sbci	r19, 0xFF	; 255
    44be:	4f 4f       	sbci	r20, 0xFF	; 255
    44c0:	5f 4f       	sbci	r21, 0xFF	; 255

000044c2 <__divmodsi4_exit>:
    44c2:	08 95       	ret

000044c4 <__divmodsi4_neg1>:
    44c4:	f6 f7       	brtc	.-4      	; 0x44c2 <__divmodsi4_exit>
    44c6:	90 95       	com	r25
    44c8:	80 95       	com	r24
    44ca:	70 95       	com	r23
    44cc:	61 95       	neg	r22
    44ce:	7f 4f       	sbci	r23, 0xFF	; 255
    44d0:	8f 4f       	sbci	r24, 0xFF	; 255
    44d2:	9f 4f       	sbci	r25, 0xFF	; 255
    44d4:	08 95       	ret

000044d6 <__prologue_saves__>:
    44d6:	2f 92       	push	r2
    44d8:	3f 92       	push	r3
    44da:	4f 92       	push	r4
    44dc:	5f 92       	push	r5
    44de:	6f 92       	push	r6
    44e0:	7f 92       	push	r7
    44e2:	8f 92       	push	r8
    44e4:	9f 92       	push	r9
    44e6:	af 92       	push	r10
    44e8:	bf 92       	push	r11
    44ea:	cf 92       	push	r12
    44ec:	df 92       	push	r13
    44ee:	ef 92       	push	r14
    44f0:	ff 92       	push	r15
    44f2:	0f 93       	push	r16
    44f4:	1f 93       	push	r17
    44f6:	cf 93       	push	r28
    44f8:	df 93       	push	r29
    44fa:	cd b7       	in	r28, 0x3d	; 61
    44fc:	de b7       	in	r29, 0x3e	; 62
    44fe:	ca 1b       	sub	r28, r26
    4500:	db 0b       	sbc	r29, r27
    4502:	0f b6       	in	r0, 0x3f	; 63
    4504:	f8 94       	cli
    4506:	de bf       	out	0x3e, r29	; 62
    4508:	0f be       	out	0x3f, r0	; 63
    450a:	cd bf       	out	0x3d, r28	; 61
    450c:	09 94       	ijmp

0000450e <__epilogue_restores__>:
    450e:	2a 88       	ldd	r2, Y+18	; 0x12
    4510:	39 88       	ldd	r3, Y+17	; 0x11
    4512:	48 88       	ldd	r4, Y+16	; 0x10
    4514:	5f 84       	ldd	r5, Y+15	; 0x0f
    4516:	6e 84       	ldd	r6, Y+14	; 0x0e
    4518:	7d 84       	ldd	r7, Y+13	; 0x0d
    451a:	8c 84       	ldd	r8, Y+12	; 0x0c
    451c:	9b 84       	ldd	r9, Y+11	; 0x0b
    451e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4520:	b9 84       	ldd	r11, Y+9	; 0x09
    4522:	c8 84       	ldd	r12, Y+8	; 0x08
    4524:	df 80       	ldd	r13, Y+7	; 0x07
    4526:	ee 80       	ldd	r14, Y+6	; 0x06
    4528:	fd 80       	ldd	r15, Y+5	; 0x05
    452a:	0c 81       	ldd	r16, Y+4	; 0x04
    452c:	1b 81       	ldd	r17, Y+3	; 0x03
    452e:	aa 81       	ldd	r26, Y+2	; 0x02
    4530:	b9 81       	ldd	r27, Y+1	; 0x01
    4532:	ce 0f       	add	r28, r30
    4534:	d1 1d       	adc	r29, r1
    4536:	0f b6       	in	r0, 0x3f	; 63
    4538:	f8 94       	cli
    453a:	de bf       	out	0x3e, r29	; 62
    453c:	0f be       	out	0x3f, r0	; 63
    453e:	cd bf       	out	0x3d, r28	; 61
    4540:	ed 01       	movw	r28, r26
    4542:	08 95       	ret

00004544 <__tablejump2__>:
    4544:	ee 0f       	add	r30, r30
    4546:	ff 1f       	adc	r31, r31

00004548 <__tablejump__>:
    4548:	05 90       	lpm	r0, Z+
    454a:	f4 91       	lpm	r31, Z+
    454c:	e0 2d       	mov	r30, r0
    454e:	09 94       	ijmp

00004550 <_exit>:
    4550:	f8 94       	cli

00004552 <__stop_program>:
    4552:	ff cf       	rjmp	.-2      	; 0x4552 <__stop_program>
