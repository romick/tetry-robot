
bug3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000386  00800200  0000436a  000043fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000436a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002c1  00800586  00800586  00004784  2**0
                  ALLOC
  3 .debug_aranges 00000520  00000000  00000000  00004784  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000f82  00000000  00000000  00004ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00012293  00000000  00000000  00005c26  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000481d  00000000  00000000  00017eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004725  00000000  00000000  0001c6d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a50  00000000  00000000  00020dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002420  00000000  00000000  0002184c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002715  00000000  00000000  00023c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00026381  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a0 02 	jmp	0x540	; 0x540 <__ctors_end>
       4:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
       8:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
       c:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      10:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      14:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      18:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      1c:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      20:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      24:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      28:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      2c:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      30:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      34:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      38:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      3c:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      40:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      44:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      48:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      4c:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      50:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      54:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__vector_21>
      58:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <__vector_22>
      5c:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      60:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      64:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      68:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      6c:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      70:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      74:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      78:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      7c:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      80:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      84:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      88:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      8c:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      90:	0c 94 e8 0b 	jmp	0x17d0	; 0x17d0 <__vector_36>
      94:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      98:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <__vector_38>
      9c:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      a0:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      a4:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      a8:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      ac:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      b0:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      b4:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      b8:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      bc:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      c0:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      c4:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      c8:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      cc:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      d0:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      d4:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      d8:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      dc:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>
      e0:	0c 94 c8 02 	jmp	0x590	; 0x590 <__bad_interrupt>

000000e4 <__c.1776>:
      e4:	45 46 47 65 66 67 00                                EFGefg.

000000eb <__c.1770>:
      eb:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

000000fb <__timer0Compare>:
      fb:	21 07 00 6e 00 02 47 00 35 00 02 44 00 06 78 03     !..n..G.5..D..x.
     10b:	25 07 00 6e 00 04 48 00 35 00 04 44 00 04 a8 03     %..n..H.5..D....

0000011b <__timer1Compare>:
     11b:	29 07 01 6f 00 02 88 00 36 00 02 80 00 06 72 03     )..o....6.....r.
     12b:	2d 07 01 6f 00 04 8a 00 36 00 04 80 00 04 75 03     -..o....6.....u.
     13b:	31 07 01 6f 00 08 8c 00 36 00 08 80 00 02 78 03     1..o....6.....x.

0000014b <__timer2Compare>:
     14b:	35 07 02 70 00 02 b3 00 37 00 02 b0 00 06 6f 03     5..p....7.....o.
     15b:	39 07 02 70 00 04 b4 00 37 00 04 b0 00 04 b4 03     9..p....7.......

0000016b <__timer3Compare>:
     16b:	3d 07 03 71 00 02 98 00 38 00 02 90 00 06 9c 03     =..q....8.......
     17b:	41 07 03 71 00 04 9a 00 38 00 04 90 00 04 9f 03     A..q....8.......
     18b:	45 07 03 71 00 08 9c 00 38 00 08 90 00 02 a2 03     E..q....8.......

0000019b <__timer4Compare>:
     19b:	49 07 04 72 00 02 a8 00 39 00 02 a0 00 06 ab 03     I..r....9.......
     1ab:	4d 07 04 72 00 04 aa 00 39 00 04 a0 00 04 ae 03     M..r....9.......
     1bb:	51 07 04 72 00 08 ac 00 39 00 08 a0 00 02 b1 03     Q..r....9.......

000001cb <__timer5Compare>:
     1cb:	55 07 05 73 00 02 28 01 3a 00 02 20 01 06 bd 03     U..s..(.:.. ....
     1db:	59 07 05 73 00 04 2a 01 3a 00 04 20 01 04 c0 03     Y..s..*.:.. ....
     1eb:	5d 07 05 73 00 08 2c 01 3a 00 08 20 01 02 c3 03     ]..s..,.:.. ....

000001fb <pgm_Timers>:
     1fb:	61 07 46 00 45 00 07 00 02 10 15 03 44 00 01 44     a.F.E.......D..D
     20b:	00 02 45 00 08 00 00 01 fb 00 6e 00 01 35 00 01     ..E.......n..5..
     21b:	00 00 00 00 01 00 00 01 00 00 01 00 00 25 03 6c     .............%.l
     22b:	07 84 00 81 00 07 ff 03 10 33 03 80 00 01 80 00     .........3......
     23b:	02 81 00 08 81 00 10 1b 01 6f 00 01 36 00 01 86     .........o..6...
     24b:	00 6f 00 20 36 00 20 81 00 40 00 00 25 03 77 07     .o. 6. ..@..%.w.
     25b:	b2 00 b1 00 07 00 02 10 15 03 b0 00 01 b0 00 02     ................
     26b:	b1 00 08 00 00 01 4b 01 70 00 01 37 00 01 00 00     ......K.p..7....
     27b:	00 00 01 00 00 01 00 00 01 00 00 43 03 82 07 94     ...........C....
     28b:	00 91 00 07 ff 03 10 33 03 90 00 01 90 00 02 91     .......3........
     29b:	00 08 91 00 10 6b 01 71 00 01 38 00 01 96 00 71     .....k.q..8....q
     2ab:	00 20 38 00 20 91 00 40 a5 03 25 03 8d 07 a4 00     . 8. ..@..%.....
     2bb:	a1 00 07 ff 03 10 33 03 a0 00 01 a0 00 02 a1 00     ......3.........
     2cb:	08 a1 00 10 9b 01 72 00 01 39 00 01 a6 00 72 00     ......r..9....r.
     2db:	20 39 00 20 a1 00 40 b7 03 25 03 98 07 24 01 21      9. ..@..%...$.!
     2eb:	01 07 ff 03 10 33 03 20 01 01 20 01 02 21 01 08     .....3. .. ..!..
     2fb:	21 01 10 cb 01 73 00 01 3a 00 01 26 01 73 00 20     !....s..:..&.s. 
     30b:	3a 00 20 21 01 40 ba 03 25 03                       :. !.@..%.

00000315 <mode2WGM_a>:
     315:	00 01 ff ff 02 03 ff ff ff ff ff 05 ff ff ff 07     ................

00000325 <prescale_a>:
     325:	06 00 00 00 01 00 08 00 40 00 00 01 00 04           ........@.....

00000333 <mode2WGM_b>:
     333:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c ff 0e 0f     ................

00000343 <prescale_b>:
     343:	08 00 00 00 01 00 08 00 20 00 40 00 80 00 00 01     ........ .@.....
     353:	00 04                                               ..

00000355 <marquee_list>:
     355:	01 04                                               ..

00000357 <Servos1_list>:
     357:	29 04 3f 04 55 04 6b 04 81 04 97 04                 ).?.U.k.....

00000363 <servos2_list>:
     363:	b9 04 cf 04 e5 04 fb 04 11 05 27 05                 ..........'.

0000036f <_B4>:
     36f:	c8 03 10                                            ...

00000372 <_B5>:
     372:	c8 03 20                                            .. 

00000375 <_B6>:
     375:	c8 03 40                                            ..@

00000378 <_B7>:
     378:	c8 03 80                                            ...

0000037b <_C0>:
     37b:	ce 03 01                                            ...

0000037e <_C1>:
     37e:	ce 03 02                                            ...

00000381 <_C2>:
     381:	ce 03 04                                            ...

00000384 <_C3>:
     384:	ce 03 08                                            ...

00000387 <_C4>:
     387:	ce 03 10                                            ...

0000038a <_C5>:
     38a:	ce 03 20                                            .. 

0000038d <_D2>:
     38d:	d4 03 04                                            ...

00000390 <_D3>:
     390:	d4 03 08                                            ...

00000393 <_D5>:
     393:	d4 03 20                                            .. 

00000396 <_D6>:
     396:	d4 03 40                                            ..@

00000399 <_D7>:
     399:	d4 03 80                                            ...

0000039c <_E3>:
     39c:	da 03 08                                            ...

0000039f <_E4>:
     39f:	da 03 10                                            ...

000003a2 <_E5>:
     3a2:	da 03 20                                            .. 

000003a5 <_E7>:
     3a5:	da 03 80                                            ...

000003a8 <_G5>:
     3a8:	e0 03 20                                            .. 

000003ab <_H3>:
     3ab:	e6 03 08                                            ...

000003ae <_H4>:
     3ae:	e6 03 10                                            ...

000003b1 <_H5>:
     3b1:	e6 03 20                                            .. 

000003b4 <_H6>:
     3b4:	e6 03 40                                            ..@

000003b7 <_L0>:
     3b7:	ec 03 01                                            ...

000003ba <_L1>:
     3ba:	ec 03 02                                            ...

000003bd <_L3>:
     3bd:	ec 03 08                                            ...

000003c0 <_L4>:
     3c0:	ec 03 10                                            ...

000003c3 <_L5>:
     3c3:	ec 03 20                                            .. 

000003c6 <AVcc_MV>:
     3c6:	88 13                                               ..

000003c8 <_PORTB>:
     3c8:	25 00 24 00 23 00                                   %.$.#.

000003ce <_PORTC>:
     3ce:	28 00 27 00 26 00                                   (.'.&.

000003d4 <_PORTD>:
     3d4:	2b 00 2a 00 29 00                                   +.*.).

000003da <_PORTE>:
     3da:	2e 00 2d 00 2c 00                                   ..-.,.

000003e0 <_PORTG>:
     3e0:	34 00 33 00 32 00                                   4.3.2.

000003e6 <_PORTH>:
     3e6:	02 01 01 01 00 01                                   ......

000003ec <_PORTL>:
     3ec:	0b 01 0a 01 09 01                                   ......

000003f2 <c_servoPWM>:
     3f2:	b6 0e ae 0e                                         ....

000003f6 <__c.1912>:
     3f6:	20 45 72 72 6f 72 3a 25 64 0d 0a 00                  Error:%d...

00000402 <__c.1910>:
     402:	55 73 65 72 00                                      User.

00000407 <__c.1908>:
     407:	57 65 62 62 6f 74 4c 69 62 00                       WebbotLib.

00000411 <atoz>:
     411:	ee 3e 9c 7a 9e 8e f6 2e 0c 78 ae 1c aa 2a 3a ce     .>.z.....x...*:.
     421:	e6 0a b6 1e 38 7c b8 6e 76 da                       ....8|.nv.

0000042b <digits>:
     42b:	fc 60 da f2 66 b6 3e e0 fe e6                       .`..f.>...

00000435 <c_hw_uart>:
     435:	b2 15 68 16 84 16 3d 16 6f 16 53 16 00 40 7a 10     ..h...=.o.S..@z.
     445:	f3 5a 00 a0 72 4e 18 09 00 10 a5 d4 e8 00 00 e8     .Z..rN..........
     455:	76 48 17 00 00 e4 0b 54 02 00 00 ca 9a 3b 00 00     vH.....T.....;..
     465:	00 e1 f5 05 00 00 80 96 98 00 00 00 40 42 0f 00     ............@B..
     475:	00 00 a0 86 01 00 00 00 10 27 00 00 00 00 e8 03     .........'......
     485:	00 00 00 00 64 00 00 00 00 00 0a 00 00 00 00 00     ....d...........
     495:	01 00 00 00 00 00 2c 76 d8 88 dc 67 4f 08 23 df     ......,v...gO.#.
     4a5:	c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51     ...Y.......S.:.Q
     4b5:	99 76 96 e8 e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c     .v.....&....b.@|
     4c5:	6f fc ef bc 9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a     o.....@...o....Z
     4d5:	2a f7 5c 93 6b 6c f9 67 6d c1 1b fc e0 e4 0d 47     *.\.kl.gm......G
     4e5:	fe f5 20 e6 b5 00 d0 ed 90 2e 03 00 94 35 77 05     .. ..........5w.
     4f5:	00 80 84 1e 08 00 00 20 4e 0a 00 00 00 c8 0c 33     ....... N......3
     505:	33 33 33 0f 98 6e 12 83 11 41 ef 8d 21 14 89 3b     333..n...A..!..;
     515:	e6 55 16 cf fe e6 db 18 d1 84 4b 38 1b f7 7c 1d     .U........K8..|.
     525:	90 1d a4 bb e4 24 20 32 84 72 5e 22 81 00 c9 f1     .....$ 2.r^"....
     535:	24 ec a1 e5 3d 27 00                                $...='.

0000053c <__ctors_start>:
     53c:	71 0c       	add	r7, r1
     53e:	81 0c       	add	r8, r1

00000540 <__ctors_end>:
     540:	11 24       	eor	r1, r1
     542:	1f be       	out	0x3f, r1	; 63
     544:	cf ef       	ldi	r28, 0xFF	; 255
     546:	d1 e2       	ldi	r29, 0x21	; 33
     548:	de bf       	out	0x3e, r29	; 62
     54a:	cd bf       	out	0x3d, r28	; 61

0000054c <__do_copy_data>:
     54c:	15 e0       	ldi	r17, 0x05	; 5
     54e:	a0 e0       	ldi	r26, 0x00	; 0
     550:	b2 e0       	ldi	r27, 0x02	; 2
     552:	ea e6       	ldi	r30, 0x6A	; 106
     554:	f3 e4       	ldi	r31, 0x43	; 67
     556:	02 c0       	rjmp	.+4      	; 0x55c <.do_copy_data_start>

00000558 <.do_copy_data_loop>:
     558:	05 90       	lpm	r0, Z+
     55a:	0d 92       	st	X+, r0

0000055c <.do_copy_data_start>:
     55c:	a6 38       	cpi	r26, 0x86	; 134
     55e:	b1 07       	cpc	r27, r17
     560:	d9 f7       	brne	.-10     	; 0x558 <.do_copy_data_loop>

00000562 <__do_clear_bss>:
     562:	18 e0       	ldi	r17, 0x08	; 8
     564:	a6 e8       	ldi	r26, 0x86	; 134
     566:	b5 e0       	ldi	r27, 0x05	; 5
     568:	01 c0       	rjmp	.+2      	; 0x56c <.do_clear_bss_start>

0000056a <.do_clear_bss_loop>:
     56a:	1d 92       	st	X+, r1

0000056c <.do_clear_bss_start>:
     56c:	a7 34       	cpi	r26, 0x47	; 71
     56e:	b1 07       	cpc	r27, r17
     570:	e1 f7       	brne	.-8      	; 0x56a <.do_clear_bss_loop>

00000572 <__do_global_ctors>:
     572:	15 e0       	ldi	r17, 0x05	; 5
     574:	c0 e4       	ldi	r28, 0x40	; 64
     576:	d5 e0       	ldi	r29, 0x05	; 5
     578:	04 c0       	rjmp	.+8      	; 0x582 <.do_global_ctors_start>

0000057a <.do_global_ctors_loop>:
     57a:	22 97       	sbiw	r28, 0x02	; 2
     57c:	fe 01       	movw	r30, r28
     57e:	0e 94 af 21 	call	0x435e	; 0x435e <__tablejump__>

00000582 <.do_global_ctors_start>:
     582:	cc 33       	cpi	r28, 0x3C	; 60
     584:	d1 07       	cpc	r29, r17
     586:	c9 f7       	brne	.-14     	; 0x57a <.do_global_ctors_loop>
     588:	0e 94 11 12 	call	0x2422	; 0x2422 <main>
     58c:	0c 94 a5 1d 	jmp	0x3b4a	; 0x3b4a <exit>

00000590 <__bad_interrupt>:
     590:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000594 <__iCliRetVal>:
#endif  /* C++ */
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
     594:	df 93       	push	r29
     596:	cf 93       	push	r28
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
     59c:	f8 94       	cli
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	cf 91       	pop	r28
     5a2:	df 91       	pop	r29
     5a4:	08 95       	ret

000005a6 <__iRestore>:
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
     5a6:	df 93       	push	r29
     5a8:	cf 93       	push	r28
     5aa:	00 d0       	rcall	.+0      	; 0x5ac <__iRestore+0x6>
     5ac:	cd b7       	in	r28, 0x3d	; 61
     5ae:	de b7       	in	r29, 0x3e	; 62
     5b0:	9a 83       	std	Y+2, r25	; 0x02
     5b2:	89 83       	std	Y+1, r24	; 0x01
     5b4:	ef e5       	ldi	r30, 0x5F	; 95
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	a9 81       	ldd	r26, Y+1	; 0x01
     5ba:	ba 81       	ldd	r27, Y+2	; 0x02
     5bc:	8c 91       	ld	r24, X
     5be:	80 83       	st	Z, r24
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	cf 91       	pop	r28
     5c6:	df 91       	pop	r29
     5c8:	08 95       	ret

000005ca <__uartAttach>:
	return (uart->rxOverflow) ? TRUE : FALSE;
}

// Redirects received data to a user function.
#define uartAttach(uart,fn, device) __uartAttach(&((uart)->_uart_),fn, device)
static __inline__ void __uartAttach(UART* uart, void (*rx_func)(unsigned char, void*),void *device){
     5ca:	df 93       	push	r29
     5cc:	cf 93       	push	r28
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
     5d2:	28 97       	sbiw	r28, 0x08	; 8
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	f8 94       	cli
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	cd bf       	out	0x3d, r28	; 61
     5de:	9c 83       	std	Y+4, r25	; 0x04
     5e0:	8b 83       	std	Y+3, r24	; 0x03
     5e2:	7e 83       	std	Y+6, r23	; 0x06
     5e4:	6d 83       	std	Y+5, r22	; 0x05
     5e6:	58 87       	std	Y+8, r21	; 0x08
     5e8:	4f 83       	std	Y+7, r20	; 0x07
	CRITICAL_SECTION{
     5ea:	ef e5       	ldi	r30, 0x5F	; 95
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	80 81       	ld	r24, Z
     5f0:	8a 83       	std	Y+2, r24	; 0x02
     5f2:	0e 94 ca 02 	call	0x594	; 0x594 <__iCliRetVal>
     5f6:	89 83       	std	Y+1, r24	; 0x01
     5f8:	0d c0       	rjmp	.+26     	; 0x614 <__uartAttach+0x4a>
		uart->rxFunc = rx_func;
     5fa:	eb 81       	ldd	r30, Y+3	; 0x03
     5fc:	fc 81       	ldd	r31, Y+4	; 0x04
     5fe:	8d 81       	ldd	r24, Y+5	; 0x05
     600:	9e 81       	ldd	r25, Y+6	; 0x06
     602:	95 83       	std	Z+5, r25	; 0x05
     604:	84 83       	std	Z+4, r24	; 0x04
		uart->rxFuncData = device;
     606:	eb 81       	ldd	r30, Y+3	; 0x03
     608:	fc 81       	ldd	r31, Y+4	; 0x04
     60a:	8f 81       	ldd	r24, Y+7	; 0x07
     60c:	98 85       	ldd	r25, Y+8	; 0x08
     60e:	97 83       	std	Z+7, r25	; 0x07
     610:	86 83       	std	Z+6, r24	; 0x06
}

// Redirects received data to a user function.
#define uartAttach(uart,fn, device) __uartAttach(&((uart)->_uart_),fn, device)
static __inline__ void __uartAttach(UART* uart, void (*rx_func)(unsigned char, void*),void *device){
	CRITICAL_SECTION{
     612:	19 82       	std	Y+1, r1	; 0x01
     614:	89 81       	ldd	r24, Y+1	; 0x01
     616:	88 23       	and	r24, r24
     618:	81 f7       	brne	.-32     	; 0x5fa <__uartAttach+0x30>
		uart->rxFunc = rx_func;
		uart->rxFuncData = device;
	}
     61a:	ce 01       	movw	r24, r28
     61c:	02 96       	adiw	r24, 0x02	; 2
     61e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__iRestore>
}
     622:	28 96       	adiw	r28, 0x08	; 8
     624:	0f b6       	in	r0, 0x3f	; 63
     626:	f8 94       	cli
     628:	de bf       	out	0x3e, r29	; 62
     62a:	0f be       	out	0x3f, r0	; 63
     62c:	cd bf       	out	0x3d, r28	; 61
     62e:	cf 91       	pop	r28
     630:	df 91       	pop	r29
     632:	08 95       	ret

00000634 <_ZN4Uart6attachEPFvhRS_PvES1_>:
	}
	void off(void) const {
		_uartOff(m_cstr);
	}

	void attach(void (*rx_func)(unsigned char, Uart&, void*), void* param = NULL){
     634:	df 93       	push	r29
     636:	cf 93       	push	r28
     638:	00 d0       	rcall	.+0      	; 0x63a <_ZN4Uart6attachEPFvhRS_PvES1_+0x6>
     63a:	00 d0       	rcall	.+0      	; 0x63c <_ZN4Uart6attachEPFvhRS_PvES1_+0x8>
     63c:	00 d0       	rcall	.+0      	; 0x63e <_ZN4Uart6attachEPFvhRS_PvES1_+0xa>
     63e:	cd b7       	in	r28, 0x3d	; 61
     640:	de b7       	in	r29, 0x3e	; 62
     642:	9a 83       	std	Y+2, r25	; 0x02
     644:	89 83       	std	Y+1, r24	; 0x01
     646:	7c 83       	std	Y+4, r23	; 0x04
     648:	6b 83       	std	Y+3, r22	; 0x03
     64a:	5e 83       	std	Y+6, r21	; 0x06
     64c:	4d 83       	std	Y+5, r20	; 0x05
		m_rx_func = rx_func;						// Remember the user routine
     64e:	e9 81       	ldd	r30, Y+1	; 0x01
     650:	fa 81       	ldd	r31, Y+2	; 0x02
     652:	8b 81       	ldd	r24, Y+3	; 0x03
     654:	9c 81       	ldd	r25, Y+4	; 0x04
     656:	93 8b       	std	Z+19, r25	; 0x13
     658:	82 8b       	std	Z+18, r24	; 0x12
		m_param = param;
     65a:	e9 81       	ldd	r30, Y+1	; 0x01
     65c:	fa 81       	ldd	r31, Y+2	; 0x02
     65e:	8d 81       	ldd	r24, Y+5	; 0x05
     660:	9e 81       	ldd	r25, Y+6	; 0x06
     662:	95 8b       	std	Z+21, r25	; 0x15
     664:	84 8b       	std	Z+20, r24	; 0x14
		__uartAttach(m_cstr,&Uart::rx_func,this);	// Callback my static method
     666:	e9 81       	ldd	r30, Y+1	; 0x01
     668:	fa 81       	ldd	r31, Y+2	; 0x02
     66a:	80 89       	ldd	r24, Z+16	; 0x10
     66c:	91 89       	ldd	r25, Z+17	; 0x11
     66e:	27 e4       	ldi	r18, 0x47	; 71
     670:	33 e0       	ldi	r19, 0x03	; 3
     672:	49 81       	ldd	r20, Y+1	; 0x01
     674:	5a 81       	ldd	r21, Y+2	; 0x02
     676:	b9 01       	movw	r22, r18
     678:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__uartAttach>

	}
     67c:	26 96       	adiw	r28, 0x06	; 6
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	f8 94       	cli
     682:	de bf       	out	0x3e, r29	; 62
     684:	0f be       	out	0x3f, r0	; 63
     686:	cd bf       	out	0x3d, r28	; 61
     688:	cf 91       	pop	r28
     68a:	df 91       	pop	r29
     68c:	08 95       	ret

0000068e <_ZN4Uart7rx_funcEhPv>:
		return __uartGetByte(m_cstr);
	}

protected:
	// Generic call back
	static void rx_func(unsigned char c, void * device){
     68e:	df 93       	push	r29
     690:	cf 93       	push	r28
     692:	00 d0       	rcall	.+0      	; 0x694 <_ZN4Uart7rx_funcEhPv+0x6>
     694:	00 d0       	rcall	.+0      	; 0x696 <_ZN4Uart7rx_funcEhPv+0x8>
     696:	0f 92       	push	r0
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	8b 83       	std	Y+3, r24	; 0x03
     69e:	7d 83       	std	Y+5, r23	; 0x05
     6a0:	6c 83       	std	Y+4, r22	; 0x04
		Uart* inst = (Uart*)(device);
     6a2:	8c 81       	ldd	r24, Y+4	; 0x04
     6a4:	9d 81       	ldd	r25, Y+5	; 0x05
     6a6:	9a 83       	std	Y+2, r25	; 0x02
     6a8:	89 83       	std	Y+1, r24	; 0x01
		if(inst->m_rx_func){
     6aa:	e9 81       	ldd	r30, Y+1	; 0x01
     6ac:	fa 81       	ldd	r31, Y+2	; 0x02
     6ae:	82 89       	ldd	r24, Z+18	; 0x12
     6b0:	93 89       	ldd	r25, Z+19	; 0x13
     6b2:	00 97       	sbiw	r24, 0x00	; 0
     6b4:	71 f0       	breq	.+28     	; 0x6d2 <_ZN4Uart7rx_funcEhPv+0x44>
			inst->m_rx_func(c,*inst, inst->m_param);
     6b6:	e9 81       	ldd	r30, Y+1	; 0x01
     6b8:	fa 81       	ldd	r31, Y+2	; 0x02
     6ba:	a2 89       	ldd	r26, Z+18	; 0x12
     6bc:	b3 89       	ldd	r27, Z+19	; 0x13
     6be:	e9 81       	ldd	r30, Y+1	; 0x01
     6c0:	fa 81       	ldd	r31, Y+2	; 0x02
     6c2:	44 89       	ldd	r20, Z+20	; 0x14
     6c4:	55 89       	ldd	r21, Z+21	; 0x15
     6c6:	29 81       	ldd	r18, Y+1	; 0x01
     6c8:	3a 81       	ldd	r19, Y+2	; 0x02
     6ca:	8b 81       	ldd	r24, Y+3	; 0x03
     6cc:	b9 01       	movw	r22, r18
     6ce:	fd 01       	movw	r30, r26
     6d0:	09 95       	icall
		}
	}
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	cf 91       	pop	r28
     6de:	df 91       	pop	r29
     6e0:	08 95       	ret

000006e2 <__act_getSpeed>:
* Define methods common to all actuators
-----------------------------------------------------------------------------------------*/

void __act_setSpeed(__ACTUATOR* act, DRIVE_SPEED speed);

static __inline__ DRIVE_SPEED __act_getSpeed(const __ACTUATOR* act){
     6e2:	df 93       	push	r29
     6e4:	cf 93       	push	r28
     6e6:	00 d0       	rcall	.+0      	; 0x6e8 <__act_getSpeed+0x6>
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
     6ec:	9a 83       	std	Y+2, r25	; 0x02
     6ee:	89 83       	std	Y+1, r24	; 0x01
	return act->required_speed;
     6f0:	e9 81       	ldd	r30, Y+1	; 0x01
     6f2:	fa 81       	ldd	r31, Y+2	; 0x02
     6f4:	82 81       	ldd	r24, Z+2	; 0x02
}
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	cf 91       	pop	r28
     6fc:	df 91       	pop	r29
     6fe:	08 95       	ret

00000700 <_ZNK8Actuator8getSpeedEv>:
		m_cstr = cstr;
	}
	void setSpeed(DRIVE_SPEED speed){
		__act_setSpeed(m_cstr,speed);
	}
	DRIVE_SPEED getSpeed(void) const{
     700:	df 93       	push	r29
     702:	cf 93       	push	r28
     704:	00 d0       	rcall	.+0      	; 0x706 <_ZNK8Actuator8getSpeedEv+0x6>
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
     70a:	9a 83       	std	Y+2, r25	; 0x02
     70c:	89 83       	std	Y+1, r24	; 0x01
		return __act_getSpeed(m_cstr);
     70e:	e9 81       	ldd	r30, Y+1	; 0x01
     710:	fa 81       	ldd	r31, Y+2	; 0x02
     712:	80 81       	ld	r24, Z
     714:	91 81       	ldd	r25, Z+1	; 0x01
     716:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__act_getSpeed>
	}
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	cf 91       	pop	r28
     720:	df 91       	pop	r29
     722:	08 95       	ret

00000724 <_Z18initialize_commandP7command>:
char r_curr_subcommand;
int8_t r_curr_servo;

TICK_COUNT last_loop_time;

void initialize_command (struct command* command) {
     724:	df 93       	push	r29
     726:	cf 93       	push	r28
     728:	00 d0       	rcall	.+0      	; 0x72a <_Z18initialize_commandP7command+0x6>
     72a:	00 d0       	rcall	.+0      	; 0x72c <_Z18initialize_commandP7command+0x8>
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	9c 83       	std	Y+4, r25	; 0x04
     732:	8b 83       	std	Y+3, r24	; 0x03
	(*command).time = 1;
     734:	8b 81       	ldd	r24, Y+3	; 0x03
     736:	9c 81       	ldd	r25, Y+4	; 0x04
     738:	fc 01       	movw	r30, r24
     73a:	e5 54       	subi	r30, 0x45	; 69
     73c:	ff 4f       	sbci	r31, 0xFF	; 255
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	91 83       	std	Z+1, r25	; 0x01
     744:	80 83       	st	Z, r24
	for(int16_t i=0;i<=SERVOS_NUMBER;i++) {
     746:	1a 82       	std	Y+2, r1	; 0x02
     748:	19 82       	std	Y+1, r1	; 0x01
     74a:	5e c0       	rjmp	.+188    	; 0x808 <_Z18initialize_commandP7command+0xe4>
		(*command).servo_target_positions[i]=MY_DRIVE_SPEED_AVERAGE;
     74c:	89 81       	ldd	r24, Y+1	; 0x01
     74e:	9a 81       	ldd	r25, Y+2	; 0x02
     750:	2b 81       	ldd	r18, Y+3	; 0x03
     752:	3c 81       	ldd	r19, Y+4	; 0x04
     754:	88 0f       	add	r24, r24
     756:	99 1f       	adc	r25, r25
     758:	88 0f       	add	r24, r24
     75a:	99 1f       	adc	r25, r25
     75c:	f9 01       	movw	r30, r18
     75e:	e8 0f       	add	r30, r24
     760:	f9 1f       	adc	r31, r25
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e8       	ldi	r25, 0x80	; 128
     766:	ab eb       	ldi	r26, 0xBB	; 187
     768:	b4 e4       	ldi	r27, 0x44	; 68
     76a:	80 83       	st	Z, r24
     76c:	91 83       	std	Z+1, r25	; 0x01
     76e:	a2 83       	std	Z+2, r26	; 0x02
     770:	b3 83       	std	Z+3, r27	; 0x03
		(*command).servo_current_positions[i]=MY_DRIVE_SPEED_AVERAGE;
     772:	89 81       	ldd	r24, Y+1	; 0x01
     774:	9a 81       	ldd	r25, Y+2	; 0x02
     776:	2b 81       	ldd	r18, Y+3	; 0x03
     778:	3c 81       	ldd	r19, Y+4	; 0x04
     77a:	0b 96       	adiw	r24, 0x0b	; 11
     77c:	88 0f       	add	r24, r24
     77e:	99 1f       	adc	r25, r25
     780:	88 0f       	add	r24, r24
     782:	99 1f       	adc	r25, r25
     784:	f9 01       	movw	r30, r18
     786:	e8 0f       	add	r30, r24
     788:	f9 1f       	adc	r31, r25
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	90 e8       	ldi	r25, 0x80	; 128
     78e:	ab eb       	ldi	r26, 0xBB	; 187
     790:	b4 e4       	ldi	r27, 0x44	; 68
     792:	80 83       	st	Z, r24
     794:	91 83       	std	Z+1, r25	; 0x01
     796:	a2 83       	std	Z+2, r26	; 0x02
     798:	b3 83       	std	Z+3, r27	; 0x03
		(*command).servo_speeds[i]=10;
     79a:	89 81       	ldd	r24, Y+1	; 0x01
     79c:	9a 81       	ldd	r25, Y+2	; 0x02
     79e:	2b 81       	ldd	r18, Y+3	; 0x03
     7a0:	3c 81       	ldd	r19, Y+4	; 0x04
     7a2:	46 96       	adiw	r24, 0x16	; 22
     7a4:	88 0f       	add	r24, r24
     7a6:	99 1f       	adc	r25, r25
     7a8:	88 0f       	add	r24, r24
     7aa:	99 1f       	adc	r25, r25
     7ac:	f9 01       	movw	r30, r18
     7ae:	e8 0f       	add	r30, r24
     7b0:	f9 1f       	adc	r31, r25
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	a0 e2       	ldi	r26, 0x20	; 32
     7b8:	b1 e4       	ldi	r27, 0x41	; 65
     7ba:	80 83       	st	Z, r24
     7bc:	91 83       	std	Z+1, r25	; 0x01
     7be:	a2 83       	std	Z+2, r26	; 0x02
     7c0:	b3 83       	std	Z+3, r27	; 0x03
		(*command).servo_speed_per_tick[i]=100;
     7c2:	89 81       	ldd	r24, Y+1	; 0x01
     7c4:	9a 81       	ldd	r25, Y+2	; 0x02
     7c6:	2b 81       	ldd	r18, Y+3	; 0x03
     7c8:	3c 81       	ldd	r19, Y+4	; 0x04
     7ca:	81 96       	adiw	r24, 0x21	; 33
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	88 0f       	add	r24, r24
     7d2:	99 1f       	adc	r25, r25
     7d4:	f9 01       	movw	r30, r18
     7d6:	e8 0f       	add	r30, r24
     7d8:	f9 1f       	adc	r31, r25
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	a8 ec       	ldi	r26, 0xC8	; 200
     7e0:	b2 e4       	ldi	r27, 0x42	; 66
     7e2:	80 83       	st	Z, r24
     7e4:	91 83       	std	Z+1, r25	; 0x01
     7e6:	a2 83       	std	Z+2, r26	; 0x02
     7e8:	b3 83       	std	Z+3, r27	; 0x03
		(*command).has_changed[i]=0;
     7ea:	29 81       	ldd	r18, Y+1	; 0x01
     7ec:	3a 81       	ldd	r19, Y+2	; 0x02
     7ee:	8b 81       	ldd	r24, Y+3	; 0x03
     7f0:	9c 81       	ldd	r25, Y+4	; 0x04
     7f2:	82 0f       	add	r24, r18
     7f4:	93 1f       	adc	r25, r19
     7f6:	fc 01       	movw	r30, r24
     7f8:	e0 55       	subi	r30, 0x50	; 80
     7fa:	ff 4f       	sbci	r31, 0xFF	; 255
     7fc:	10 82       	st	Z, r1

TICK_COUNT last_loop_time;

void initialize_command (struct command* command) {
	(*command).time = 1;
	for(int16_t i=0;i<=SERVOS_NUMBER;i++) {
     7fe:	89 81       	ldd	r24, Y+1	; 0x01
     800:	9a 81       	ldd	r25, Y+2	; 0x02
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	9a 83       	std	Y+2, r25	; 0x02
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	89 81       	ldd	r24, Y+1	; 0x01
     80a:	9a 81       	ldd	r25, Y+2	; 0x02
     80c:	8c 30       	cpi	r24, 0x0C	; 12
     80e:	91 05       	cpc	r25, r1
     810:	0c f4       	brge	.+2      	; 0x814 <_Z18initialize_commandP7command+0xf0>
     812:	9c cf       	rjmp	.-200    	; 0x74c <_Z18initialize_commandP7command+0x28>
		(*command).servo_current_positions[i]=MY_DRIVE_SPEED_AVERAGE;
		(*command).servo_speeds[i]=10;
		(*command).servo_speed_per_tick[i]=100;
		(*command).has_changed[i]=0;
	}
}
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	cf 91       	pop	r28
     81e:	df 91       	pop	r29
     820:	08 95       	ret

00000822 <appInitSoftware>:
	servos[11] = &servo12;
	initialize_command(&command_receiving);
	initialize_command(&command_in_process);
}
// Initialise the software
TICK_COUNT appInitSoftware(TICK_COUNT loopStart){
     822:	df 93       	push	r29
     824:	cf 93       	push	r28
     826:	00 d0       	rcall	.+0      	; 0x828 <appInitSoftware+0x6>
     828:	00 d0       	rcall	.+0      	; 0x82a <appInitSoftware+0x8>
     82a:	cd b7       	in	r28, 0x3d	; 61
     82c:	de b7       	in	r29, 0x3e	; 62
     82e:	69 83       	std	Y+1, r22	; 0x01
     830:	7a 83       	std	Y+2, r23	; 0x02
     832:	8b 83       	std	Y+3, r24	; 0x03
     834:	9c 83       	std	Y+4, r25	; 0x04
	uart1.attach(&reader, NULL);
     836:	8f ee       	ldi	r24, 0xEF	; 239
     838:	97 e0       	ldi	r25, 0x07	; 7
     83a:	2f e3       	ldi	r18, 0x3F	; 63
     83c:	37 e0       	ldi	r19, 0x07	; 7
     83e:	b9 01       	movw	r22, r18
     840:	40 e0       	ldi	r20, 0x00	; 0
     842:	50 e0       	ldi	r21, 0x00	; 0
     844:	0e 94 1a 03 	call	0x634	; 0x634 <_ZN4Uart6attachEPFvhRS_PvES1_>
	return 0;
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	a0 e0       	ldi	r26, 0x00	; 0
     84e:	b0 e0       	ldi	r27, 0x00	; 0
}
     850:	bc 01       	movw	r22, r24
     852:	cd 01       	movw	r24, r26
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	cf 91       	pop	r28
     85e:	df 91       	pop	r29
     860:	08 95       	ret

00000862 <_ZN8Actuator8setSpeedEa>:
class Actuator{
public:
	Actuator(__ACTUATOR* cstr){
		m_cstr = cstr;
	}
	void setSpeed(DRIVE_SPEED speed){
     862:	df 93       	push	r29
     864:	cf 93       	push	r28
     866:	00 d0       	rcall	.+0      	; 0x868 <_ZN8Actuator8setSpeedEa+0x6>
     868:	0f 92       	push	r0
     86a:	cd b7       	in	r28, 0x3d	; 61
     86c:	de b7       	in	r29, 0x3e	; 62
     86e:	9a 83       	std	Y+2, r25	; 0x02
     870:	89 83       	std	Y+1, r24	; 0x01
     872:	6b 83       	std	Y+3, r22	; 0x03
		__act_setSpeed(m_cstr,speed);
     874:	e9 81       	ldd	r30, Y+1	; 0x01
     876:	fa 81       	ldd	r31, Y+2	; 0x02
     878:	80 81       	ld	r24, Z
     87a:	91 81       	ldd	r25, Z+1	; 0x01
     87c:	6b 81       	ldd	r22, Y+3	; 0x03
     87e:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__act_setSpeed>
	}
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	cf 91       	pop	r28
     88a:	df 91       	pop	r29
     88c:	08 95       	ret

0000088e <appControl>:
// This is the main loop
TICK_COUNT appControl(LOOP_COUNT loopCount, TICK_COUNT loopStart) {
     88e:	0f 93       	push	r16
     890:	1f 93       	push	r17
     892:	df 93       	push	r29
     894:	cf 93       	push	r28
     896:	cd b7       	in	r28, 0x3d	; 61
     898:	de b7       	in	r29, 0x3e	; 62
     89a:	2a 97       	sbiw	r28, 0x0a	; 10
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	f8 94       	cli
     8a0:	de bf       	out	0x3e, r29	; 62
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	cd bf       	out	0x3d, r28	; 61
     8a6:	6b 83       	std	Y+3, r22	; 0x03
     8a8:	7c 83       	std	Y+4, r23	; 0x04
     8aa:	8d 83       	std	Y+5, r24	; 0x05
     8ac:	9e 83       	std	Y+6, r25	; 0x06
     8ae:	2f 83       	std	Y+7, r18	; 0x07
     8b0:	38 87       	std	Y+8, r19	; 0x08
     8b2:	49 87       	std	Y+9, r20	; 0x09
     8b4:	5a 87       	std	Y+10, r21	; 0x0a
	if (loopStart > (last_loop_time + SSC_RESOLUTION)) {   
     8b6:	80 91 18 07 	lds	r24, 0x0718
     8ba:	90 91 19 07 	lds	r25, 0x0719
     8be:	a0 91 1a 07 	lds	r26, 0x071A
     8c2:	b0 91 1b 07 	lds	r27, 0x071B
     8c6:	9c 01       	movw	r18, r24
     8c8:	ad 01       	movw	r20, r26
     8ca:	20 56       	subi	r18, 0x60	; 96
     8cc:	39 47       	sbci	r19, 0x79	; 121
     8ce:	4e 4f       	sbci	r20, 0xFE	; 254
     8d0:	5f 4f       	sbci	r21, 0xFF	; 255
     8d2:	8f 81       	ldd	r24, Y+7	; 0x07
     8d4:	98 85       	ldd	r25, Y+8	; 0x08
     8d6:	a9 85       	ldd	r26, Y+9	; 0x09
     8d8:	ba 85       	ldd	r27, Y+10	; 0x0a
     8da:	28 17       	cp	r18, r24
     8dc:	39 07       	cpc	r19, r25
     8de:	4a 07       	cpc	r20, r26
     8e0:	5b 07       	cpc	r21, r27
     8e2:	08 f0       	brcs	.+2      	; 0x8e6 <appControl+0x58>
     8e4:	55 c0       	rjmp	.+170    	; 0x990 <appControl+0x102>
		last_loop_time = loopStart;
     8e6:	8f 81       	ldd	r24, Y+7	; 0x07
     8e8:	98 85       	ldd	r25, Y+8	; 0x08
     8ea:	a9 85       	ldd	r26, Y+9	; 0x09
     8ec:	ba 85       	ldd	r27, Y+10	; 0x0a
     8ee:	80 93 18 07 	sts	0x0718, r24
     8f2:	90 93 19 07 	sts	0x0719, r25
     8f6:	a0 93 1a 07 	sts	0x071A, r26
     8fa:	b0 93 1b 07 	sts	0x071B, r27
			command_in_process.time--;
		}


*/
		for (int8_t j=0; j <= SERVOS_NUMBER; j++) {
     8fe:	1a 82       	std	Y+2, r1	; 0x02
     900:	43 c0       	rjmp	.+134    	; 0x988 <appControl+0xfa>
			if (command_in_process.has_changed[j] == 1) {
     902:	8a 81       	ldd	r24, Y+2	; 0x02
     904:	99 27       	eor	r25, r25
     906:	87 fd       	sbrc	r24, 7
     908:	90 95       	com	r25
     90a:	fc 01       	movw	r30, r24
     90c:	e7 5f       	subi	r30, 0xF7	; 247
     90e:	f8 4f       	sbci	r31, 0xF8	; 248
     910:	80 81       	ld	r24, Z
     912:	81 30       	cpi	r24, 0x01	; 1
     914:	b1 f5       	brne	.+108    	; 0x982 <appControl+0xf4>
				DRIVE_SPEED speed = interpolate((int16_t)command_in_process.servo_target_positions[j], MY_DRIVE_SPEED_MIN, MY_DRIVE_SPEED_MAX, DRIVE_SPEED_MIN,DRIVE_SPEED_MAX);
     916:	8a 81       	ldd	r24, Y+2	; 0x02
     918:	99 27       	eor	r25, r25
     91a:	87 fd       	sbrc	r24, 7
     91c:	90 95       	com	r25
     91e:	88 0f       	add	r24, r24
     920:	99 1f       	adc	r25, r25
     922:	88 0f       	add	r24, r24
     924:	99 1f       	adc	r25, r25
     926:	fc 01       	movw	r30, r24
     928:	e7 5a       	subi	r30, 0xA7	; 167
     92a:	f9 4f       	sbci	r31, 0xF9	; 249
     92c:	80 81       	ld	r24, Z
     92e:	91 81       	ldd	r25, Z+1	; 0x01
     930:	a2 81       	ldd	r26, Z+2	; 0x02
     932:	b3 81       	ldd	r27, Z+3	; 0x03
     934:	bc 01       	movw	r22, r24
     936:	cd 01       	movw	r24, r26
     938:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <__fixsfsi>
     93c:	dc 01       	movw	r26, r24
     93e:	cb 01       	movw	r24, r22
     940:	64 ef       	ldi	r22, 0xF4	; 244
     942:	71 e0       	ldi	r23, 0x01	; 1
     944:	44 ec       	ldi	r20, 0xC4	; 196
     946:	59 e0       	ldi	r21, 0x09	; 9
     948:	21 e8       	ldi	r18, 0x81	; 129
     94a:	3f ef       	ldi	r19, 0xFF	; 255
     94c:	0f e7       	ldi	r16, 0x7F	; 127
     94e:	10 e0       	ldi	r17, 0x00	; 0
     950:	0e 94 99 10 	call	0x2132	; 0x2132 <interpolate>
     954:	89 83       	std	Y+1, r24	; 0x01
				(*servos[j]).setSpeed(speed);  
     956:	8a 81       	ldd	r24, Y+2	; 0x02
     958:	99 27       	eor	r25, r25
     95a:	87 fd       	sbrc	r24, 7
     95c:	90 95       	com	r25
     95e:	88 0f       	add	r24, r24
     960:	99 1f       	adc	r25, r25
     962:	fc 01       	movw	r30, r24
     964:	ea 57       	subi	r30, 0x7A	; 122
     966:	fa 4f       	sbci	r31, 0xFA	; 250
     968:	80 81       	ld	r24, Z
     96a:	91 81       	ldd	r25, Z+1	; 0x01
     96c:	69 81       	ldd	r22, Y+1	; 0x01
     96e:	0e 94 31 04 	call	0x862	; 0x862 <_ZN8Actuator8setSpeedEa>
				command_in_process.has_changed[j] = 0;
     972:	8a 81       	ldd	r24, Y+2	; 0x02
     974:	99 27       	eor	r25, r25
     976:	87 fd       	sbrc	r24, 7
     978:	90 95       	com	r25
     97a:	fc 01       	movw	r30, r24
     97c:	e7 5f       	subi	r30, 0xF7	; 247
     97e:	f8 4f       	sbci	r31, 0xF8	; 248
     980:	10 82       	st	Z, r1
			command_in_process.time--;
		}


*/
		for (int8_t j=0; j <= SERVOS_NUMBER; j++) {
     982:	8a 81       	ldd	r24, Y+2	; 0x02
     984:	8f 5f       	subi	r24, 0xFF	; 255
     986:	8a 83       	std	Y+2, r24	; 0x02
     988:	8a 81       	ldd	r24, Y+2	; 0x02
     98a:	8c 30       	cpi	r24, 0x0C	; 12
     98c:	0c f4       	brge	.+2      	; 0x990 <appControl+0x102>
     98e:	b9 cf       	rjmp	.-142    	; 0x902 <appControl+0x74>
				command_in_process.has_changed[j] = 0;
			}
		}
		
	}
	return 0;
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	a0 e0       	ldi	r26, 0x00	; 0
     996:	b0 e0       	ldi	r27, 0x00	; 0
}
     998:	bc 01       	movw	r22, r24
     99a:	cd 01       	movw	r24, r26
     99c:	2a 96       	adiw	r28, 0x0a	; 10
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	f8 94       	cli
     9a2:	de bf       	out	0x3e, r29	; 62
     9a4:	0f be       	out	0x3f, r0	; 63
     9a6:	cd bf       	out	0x3d, r28	; 61
     9a8:	cf 91       	pop	r28
     9aa:	df 91       	pop	r29
     9ac:	1f 91       	pop	r17
     9ae:	0f 91       	pop	r16
     9b0:	08 95       	ret

000009b2 <appInitHardware>:
	}
}


// Initialise the hardware
void appInitHardware(void) {
     9b2:	df 93       	push	r29
     9b4:	cf 93       	push	r28
     9b6:	cd b7       	in	r28, 0x3d	; 61
     9b8:	de b7       	in	r29, 0x3e	; 62
	initHardware();
     9ba:	0e 94 be 0b 	call	0x177c	; 0x177c <initHardware>
	servos[0] = &servo;
     9be:	8b eb       	ldi	r24, 0xBB	; 187
     9c0:	97 e0       	ldi	r25, 0x07	; 7
     9c2:	90 93 87 05 	sts	0x0587, r25
     9c6:	80 93 86 05 	sts	0x0586, r24
	servos[1] = &servo2;
     9ca:	8f eb       	ldi	r24, 0xBF	; 191
     9cc:	97 e0       	ldi	r25, 0x07	; 7
     9ce:	90 93 89 05 	sts	0x0589, r25
     9d2:	80 93 88 05 	sts	0x0588, r24
	servos[2] = &servo3;
     9d6:	83 ec       	ldi	r24, 0xC3	; 195
     9d8:	97 e0       	ldi	r25, 0x07	; 7
     9da:	90 93 8b 05 	sts	0x058B, r25
     9de:	80 93 8a 05 	sts	0x058A, r24
	servos[3] = &servo4;
     9e2:	87 ec       	ldi	r24, 0xC7	; 199
     9e4:	97 e0       	ldi	r25, 0x07	; 7
     9e6:	90 93 8d 05 	sts	0x058D, r25
     9ea:	80 93 8c 05 	sts	0x058C, r24
	servos[4] = &servo5;
     9ee:	8b ec       	ldi	r24, 0xCB	; 203
     9f0:	97 e0       	ldi	r25, 0x07	; 7
     9f2:	90 93 8f 05 	sts	0x058F, r25
     9f6:	80 93 8e 05 	sts	0x058E, r24
	servos[5] = &servo6;
     9fa:	8f ec       	ldi	r24, 0xCF	; 207
     9fc:	97 e0       	ldi	r25, 0x07	; 7
     9fe:	90 93 91 05 	sts	0x0591, r25
     a02:	80 93 90 05 	sts	0x0590, r24
	servos[6] = &servo7;
     a06:	85 ed       	ldi	r24, 0xD5	; 213
     a08:	97 e0       	ldi	r25, 0x07	; 7
     a0a:	90 93 93 05 	sts	0x0593, r25
     a0e:	80 93 92 05 	sts	0x0592, r24
	servos[7] = &servo8;
     a12:	89 ed       	ldi	r24, 0xD9	; 217
     a14:	97 e0       	ldi	r25, 0x07	; 7
     a16:	90 93 95 05 	sts	0x0595, r25
     a1a:	80 93 94 05 	sts	0x0594, r24
	servos[8] = &servo9;
     a1e:	8d ed       	ldi	r24, 0xDD	; 221
     a20:	97 e0       	ldi	r25, 0x07	; 7
     a22:	90 93 97 05 	sts	0x0597, r25
     a26:	80 93 96 05 	sts	0x0596, r24
	servos[9] = &servo10;
     a2a:	81 ee       	ldi	r24, 0xE1	; 225
     a2c:	97 e0       	ldi	r25, 0x07	; 7
     a2e:	90 93 99 05 	sts	0x0599, r25
     a32:	80 93 98 05 	sts	0x0598, r24
	servos[10] = &servo11;
     a36:	85 ee       	ldi	r24, 0xE5	; 229
     a38:	97 e0       	ldi	r25, 0x07	; 7
     a3a:	90 93 9b 05 	sts	0x059B, r25
     a3e:	80 93 9a 05 	sts	0x059A, r24
	servos[11] = &servo12;
     a42:	89 ee       	ldi	r24, 0xE9	; 233
     a44:	97 e0       	ldi	r25, 0x07	; 7
     a46:	90 93 9d 05 	sts	0x059D, r25
     a4a:	80 93 9c 05 	sts	0x059C, r24
	initialize_command(&command_receiving);
     a4e:	8c e9       	ldi	r24, 0x9C	; 156
     a50:	95 e0       	ldi	r25, 0x05	; 5
     a52:	0e 94 92 03 	call	0x724	; 0x724 <_Z18initialize_commandP7command>
	initialize_command(&command_in_process);
     a56:	89 e5       	ldi	r24, 0x59	; 89
     a58:	96 e0       	ldi	r25, 0x06	; 6
     a5a:	0e 94 92 03 	call	0x724	; 0x724 <_Z18initialize_commandP7command>
}
     a5e:	cf 91       	pop	r28
     a60:	df 91       	pop	r29
     a62:	08 95       	ret

00000a64 <_ZN6StreamlsEh>:
		return print(str);
	}
	Stream& operator<< (char c ){
		return print(c);
	}
	Stream& operator<< (uint8_t num ){
     a64:	df 93       	push	r29
     a66:	cf 93       	push	r28
     a68:	00 d0       	rcall	.+0      	; 0xa6a <_ZN6StreamlsEh+0x6>
     a6a:	0f 92       	push	r0
     a6c:	cd b7       	in	r28, 0x3d	; 61
     a6e:	de b7       	in	r29, 0x3e	; 62
     a70:	9a 83       	std	Y+2, r25	; 0x02
     a72:	89 83       	std	Y+1, r24	; 0x01
     a74:	6b 83       	std	Y+3, r22	; 0x03
		return print(num);
     a76:	89 81       	ldd	r24, Y+1	; 0x01
     a78:	9a 81       	ldd	r25, Y+2	; 0x02
     a7a:	6b 81       	ldd	r22, Y+3	; 0x03
     a7c:	0e 94 44 10 	call	0x2088	; 0x2088 <_ZN6Stream5printEh>
	}
     a80:	0f 90       	pop	r0
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	cf 91       	pop	r28
     a88:	df 91       	pop	r29
     a8a:	08 95       	ret

00000a8c <_ZN6StreamlsEc>:
	}

	Stream& operator<< (const char str[] ){
		return print(str);
	}
	Stream& operator<< (char c ){
     a8c:	df 93       	push	r29
     a8e:	cf 93       	push	r28
     a90:	00 d0       	rcall	.+0      	; 0xa92 <_ZN6StreamlsEc+0x6>
     a92:	0f 92       	push	r0
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
     a98:	9a 83       	std	Y+2, r25	; 0x02
     a9a:	89 83       	std	Y+1, r24	; 0x01
     a9c:	6b 83       	std	Y+3, r22	; 0x03
		return print(c);
     a9e:	89 81       	ldd	r24, Y+1	; 0x01
     aa0:	9a 81       	ldd	r25, Y+2	; 0x02
     aa2:	6b 81       	ldd	r22, Y+3	; 0x03
     aa4:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <_ZN6Stream5printEc>
	}
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	cf 91       	pop	r28
     ab0:	df 91       	pop	r29
     ab2:	08 95       	ret

00000ab4 <_ZN6StreamlsEa>:
		return print(num);
	}
	Stream& operator<< (uint32_t num ){
		return print(num);
	}
	Stream& operator<< (int8_t num ){
     ab4:	df 93       	push	r29
     ab6:	cf 93       	push	r28
     ab8:	00 d0       	rcall	.+0      	; 0xaba <_ZN6StreamlsEa+0x6>
     aba:	0f 92       	push	r0
     abc:	cd b7       	in	r28, 0x3d	; 61
     abe:	de b7       	in	r29, 0x3e	; 62
     ac0:	9a 83       	std	Y+2, r25	; 0x02
     ac2:	89 83       	std	Y+1, r24	; 0x01
     ac4:	6b 83       	std	Y+3, r22	; 0x03
		return print(num);
     ac6:	89 81       	ldd	r24, Y+1	; 0x01
     ac8:	9a 81       	ldd	r25, Y+2	; 0x02
     aca:	6b 81       	ldd	r22, Y+3	; 0x03
     acc:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <_ZN6Stream5printEa>
	}
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
     ad4:	0f 90       	pop	r0
     ad6:	cf 91       	pop	r28
     ad8:	df 91       	pop	r29
     ada:	08 95       	ret

00000adc <_ZN6StreamlsEd>:
		return print(num);
	}
	Stream& operator<< (int32_t num ){
		return print(num);
	}
	Stream& operator<< (double num ){
     adc:	df 93       	push	r29
     ade:	cf 93       	push	r28
     ae0:	00 d0       	rcall	.+0      	; 0xae2 <_ZN6StreamlsEd+0x6>
     ae2:	00 d0       	rcall	.+0      	; 0xae4 <_ZN6StreamlsEd+0x8>
     ae4:	00 d0       	rcall	.+0      	; 0xae6 <_ZN6StreamlsEd+0xa>
     ae6:	cd b7       	in	r28, 0x3d	; 61
     ae8:	de b7       	in	r29, 0x3e	; 62
     aea:	9a 83       	std	Y+2, r25	; 0x02
     aec:	89 83       	std	Y+1, r24	; 0x01
     aee:	4b 83       	std	Y+3, r20	; 0x03
     af0:	5c 83       	std	Y+4, r21	; 0x04
     af2:	6d 83       	std	Y+5, r22	; 0x05
     af4:	7e 83       	std	Y+6, r23	; 0x06
		return print(num);
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	2b 81       	ldd	r18, Y+3	; 0x03
     afc:	3c 81       	ldd	r19, Y+4	; 0x04
     afe:	4d 81       	ldd	r20, Y+5	; 0x05
     b00:	5e 81       	ldd	r21, Y+6	; 0x06
     b02:	ba 01       	movw	r22, r20
     b04:	a9 01       	movw	r20, r18
     b06:	22 e0       	ldi	r18, 0x02	; 2
     b08:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <_ZN6Stream5printEdh>
	}
     b0c:	26 96       	adiw	r28, 0x06	; 6
     b0e:	0f b6       	in	r0, 0x3f	; 63
     b10:	f8 94       	cli
     b12:	de bf       	out	0x3e, r29	; 62
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	cd bf       	out	0x3d, r28	; 61
     b18:	cf 91       	pop	r28
     b1a:	df 91       	pop	r29
     b1c:	08 95       	ret

00000b1e <_ZN6StreamlsEi>:
		return print(num);
	}
	Stream& operator<< (int8_t num ){
		return print(num);
	}
	Stream& operator<< (int16_t num ){
     b1e:	df 93       	push	r29
     b20:	cf 93       	push	r28
     b22:	00 d0       	rcall	.+0      	; 0xb24 <_ZN6StreamlsEi+0x6>
     b24:	00 d0       	rcall	.+0      	; 0xb26 <_ZN6StreamlsEi+0x8>
     b26:	cd b7       	in	r28, 0x3d	; 61
     b28:	de b7       	in	r29, 0x3e	; 62
     b2a:	9a 83       	std	Y+2, r25	; 0x02
     b2c:	89 83       	std	Y+1, r24	; 0x01
     b2e:	7c 83       	std	Y+4, r23	; 0x04
     b30:	6b 83       	std	Y+3, r22	; 0x03
		return print(num);
     b32:	89 81       	ldd	r24, Y+1	; 0x01
     b34:	9a 81       	ldd	r25, Y+2	; 0x02
     b36:	2b 81       	ldd	r18, Y+3	; 0x03
     b38:	3c 81       	ldd	r19, Y+4	; 0x04
     b3a:	b9 01       	movw	r22, r18
     b3c:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <_ZN6Stream5printEi>
	}
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	cf 91       	pop	r28
     b4a:	df 91       	pop	r29
     b4c:	08 95       	ret

00000b4e <_ZN6StreamlsEPKc>:
	// Dump the value of a sensor
	Stream& operator<< (Sensor& sensor ){
		return print(sensor);
	}

	Stream& operator<< (const char str[] ){
     b4e:	df 93       	push	r29
     b50:	cf 93       	push	r28
     b52:	00 d0       	rcall	.+0      	; 0xb54 <_ZN6StreamlsEPKc+0x6>
     b54:	00 d0       	rcall	.+0      	; 0xb56 <_ZN6StreamlsEPKc+0x8>
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
     b5a:	9a 83       	std	Y+2, r25	; 0x02
     b5c:	89 83       	std	Y+1, r24	; 0x01
     b5e:	7c 83       	std	Y+4, r23	; 0x04
     b60:	6b 83       	std	Y+3, r22	; 0x03
		return print(str);
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	9a 81       	ldd	r25, Y+2	; 0x02
     b66:	2b 81       	ldd	r18, Y+3	; 0x03
     b68:	3c 81       	ldd	r19, Y+4	; 0x04
     b6a:	b9 01       	movw	r22, r18
     b6c:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <_ZN6Stream5printEPKc>
	}
     b70:	0f 90       	pop	r0
     b72:	0f 90       	pop	r0
     b74:	0f 90       	pop	r0
     b76:	0f 90       	pop	r0
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <_Z6to_intc>:
		cout << "  Servo #" << ia << "Has changed?:" << (*command).has_changed[ia] << ": Target pos: " << (*command).servo_target_positions[ia] << ": Current pos: " << (*command).servo_current_positions[ia] << " Speed: " << (*command).servo_speeds[ia] << " Spt: " << (*command).servo_speed_per_tick[ia] << "\n";
	}
}


int to_int (char chr) {
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	00 d0       	rcall	.+0      	; 0xb84 <_Z6to_intc+0x6>
     b84:	00 d0       	rcall	.+0      	; 0xb86 <_Z6to_intc+0x8>
     b86:	0f 92       	push	r0
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
     b8c:	8b 83       	std	Y+3, r24	; 0x03
	int i = chr - '0';
     b8e:	8b 81       	ldd	r24, Y+3	; 0x03
     b90:	88 2f       	mov	r24, r24
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	c0 97       	sbiw	r24, 0x30	; 48
     b96:	9a 83       	std	Y+2, r25	; 0x02
     b98:	89 83       	std	Y+1, r24	; 0x01
	#ifdef DEBUG_SESSION
		cout << "\n To_int'd number:" << i << "\n";
     b9a:	80 91 43 08 	lds	r24, 0x0843
     b9e:	90 91 44 08 	lds	r25, 0x0844
     ba2:	00 97       	sbiw	r24, 0x00	; 0
     ba4:	51 f0       	breq	.+20     	; 0xbba <_Z6to_intc+0x3c>
     ba6:	80 91 43 08 	lds	r24, 0x0843
     baa:	90 91 44 08 	lds	r25, 0x0844
     bae:	9c 01       	movw	r18, r24
     bb0:	22 50       	subi	r18, 0x02	; 2
     bb2:	30 40       	sbci	r19, 0x00	; 0
     bb4:	3d 83       	std	Y+5, r19	; 0x05
     bb6:	2c 83       	std	Y+4, r18	; 0x04
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <_Z6to_intc+0x40>
     bba:	1d 82       	std	Y+5, r1	; 0x05
     bbc:	1c 82       	std	Y+4, r1	; 0x04
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	32 e0       	ldi	r19, 0x02	; 2
     bc2:	8c 81       	ldd	r24, Y+4	; 0x04
     bc4:	9d 81       	ldd	r25, Y+5	; 0x05
     bc6:	b9 01       	movw	r22, r18
     bc8:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
     bcc:	29 81       	ldd	r18, Y+1	; 0x01
     bce:	3a 81       	ldd	r19, Y+2	; 0x02
     bd0:	b9 01       	movw	r22, r18
     bd2:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_ZN6StreamlsEi>
     bd6:	23 e1       	ldi	r18, 0x13	; 19
     bd8:	32 e0       	ldi	r19, 0x02	; 2
     bda:	b9 01       	movw	r22, r18
     bdc:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
	#endif
	return i;
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	9a 81       	ldd	r25, Y+2	; 0x02
}
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	cf 91       	pop	r28
     bf0:	df 91       	pop	r29
     bf2:	08 95       	ret

00000bf4 <_ZN6StreamlsEm>:
		return print(num);
	}
	Stream& operator<< (uint16_t num ){
		return print(num);
	}
	Stream& operator<< (uint32_t num ){
     bf4:	df 93       	push	r29
     bf6:	cf 93       	push	r28
     bf8:	00 d0       	rcall	.+0      	; 0xbfa <_ZN6StreamlsEm+0x6>
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <_ZN6StreamlsEm+0x8>
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <_ZN6StreamlsEm+0xa>
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	9a 83       	std	Y+2, r25	; 0x02
     c04:	89 83       	std	Y+1, r24	; 0x01
     c06:	4b 83       	std	Y+3, r20	; 0x03
     c08:	5c 83       	std	Y+4, r21	; 0x04
     c0a:	6d 83       	std	Y+5, r22	; 0x05
     c0c:	7e 83       	std	Y+6, r23	; 0x06
		return print(num);
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	9a 81       	ldd	r25, Y+2	; 0x02
     c12:	2b 81       	ldd	r18, Y+3	; 0x03
     c14:	3c 81       	ldd	r19, Y+4	; 0x04
     c16:	4d 81       	ldd	r20, Y+5	; 0x05
     c18:	5e 81       	ldd	r21, Y+6	; 0x06
     c1a:	ba 01       	movw	r22, r20
     c1c:	a9 01       	movw	r20, r18
     c1e:	0e 94 33 10 	call	0x2066	; 0x2066 <_ZN6Stream5printEm>
	}
     c22:	26 96       	adiw	r28, 0x06	; 6
     c24:	0f b6       	in	r0, 0x3f	; 63
     c26:	f8 94       	cli
     c28:	de bf       	out	0x3e, r29	; 62
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	cd bf       	out	0x3d, r28	; 61
     c2e:	cf 91       	pop	r28
     c30:	df 91       	pop	r29
     c32:	08 95       	ret

00000c34 <_Z13print_commandP7commandm>:
		(*command).has_changed[i]=0;
	}
}


void print_command (struct command* command, TICK_COUNT loop_number) {
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	2d 97       	sbiw	r28, 0x0d	; 13
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
     c48:	9b 83       	std	Y+3, r25	; 0x03
     c4a:	8a 83       	std	Y+2, r24	; 0x02
     c4c:	4c 83       	std	Y+4, r20	; 0x04
     c4e:	5d 83       	std	Y+5, r21	; 0x05
     c50:	6e 83       	std	Y+6, r22	; 0x06
     c52:	7f 83       	std	Y+7, r23	; 0x07
	if (loop_number) {
     c54:	8c 81       	ldd	r24, Y+4	; 0x04
     c56:	9d 81       	ldd	r25, Y+5	; 0x05
     c58:	ae 81       	ldd	r26, Y+6	; 0x06
     c5a:	bf 81       	ldd	r27, Y+7	; 0x07
     c5c:	00 97       	sbiw	r24, 0x00	; 0
     c5e:	a1 05       	cpc	r26, r1
     c60:	b1 05       	cpc	r27, r1
     c62:	31 f1       	breq	.+76     	; 0xcb0 <_Z13print_commandP7commandm+0x7c>
		cout << "Loop " << loop_number << "\n";
     c64:	80 91 43 08 	lds	r24, 0x0843
     c68:	90 91 44 08 	lds	r25, 0x0844
     c6c:	00 97       	sbiw	r24, 0x00	; 0
     c6e:	51 f0       	breq	.+20     	; 0xc84 <_Z13print_commandP7commandm+0x50>
     c70:	80 91 43 08 	lds	r24, 0x0843
     c74:	90 91 44 08 	lds	r25, 0x0844
     c78:	9c 01       	movw	r18, r24
     c7a:	22 50       	subi	r18, 0x02	; 2
     c7c:	30 40       	sbci	r19, 0x00	; 0
     c7e:	3d 87       	std	Y+13, r19	; 0x0d
     c80:	2c 87       	std	Y+12, r18	; 0x0c
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <_Z13print_commandP7commandm+0x54>
     c84:	1d 86       	std	Y+13, r1	; 0x0d
     c86:	1c 86       	std	Y+12, r1	; 0x0c
     c88:	25 e1       	ldi	r18, 0x15	; 21
     c8a:	32 e0       	ldi	r19, 0x02	; 2
     c8c:	8c 85       	ldd	r24, Y+12	; 0x0c
     c8e:	9d 85       	ldd	r25, Y+13	; 0x0d
     c90:	b9 01       	movw	r22, r18
     c92:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
     c96:	2c 81       	ldd	r18, Y+4	; 0x04
     c98:	3d 81       	ldd	r19, Y+5	; 0x05
     c9a:	4e 81       	ldd	r20, Y+6	; 0x06
     c9c:	5f 81       	ldd	r21, Y+7	; 0x07
     c9e:	ba 01       	movw	r22, r20
     ca0:	a9 01       	movw	r20, r18
     ca2:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN6StreamlsEm>
     ca6:	23 e1       	ldi	r18, 0x13	; 19
     ca8:	32 e0       	ldi	r19, 0x02	; 2
     caa:	b9 01       	movw	r22, r18
     cac:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
	}
	cout << "command:\nTime to execute: " << (*command).time << "\r\n";
     cb0:	80 91 43 08 	lds	r24, 0x0843
     cb4:	90 91 44 08 	lds	r25, 0x0844
     cb8:	00 97       	sbiw	r24, 0x00	; 0
     cba:	51 f0       	breq	.+20     	; 0xcd0 <_Z13print_commandP7commandm+0x9c>
     cbc:	80 91 43 08 	lds	r24, 0x0843
     cc0:	90 91 44 08 	lds	r25, 0x0844
     cc4:	9c 01       	movw	r18, r24
     cc6:	22 50       	subi	r18, 0x02	; 2
     cc8:	30 40       	sbci	r19, 0x00	; 0
     cca:	3b 87       	std	Y+11, r19	; 0x0b
     ccc:	2a 87       	std	Y+10, r18	; 0x0a
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <_Z13print_commandP7commandm+0xa0>
     cd0:	1b 86       	std	Y+11, r1	; 0x0b
     cd2:	1a 86       	std	Y+10, r1	; 0x0a
     cd4:	2b e1       	ldi	r18, 0x1B	; 27
     cd6:	32 e0       	ldi	r19, 0x02	; 2
     cd8:	8a 85       	ldd	r24, Y+10	; 0x0a
     cda:	9b 85       	ldd	r25, Y+11	; 0x0b
     cdc:	b9 01       	movw	r22, r18
     cde:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
     ce2:	ac 01       	movw	r20, r24
     ce4:	8a 81       	ldd	r24, Y+2	; 0x02
     ce6:	9b 81       	ldd	r25, Y+3	; 0x03
     ce8:	fc 01       	movw	r30, r24
     cea:	e5 54       	subi	r30, 0x45	; 69
     cec:	ff 4f       	sbci	r31, 0xFF	; 255
     cee:	20 81       	ld	r18, Z
     cf0:	31 81       	ldd	r19, Z+1	; 0x01
     cf2:	ca 01       	movw	r24, r20
     cf4:	b9 01       	movw	r22, r18
     cf6:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_ZN6StreamlsEi>
     cfa:	26 e3       	ldi	r18, 0x36	; 54
     cfc:	32 e0       	ldi	r19, 0x02	; 2
     cfe:	b9 01       	movw	r22, r18
     d00:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
	int8_t ia;
	for (ia=0; ia <= SERVOS_NUMBER; ia++) {
     d04:	19 82       	std	Y+1, r1	; 0x01
     d06:	ae c0       	rjmp	.+348    	; 0xe64 <_Z13print_commandP7commandm+0x230>
		cout << "  Servo #" << ia << "Has changed?:" << (*command).has_changed[ia] << ": Target pos: " << (*command).servo_target_positions[ia] << ": Current pos: " << (*command).servo_current_positions[ia] << " Speed: " << (*command).servo_speeds[ia] << " Spt: " << (*command).servo_speed_per_tick[ia] << "\n";
     d08:	80 91 43 08 	lds	r24, 0x0843
     d0c:	90 91 44 08 	lds	r25, 0x0844
     d10:	00 97       	sbiw	r24, 0x00	; 0
     d12:	51 f0       	breq	.+20     	; 0xd28 <_Z13print_commandP7commandm+0xf4>
     d14:	80 91 43 08 	lds	r24, 0x0843
     d18:	90 91 44 08 	lds	r25, 0x0844
     d1c:	9c 01       	movw	r18, r24
     d1e:	22 50       	subi	r18, 0x02	; 2
     d20:	30 40       	sbci	r19, 0x00	; 0
     d22:	39 87       	std	Y+9, r19	; 0x09
     d24:	28 87       	std	Y+8, r18	; 0x08
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <_Z13print_commandP7commandm+0xf8>
     d28:	19 86       	std	Y+9, r1	; 0x09
     d2a:	18 86       	std	Y+8, r1	; 0x08
     d2c:	29 e3       	ldi	r18, 0x39	; 57
     d2e:	32 e0       	ldi	r19, 0x02	; 2
     d30:	88 85       	ldd	r24, Y+8	; 0x08
     d32:	99 85       	ldd	r25, Y+9	; 0x09
     d34:	b9 01       	movw	r22, r18
     d36:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
     d3a:	69 81       	ldd	r22, Y+1	; 0x01
     d3c:	0e 94 5a 05 	call	0xab4	; 0xab4 <_ZN6StreamlsEa>
     d40:	23 e4       	ldi	r18, 0x43	; 67
     d42:	32 e0       	ldi	r19, 0x02	; 2
     d44:	b9 01       	movw	r22, r18
     d46:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
     d4a:	ac 01       	movw	r20, r24
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	28 2f       	mov	r18, r24
     d50:	33 27       	eor	r19, r19
     d52:	27 fd       	sbrc	r18, 7
     d54:	30 95       	com	r19
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	9b 81       	ldd	r25, Y+3	; 0x03
     d5a:	82 0f       	add	r24, r18
     d5c:	93 1f       	adc	r25, r19
     d5e:	fc 01       	movw	r30, r24
     d60:	e0 55       	subi	r30, 0x50	; 80
     d62:	ff 4f       	sbci	r31, 0xFF	; 255
     d64:	20 81       	ld	r18, Z
     d66:	ca 01       	movw	r24, r20
     d68:	62 2f       	mov	r22, r18
     d6a:	0e 94 32 05 	call	0xa64	; 0xa64 <_ZN6StreamlsEh>
     d6e:	21 e5       	ldi	r18, 0x51	; 81
     d70:	32 e0       	ldi	r19, 0x02	; 2
     d72:	b9 01       	movw	r22, r18
     d74:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
     d78:	bc 01       	movw	r22, r24
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	99 27       	eor	r25, r25
     d7e:	87 fd       	sbrc	r24, 7
     d80:	90 95       	com	r25
     d82:	2a 81       	ldd	r18, Y+2	; 0x02
     d84:	3b 81       	ldd	r19, Y+3	; 0x03
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	f9 01       	movw	r30, r18
     d90:	e8 0f       	add	r30, r24
     d92:	f9 1f       	adc	r31, r25
     d94:	20 81       	ld	r18, Z
     d96:	31 81       	ldd	r19, Z+1	; 0x01
     d98:	42 81       	ldd	r20, Z+2	; 0x02
     d9a:	53 81       	ldd	r21, Z+3	; 0x03
     d9c:	cb 01       	movw	r24, r22
     d9e:	ba 01       	movw	r22, r20
     da0:	a9 01       	movw	r20, r18
     da2:	0e 94 6e 05 	call	0xadc	; 0xadc <_ZN6StreamlsEd>
     da6:	20 e6       	ldi	r18, 0x60	; 96
     da8:	32 e0       	ldi	r19, 0x02	; 2
     daa:	b9 01       	movw	r22, r18
     dac:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
     db0:	bc 01       	movw	r22, r24
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	99 27       	eor	r25, r25
     db6:	87 fd       	sbrc	r24, 7
     db8:	90 95       	com	r25
     dba:	2a 81       	ldd	r18, Y+2	; 0x02
     dbc:	3b 81       	ldd	r19, Y+3	; 0x03
     dbe:	0b 96       	adiw	r24, 0x0b	; 11
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	f9 01       	movw	r30, r18
     dca:	e8 0f       	add	r30, r24
     dcc:	f9 1f       	adc	r31, r25
     dce:	20 81       	ld	r18, Z
     dd0:	31 81       	ldd	r19, Z+1	; 0x01
     dd2:	42 81       	ldd	r20, Z+2	; 0x02
     dd4:	53 81       	ldd	r21, Z+3	; 0x03
     dd6:	cb 01       	movw	r24, r22
     dd8:	ba 01       	movw	r22, r20
     dda:	a9 01       	movw	r20, r18
     ddc:	0e 94 6e 05 	call	0xadc	; 0xadc <_ZN6StreamlsEd>
     de0:	20 e7       	ldi	r18, 0x70	; 112
     de2:	32 e0       	ldi	r19, 0x02	; 2
     de4:	b9 01       	movw	r22, r18
     de6:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
     dea:	bc 01       	movw	r22, r24
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	99 27       	eor	r25, r25
     df0:	87 fd       	sbrc	r24, 7
     df2:	90 95       	com	r25
     df4:	2a 81       	ldd	r18, Y+2	; 0x02
     df6:	3b 81       	ldd	r19, Y+3	; 0x03
     df8:	46 96       	adiw	r24, 0x16	; 22
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	f9 01       	movw	r30, r18
     e04:	e8 0f       	add	r30, r24
     e06:	f9 1f       	adc	r31, r25
     e08:	20 81       	ld	r18, Z
     e0a:	31 81       	ldd	r19, Z+1	; 0x01
     e0c:	42 81       	ldd	r20, Z+2	; 0x02
     e0e:	53 81       	ldd	r21, Z+3	; 0x03
     e10:	cb 01       	movw	r24, r22
     e12:	ba 01       	movw	r22, r20
     e14:	a9 01       	movw	r20, r18
     e16:	0e 94 6e 05 	call	0xadc	; 0xadc <_ZN6StreamlsEd>
     e1a:	29 e7       	ldi	r18, 0x79	; 121
     e1c:	32 e0       	ldi	r19, 0x02	; 2
     e1e:	b9 01       	movw	r22, r18
     e20:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
     e24:	bc 01       	movw	r22, r24
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	99 27       	eor	r25, r25
     e2a:	87 fd       	sbrc	r24, 7
     e2c:	90 95       	com	r25
     e2e:	2a 81       	ldd	r18, Y+2	; 0x02
     e30:	3b 81       	ldd	r19, Y+3	; 0x03
     e32:	81 96       	adiw	r24, 0x21	; 33
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	f9 01       	movw	r30, r18
     e3e:	e8 0f       	add	r30, r24
     e40:	f9 1f       	adc	r31, r25
     e42:	20 81       	ld	r18, Z
     e44:	31 81       	ldd	r19, Z+1	; 0x01
     e46:	42 81       	ldd	r20, Z+2	; 0x02
     e48:	53 81       	ldd	r21, Z+3	; 0x03
     e4a:	cb 01       	movw	r24, r22
     e4c:	ba 01       	movw	r22, r20
     e4e:	a9 01       	movw	r20, r18
     e50:	0e 94 6e 05 	call	0xadc	; 0xadc <_ZN6StreamlsEd>
     e54:	23 e1       	ldi	r18, 0x13	; 19
     e56:	32 e0       	ldi	r19, 0x02	; 2
     e58:	b9 01       	movw	r22, r18
     e5a:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
	if (loop_number) {
		cout << "Loop " << loop_number << "\n";
	}
	cout << "command:\nTime to execute: " << (*command).time << "\r\n";
	int8_t ia;
	for (ia=0; ia <= SERVOS_NUMBER; ia++) {
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	8f 5f       	subi	r24, 0xFF	; 255
     e62:	89 83       	std	Y+1, r24	; 0x01
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	8c 30       	cpi	r24, 0x0C	; 12
     e68:	0c f4       	brge	.+2      	; 0xe6c <_Z13print_commandP7commandm+0x238>
     e6a:	4e cf       	rjmp	.-356    	; 0xd08 <_Z13print_commandP7commandm+0xd4>
		cout << "  Servo #" << ia << "Has changed?:" << (*command).has_changed[ia] << ": Target pos: " << (*command).servo_target_positions[ia] << ": Current pos: " << (*command).servo_current_positions[ia] << " Speed: " << (*command).servo_speeds[ia] << " Spt: " << (*command).servo_speed_per_tick[ia] << "\n";
	}
}
     e6c:	2d 96       	adiw	r28, 0x0d	; 13
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	f8 94       	cli
     e72:	de bf       	out	0x3e, r29	; 62
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	cd bf       	out	0x3d, r28	; 61
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <_Z6readerhR4UartPv>:
	#endif
	return i;
}


void reader(unsigned char data, Uart& uart, void* param) {
     e7e:	cf 92       	push	r12
     e80:	df 92       	push	r13
     e82:	ef 92       	push	r14
     e84:	ff 92       	push	r15
     e86:	0f 93       	push	r16
     e88:	1f 93       	push	r17
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	a6 97       	sbiw	r28, 0x26	; 38
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	cd bf       	out	0x3d, r28	; 61
     e9e:	8c 83       	std	Y+4, r24	; 0x04
     ea0:	7e 83       	std	Y+6, r23	; 0x06
     ea2:	6d 83       	std	Y+5, r22	; 0x05
     ea4:	58 87       	std	Y+8, r21	; 0x08
     ea6:	4f 83       	std	Y+7, r20	; 0x07
	cout << "Received char: " << data << "\n";
     ea8:	80 91 43 08 	lds	r24, 0x0843
     eac:	90 91 44 08 	lds	r25, 0x0844
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	51 f0       	breq	.+20     	; 0xec8 <_Z6readerhR4UartPv+0x4a>
     eb4:	80 91 43 08 	lds	r24, 0x0843
     eb8:	90 91 44 08 	lds	r25, 0x0844
     ebc:	9c 01       	movw	r18, r24
     ebe:	22 50       	subi	r18, 0x02	; 2
     ec0:	30 40       	sbci	r19, 0x00	; 0
     ec2:	3e a3       	std	Y+38, r19	; 0x26
     ec4:	2d a3       	std	Y+37, r18	; 0x25
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <_Z6readerhR4UartPv+0x4e>
     ec8:	1e a2       	std	Y+38, r1	; 0x26
     eca:	1d a2       	std	Y+37, r1	; 0x25
     ecc:	20 e8       	ldi	r18, 0x80	; 128
     ece:	32 e0       	ldi	r19, 0x02	; 2
     ed0:	8d a1       	ldd	r24, Y+37	; 0x25
     ed2:	9e a1       	ldd	r25, Y+38	; 0x26
     ed4:	b9 01       	movw	r22, r18
     ed6:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
     eda:	6c 81       	ldd	r22, Y+4	; 0x04
     edc:	0e 94 32 05 	call	0xa64	; 0xa64 <_ZN6StreamlsEh>
     ee0:	23 e1       	ldi	r18, 0x13	; 19
     ee2:	32 e0       	ldi	r19, 0x02	; 2
     ee4:	b9 01       	movw	r22, r18
     ee6:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
	switch (data) {
     eea:	8c 81       	ldd	r24, Y+4	; 0x04
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	3c a3       	std	Y+36, r19	; 0x24
     ef2:	2b a3       	std	Y+35, r18	; 0x23
     ef4:	8b a1       	ldd	r24, Y+35	; 0x23
     ef6:	9c a1       	ldd	r25, Y+36	; 0x24
     ef8:	8a 33       	cpi	r24, 0x3A	; 58
     efa:	91 05       	cpc	r25, r1
     efc:	2c f5       	brge	.+74     	; 0xf48 <_Z6readerhR4UartPv+0xca>
     efe:	2b a1       	ldd	r18, Y+35	; 0x23
     f00:	3c a1       	ldd	r19, Y+36	; 0x24
     f02:	20 33       	cpi	r18, 0x30	; 48
     f04:	31 05       	cpc	r19, r1
     f06:	0c f0       	brlt	.+2      	; 0xf0a <_Z6readerhR4UartPv+0x8c>
     f08:	1a c1       	rjmp	.+564    	; 0x113e <_Z6readerhR4UartPv+0x2c0>
     f0a:	8b a1       	ldd	r24, Y+35	; 0x23
     f0c:	9c a1       	ldd	r25, Y+36	; 0x24
     f0e:	8d 30       	cpi	r24, 0x0D	; 13
     f10:	91 05       	cpc	r25, r1
     f12:	09 f4       	brne	.+2      	; 0xf16 <_Z6readerhR4UartPv+0x98>
     f14:	d4 c2       	rjmp	.+1448   	; 0x14be <_Z6readerhR4UartPv+0x640>
     f16:	2b a1       	ldd	r18, Y+35	; 0x23
     f18:	3c a1       	ldd	r19, Y+36	; 0x24
     f1a:	2e 30       	cpi	r18, 0x0E	; 14
     f1c:	31 05       	cpc	r19, r1
     f1e:	3c f4       	brge	.+14     	; 0xf2e <_Z6readerhR4UartPv+0xb0>
     f20:	8b a1       	ldd	r24, Y+35	; 0x23
     f22:	9c a1       	ldd	r25, Y+36	; 0x24
     f24:	8a 30       	cpi	r24, 0x0A	; 10
     f26:	91 05       	cpc	r25, r1
     f28:	09 f4       	brne	.+2      	; 0xf2c <_Z6readerhR4UartPv+0xae>
     f2a:	c9 c2       	rjmp	.+1426   	; 0x14be <_Z6readerhR4UartPv+0x640>
     f2c:	2a c3       	rjmp	.+1620   	; 0x1582 <_Z6readerhR4UartPv+0x704>
     f2e:	2b a1       	ldd	r18, Y+35	; 0x23
     f30:	3c a1       	ldd	r19, Y+36	; 0x24
     f32:	20 32       	cpi	r18, 0x20	; 32
     f34:	31 05       	cpc	r19, r1
     f36:	09 f4       	brne	.+2      	; 0xf3a <_Z6readerhR4UartPv+0xbc>
     f38:	be c2       	rjmp	.+1404   	; 0x14b6 <_Z6readerhR4UartPv+0x638>
     f3a:	8b a1       	ldd	r24, Y+35	; 0x23
     f3c:	9c a1       	ldd	r25, Y+36	; 0x24
     f3e:	83 32       	cpi	r24, 0x23	; 35
     f40:	91 05       	cpc	r25, r1
     f42:	09 f4       	brne	.+2      	; 0xf46 <_Z6readerhR4UartPv+0xc8>
     f44:	59 c0       	rjmp	.+178    	; 0xff8 <_Z6readerhR4UartPv+0x17a>
     f46:	1d c3       	rjmp	.+1594   	; 0x1582 <_Z6readerhR4UartPv+0x704>
     f48:	2b a1       	ldd	r18, Y+35	; 0x23
     f4a:	3c a1       	ldd	r19, Y+36	; 0x24
     f4c:	20 35       	cpi	r18, 0x50	; 80
     f4e:	31 05       	cpc	r19, r1
     f50:	09 f4       	brne	.+2      	; 0xf54 <_Z6readerhR4UartPv+0xd6>
     f52:	71 c0       	rjmp	.+226    	; 0x1036 <_Z6readerhR4UartPv+0x1b8>
     f54:	8b a1       	ldd	r24, Y+35	; 0x23
     f56:	9c a1       	ldd	r25, Y+36	; 0x24
     f58:	81 35       	cpi	r24, 0x51	; 81
     f5a:	91 05       	cpc	r25, r1
     f5c:	34 f4       	brge	.+12     	; 0xf6a <_Z6readerhR4UartPv+0xec>
     f5e:	2b a1       	ldd	r18, Y+35	; 0x23
     f60:	3c a1       	ldd	r19, Y+36	; 0x24
     f62:	2f 33       	cpi	r18, 0x3F	; 63
     f64:	31 05       	cpc	r19, r1
     f66:	71 f0       	breq	.+28     	; 0xf84 <_Z6readerhR4UartPv+0x106>
     f68:	0c c3       	rjmp	.+1560   	; 0x1582 <_Z6readerhR4UartPv+0x704>
     f6a:	8b a1       	ldd	r24, Y+35	; 0x23
     f6c:	9c a1       	ldd	r25, Y+36	; 0x24
     f6e:	83 35       	cpi	r24, 0x53	; 83
     f70:	91 05       	cpc	r25, r1
     f72:	09 f4       	brne	.+2      	; 0xf76 <_Z6readerhR4UartPv+0xf8>
     f74:	91 c0       	rjmp	.+290    	; 0x1098 <_Z6readerhR4UartPv+0x21a>
     f76:	2b a1       	ldd	r18, Y+35	; 0x23
     f78:	3c a1       	ldd	r19, Y+36	; 0x24
     f7a:	24 35       	cpi	r18, 0x54	; 84
     f7c:	31 05       	cpc	r19, r1
     f7e:	09 f4       	brne	.+2      	; 0xf82 <_Z6readerhR4UartPv+0x104>
     f80:	bd c0       	rjmp	.+378    	; 0x10fc <_Z6readerhR4UartPv+0x27e>
     f82:	ff c2       	rjmp	.+1534   	; 0x1582 <_Z6readerhR4UartPv+0x704>
		case '?':
		{
			//subcommand "Poll servo speeds"
			#ifdef DEBUG_SESSION
				int8_t i;
				for (i=0; i <= SERVOS_NUMBER; i++) {
     f84:	1a 82       	std	Y+2, r1	; 0x02
     f86:	34 c0       	rjmp	.+104    	; 0xff0 <_Z6readerhR4UartPv+0x172>
					cout << "Current speed:" << (*servos[i]).getSpeed() << "\n";
     f88:	80 91 43 08 	lds	r24, 0x0843
     f8c:	90 91 44 08 	lds	r25, 0x0844
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	51 f0       	breq	.+20     	; 0xfa8 <_Z6readerhR4UartPv+0x12a>
     f94:	80 91 43 08 	lds	r24, 0x0843
     f98:	90 91 44 08 	lds	r25, 0x0844
     f9c:	9c 01       	movw	r18, r24
     f9e:	22 50       	subi	r18, 0x02	; 2
     fa0:	30 40       	sbci	r19, 0x00	; 0
     fa2:	3a a3       	std	Y+34, r19	; 0x22
     fa4:	29 a3       	std	Y+33, r18	; 0x21
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <_Z6readerhR4UartPv+0x12e>
     fa8:	1a a2       	std	Y+34, r1	; 0x22
     faa:	19 a2       	std	Y+33, r1	; 0x21
     fac:	20 e9       	ldi	r18, 0x90	; 144
     fae:	32 e0       	ldi	r19, 0x02	; 2
     fb0:	89 a1       	ldd	r24, Y+33	; 0x21
     fb2:	9a a1       	ldd	r25, Y+34	; 0x22
     fb4:	b9 01       	movw	r22, r18
     fb6:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
     fba:	8c 01       	movw	r16, r24
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	99 27       	eor	r25, r25
     fc0:	87 fd       	sbrc	r24, 7
     fc2:	90 95       	com	r25
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	fc 01       	movw	r30, r24
     fca:	ea 57       	subi	r30, 0x7A	; 122
     fcc:	fa 4f       	sbci	r31, 0xFA	; 250
     fce:	80 81       	ld	r24, Z
     fd0:	91 81       	ldd	r25, Z+1	; 0x01
     fd2:	0e 94 80 03 	call	0x700	; 0x700 <_ZNK8Actuator8getSpeedEv>
     fd6:	28 2f       	mov	r18, r24
     fd8:	c8 01       	movw	r24, r16
     fda:	62 2f       	mov	r22, r18
     fdc:	0e 94 5a 05 	call	0xab4	; 0xab4 <_ZN6StreamlsEa>
     fe0:	23 e1       	ldi	r18, 0x13	; 19
     fe2:	32 e0       	ldi	r19, 0x02	; 2
     fe4:	b9 01       	movw	r22, r18
     fe6:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
		case '?':
		{
			//subcommand "Poll servo speeds"
			#ifdef DEBUG_SESSION
				int8_t i;
				for (i=0; i <= SERVOS_NUMBER; i++) {
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	8f 5f       	subi	r24, 0xFF	; 255
     fee:	8a 83       	std	Y+2, r24	; 0x02
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	8c 30       	cpi	r24, 0x0C	; 12
     ff4:	4c f2       	brlt	.-110    	; 0xf88 <_Z6readerhR4UartPv+0x10a>
     ff6:	c5 c2       	rjmp	.+1418   	; 0x1582 <_Z6readerhR4UartPv+0x704>
			break;
		}
		case '#':
		{
			//subcommand "Servo number"
			r_curr_servo = 0;
     ff8:	10 92 17 07 	sts	0x0717, r1
			r_curr_subcommand = data;
     ffc:	8c 81       	ldd	r24, Y+4	; 0x04
     ffe:	80 93 16 07 	sts	0x0716, r24
			#ifdef DEBUG_SESSION
				cout << "Received servo number command \n";
    1002:	80 91 43 08 	lds	r24, 0x0843
    1006:	90 91 44 08 	lds	r25, 0x0844
    100a:	00 97       	sbiw	r24, 0x00	; 0
    100c:	51 f0       	breq	.+20     	; 0x1022 <_Z6readerhR4UartPv+0x1a4>
    100e:	80 91 43 08 	lds	r24, 0x0843
    1012:	90 91 44 08 	lds	r25, 0x0844
    1016:	9c 01       	movw	r18, r24
    1018:	22 50       	subi	r18, 0x02	; 2
    101a:	30 40       	sbci	r19, 0x00	; 0
    101c:	38 a3       	std	Y+32, r19	; 0x20
    101e:	2f 8f       	std	Y+31, r18	; 0x1f
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <_Z6readerhR4UartPv+0x1a8>
    1022:	18 a2       	std	Y+32, r1	; 0x20
    1024:	1f 8e       	std	Y+31, r1	; 0x1f
    1026:	2f e9       	ldi	r18, 0x9F	; 159
    1028:	32 e0       	ldi	r19, 0x02	; 2
    102a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    102c:	98 a1       	ldd	r25, Y+32	; 0x20
    102e:	b9 01       	movw	r22, r18
    1030:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
    1034:	a6 c2       	rjmp	.+1356   	; 0x1582 <_Z6readerhR4UartPv+0x704>
			break;
		}
		case 'P':
		{
			//subcommand "Position"
			command_receiving.servo_target_positions[r_curr_servo] = 0;
    1036:	80 91 17 07 	lds	r24, 0x0717
    103a:	99 27       	eor	r25, r25
    103c:	87 fd       	sbrc	r24, 7
    103e:	90 95       	com	r25
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	fc 01       	movw	r30, r24
    104a:	e4 56       	subi	r30, 0x64	; 100
    104c:	fa 4f       	sbci	r31, 0xFA	; 250
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	a0 e0       	ldi	r26, 0x00	; 0
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	80 83       	st	Z, r24
    1058:	91 83       	std	Z+1, r25	; 0x01
    105a:	a2 83       	std	Z+2, r26	; 0x02
    105c:	b3 83       	std	Z+3, r27	; 0x03
			r_curr_subcommand = data;
    105e:	8c 81       	ldd	r24, Y+4	; 0x04
    1060:	80 93 16 07 	sts	0x0716, r24
			#ifdef DEBUG_SESSION
				cout << "Received position command \n";
    1064:	80 91 43 08 	lds	r24, 0x0843
    1068:	90 91 44 08 	lds	r25, 0x0844
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	51 f0       	breq	.+20     	; 0x1084 <_Z6readerhR4UartPv+0x206>
    1070:	80 91 43 08 	lds	r24, 0x0843
    1074:	90 91 44 08 	lds	r25, 0x0844
    1078:	9c 01       	movw	r18, r24
    107a:	22 50       	subi	r18, 0x02	; 2
    107c:	30 40       	sbci	r19, 0x00	; 0
    107e:	3e 8f       	std	Y+30, r19	; 0x1e
    1080:	2d 8f       	std	Y+29, r18	; 0x1d
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <_Z6readerhR4UartPv+0x20a>
    1084:	1e 8e       	std	Y+30, r1	; 0x1e
    1086:	1d 8e       	std	Y+29, r1	; 0x1d
    1088:	2f eb       	ldi	r18, 0xBF	; 191
    108a:	32 e0       	ldi	r19, 0x02	; 2
    108c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    108e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1090:	b9 01       	movw	r22, r18
    1092:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
    1096:	75 c2       	rjmp	.+1258   	; 0x1582 <_Z6readerhR4UartPv+0x704>
			break;
		}
		case 'S':
		{
			//subcommand "Speed"
			command_receiving.servo_speeds[r_curr_servo] = 0;
    1098:	80 91 17 07 	lds	r24, 0x0717
    109c:	99 27       	eor	r25, r25
    109e:	87 fd       	sbrc	r24, 7
    10a0:	90 95       	com	r25
    10a2:	46 96       	adiw	r24, 0x16	; 22
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	fc 01       	movw	r30, r24
    10ae:	e4 56       	subi	r30, 0x64	; 100
    10b0:	fa 4f       	sbci	r31, 0xFA	; 250
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	a0 e0       	ldi	r26, 0x00	; 0
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	80 83       	st	Z, r24
    10bc:	91 83       	std	Z+1, r25	; 0x01
    10be:	a2 83       	std	Z+2, r26	; 0x02
    10c0:	b3 83       	std	Z+3, r27	; 0x03
			r_curr_subcommand = data;
    10c2:	8c 81       	ldd	r24, Y+4	; 0x04
    10c4:	80 93 16 07 	sts	0x0716, r24
			#ifdef DEBUG_SESSION
				cout << "Received speed command \n";
    10c8:	80 91 43 08 	lds	r24, 0x0843
    10cc:	90 91 44 08 	lds	r25, 0x0844
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	51 f0       	breq	.+20     	; 0x10e8 <_Z6readerhR4UartPv+0x26a>
    10d4:	80 91 43 08 	lds	r24, 0x0843
    10d8:	90 91 44 08 	lds	r25, 0x0844
    10dc:	9c 01       	movw	r18, r24
    10de:	22 50       	subi	r18, 0x02	; 2
    10e0:	30 40       	sbci	r19, 0x00	; 0
    10e2:	3c 8f       	std	Y+28, r19	; 0x1c
    10e4:	2b 8f       	std	Y+27, r18	; 0x1b
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <_Z6readerhR4UartPv+0x26e>
    10e8:	1c 8e       	std	Y+28, r1	; 0x1c
    10ea:	1b 8e       	std	Y+27, r1	; 0x1b
    10ec:	2b ed       	ldi	r18, 0xDB	; 219
    10ee:	32 e0       	ldi	r19, 0x02	; 2
    10f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10f4:	b9 01       	movw	r22, r18
    10f6:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
    10fa:	43 c2       	rjmp	.+1158   	; 0x1582 <_Z6readerhR4UartPv+0x704>
			break;
		}
		case 'T':
		{
			//subcommand "Time"
			command_receiving.time = 0;
    10fc:	10 92 58 06 	sts	0x0658, r1
    1100:	10 92 57 06 	sts	0x0657, r1
			r_curr_subcommand = data;
    1104:	8c 81       	ldd	r24, Y+4	; 0x04
    1106:	80 93 16 07 	sts	0x0716, r24
			#ifdef DEBUG_SESSION
				cout << "Received time command \n";
    110a:	80 91 43 08 	lds	r24, 0x0843
    110e:	90 91 44 08 	lds	r25, 0x0844
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	51 f0       	breq	.+20     	; 0x112a <_Z6readerhR4UartPv+0x2ac>
    1116:	80 91 43 08 	lds	r24, 0x0843
    111a:	90 91 44 08 	lds	r25, 0x0844
    111e:	9c 01       	movw	r18, r24
    1120:	22 50       	subi	r18, 0x02	; 2
    1122:	30 40       	sbci	r19, 0x00	; 0
    1124:	3a 8f       	std	Y+26, r19	; 0x1a
    1126:	29 8f       	std	Y+25, r18	; 0x19
    1128:	02 c0       	rjmp	.+4      	; 0x112e <_Z6readerhR4UartPv+0x2b0>
    112a:	1a 8e       	std	Y+26, r1	; 0x1a
    112c:	19 8e       	std	Y+25, r1	; 0x19
    112e:	24 ef       	ldi	r18, 0xF4	; 244
    1130:	32 e0       	ldi	r19, 0x02	; 2
    1132:	89 8d       	ldd	r24, Y+25	; 0x19
    1134:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1136:	b9 01       	movw	r22, r18
    1138:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
    113c:	22 c2       	rjmp	.+1092   	; 0x1582 <_Z6readerhR4UartPv+0x704>
		case '8':
		case '9':
		case '0':
		{
			#ifdef DEBUG_SESSION
				cout << "Received digit \n Current subcommand is " << r_curr_subcommand << "\n";
    113e:	80 91 43 08 	lds	r24, 0x0843
    1142:	90 91 44 08 	lds	r25, 0x0844
    1146:	00 97       	sbiw	r24, 0x00	; 0
    1148:	51 f0       	breq	.+20     	; 0x115e <_Z6readerhR4UartPv+0x2e0>
    114a:	80 91 43 08 	lds	r24, 0x0843
    114e:	90 91 44 08 	lds	r25, 0x0844
    1152:	9c 01       	movw	r18, r24
    1154:	22 50       	subi	r18, 0x02	; 2
    1156:	30 40       	sbci	r19, 0x00	; 0
    1158:	38 8f       	std	Y+24, r19	; 0x18
    115a:	2f 8b       	std	Y+23, r18	; 0x17
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <_Z6readerhR4UartPv+0x2e4>
    115e:	18 8e       	std	Y+24, r1	; 0x18
    1160:	1f 8a       	std	Y+23, r1	; 0x17
    1162:	2c e0       	ldi	r18, 0x0C	; 12
    1164:	33 e0       	ldi	r19, 0x03	; 3
    1166:	8f 89       	ldd	r24, Y+23	; 0x17
    1168:	98 8d       	ldd	r25, Y+24	; 0x18
    116a:	b9 01       	movw	r22, r18
    116c:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
    1170:	20 91 16 07 	lds	r18, 0x0716
    1174:	62 2f       	mov	r22, r18
    1176:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN6StreamlsEc>
    117a:	23 e1       	ldi	r18, 0x13	; 19
    117c:	32 e0       	ldi	r19, 0x02	; 2
    117e:	b9 01       	movw	r22, r18
    1180:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
			#endif
			switch (r_curr_subcommand) {
    1184:	80 91 16 07 	lds	r24, 0x0716
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	3e 8b       	std	Y+22, r19	; 0x16
    118e:	2d 8b       	std	Y+21, r18	; 0x15
    1190:	8d 89       	ldd	r24, Y+21	; 0x15
    1192:	9e 89       	ldd	r25, Y+22	; 0x16
    1194:	83 35       	cpi	r24, 0x53	; 83
    1196:	91 05       	cpc	r25, r1
    1198:	09 f4       	brne	.+2      	; 0x119c <_Z6readerhR4UartPv+0x31e>
    119a:	d4 c0       	rjmp	.+424    	; 0x1344 <_Z6readerhR4UartPv+0x4c6>
    119c:	2d 89       	ldd	r18, Y+21	; 0x15
    119e:	3e 89       	ldd	r19, Y+22	; 0x16
    11a0:	24 35       	cpi	r18, 0x54	; 84
    11a2:	31 05       	cpc	r19, r1
    11a4:	64 f4       	brge	.+24     	; 0x11be <_Z6readerhR4UartPv+0x340>
    11a6:	8d 89       	ldd	r24, Y+21	; 0x15
    11a8:	9e 89       	ldd	r25, Y+22	; 0x16
    11aa:	83 32       	cpi	r24, 0x23	; 35
    11ac:	91 05       	cpc	r25, r1
    11ae:	71 f0       	breq	.+28     	; 0x11cc <_Z6readerhR4UartPv+0x34e>
    11b0:	2d 89       	ldd	r18, Y+21	; 0x15
    11b2:	3e 89       	ldd	r19, Y+22	; 0x16
    11b4:	20 35       	cpi	r18, 0x50	; 80
    11b6:	31 05       	cpc	r19, r1
    11b8:	09 f4       	brne	.+2      	; 0x11bc <_Z6readerhR4UartPv+0x33e>
    11ba:	42 c0       	rjmp	.+132    	; 0x1240 <_Z6readerhR4UartPv+0x3c2>
    11bc:	e2 c1       	rjmp	.+964    	; 0x1582 <_Z6readerhR4UartPv+0x704>
    11be:	8d 89       	ldd	r24, Y+21	; 0x15
    11c0:	9e 89       	ldd	r25, Y+22	; 0x16
    11c2:	84 35       	cpi	r24, 0x54	; 84
    11c4:	91 05       	cpc	r25, r1
    11c6:	09 f4       	brne	.+2      	; 0x11ca <_Z6readerhR4UartPv+0x34c>
    11c8:	38 c1       	rjmp	.+624    	; 0x143a <_Z6readerhR4UartPv+0x5bc>
    11ca:	db c1       	rjmp	.+950    	; 0x1582 <_Z6readerhR4UartPv+0x704>
				case '#':
				{
					r_curr_servo = r_curr_servo*10 + to_int(data);
    11cc:	80 91 17 07 	lds	r24, 0x0717
    11d0:	99 27       	eor	r25, r25
    11d2:	87 fd       	sbrc	r24, 7
    11d4:	90 95       	com	r25
    11d6:	9c 01       	movw	r18, r24
    11d8:	22 0f       	add	r18, r18
    11da:	33 1f       	adc	r19, r19
    11dc:	c9 01       	movw	r24, r18
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	82 0f       	add	r24, r18
    11e8:	93 1f       	adc	r25, r19
    11ea:	18 2f       	mov	r17, r24
    11ec:	8c 81       	ldd	r24, Y+4	; 0x04
    11ee:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_Z6to_intc>
    11f2:	81 0f       	add	r24, r17
    11f4:	80 93 17 07 	sts	0x0717, r24
					#ifdef DEBUG_SESSION
						cout << "Set current servo to:" << r_curr_servo << "\n";
    11f8:	80 91 43 08 	lds	r24, 0x0843
    11fc:	90 91 44 08 	lds	r25, 0x0844
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	51 f0       	breq	.+20     	; 0x1218 <_Z6readerhR4UartPv+0x39a>
    1204:	80 91 43 08 	lds	r24, 0x0843
    1208:	90 91 44 08 	lds	r25, 0x0844
    120c:	9c 01       	movw	r18, r24
    120e:	22 50       	subi	r18, 0x02	; 2
    1210:	30 40       	sbci	r19, 0x00	; 0
    1212:	3c 8b       	std	Y+20, r19	; 0x14
    1214:	2b 8b       	std	Y+19, r18	; 0x13
    1216:	02 c0       	rjmp	.+4      	; 0x121c <_Z6readerhR4UartPv+0x39e>
    1218:	1c 8a       	std	Y+20, r1	; 0x14
    121a:	1b 8a       	std	Y+19, r1	; 0x13
    121c:	24 e3       	ldi	r18, 0x34	; 52
    121e:	33 e0       	ldi	r19, 0x03	; 3
    1220:	8b 89       	ldd	r24, Y+19	; 0x13
    1222:	9c 89       	ldd	r25, Y+20	; 0x14
    1224:	b9 01       	movw	r22, r18
    1226:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
    122a:	20 91 17 07 	lds	r18, 0x0717
    122e:	62 2f       	mov	r22, r18
    1230:	0e 94 5a 05 	call	0xab4	; 0xab4 <_ZN6StreamlsEa>
    1234:	23 e1       	ldi	r18, 0x13	; 19
    1236:	32 e0       	ldi	r19, 0x02	; 2
    1238:	b9 01       	movw	r22, r18
    123a:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
    123e:	a1 c1       	rjmp	.+834    	; 0x1582 <_Z6readerhR4UartPv+0x704>
					#endif
					break;
				}
				case 'P':
				{
					command_receiving.servo_target_positions[r_curr_servo] = command_receiving.servo_target_positions[r_curr_servo]*10 + to_int(data);
    1240:	80 91 17 07 	lds	r24, 0x0717
    1244:	c8 2e       	mov	r12, r24
    1246:	dd 24       	eor	r13, r13
    1248:	c7 fc       	sbrc	r12, 7
    124a:	d0 94       	com	r13
    124c:	80 91 17 07 	lds	r24, 0x0717
    1250:	99 27       	eor	r25, r25
    1252:	87 fd       	sbrc	r24, 7
    1254:	90 95       	com	r25
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	fc 01       	movw	r30, r24
    1260:	e4 56       	subi	r30, 0x64	; 100
    1262:	fa 4f       	sbci	r31, 0xFA	; 250
    1264:	80 81       	ld	r24, Z
    1266:	91 81       	ldd	r25, Z+1	; 0x01
    1268:	a2 81       	ldd	r26, Z+2	; 0x02
    126a:	b3 81       	ldd	r27, Z+3	; 0x03
    126c:	bc 01       	movw	r22, r24
    126e:	cd 01       	movw	r24, r26
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	40 e2       	ldi	r20, 0x20	; 32
    1276:	51 e4       	ldi	r21, 0x41	; 65
    1278:	0e 94 1c 1c 	call	0x3838	; 0x3838 <__mulsf3>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	7c 01       	movw	r14, r24
    1282:	8d 01       	movw	r16, r26
    1284:	8c 81       	ldd	r24, Y+4	; 0x04
    1286:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_Z6to_intc>
    128a:	aa 27       	eor	r26, r26
    128c:	97 fd       	sbrc	r25, 7
    128e:	a0 95       	com	r26
    1290:	ba 2f       	mov	r27, r26
    1292:	bc 01       	movw	r22, r24
    1294:	cd 01       	movw	r24, r26
    1296:	0e 94 90 1b 	call	0x3720	; 0x3720 <__floatsisf>
    129a:	9b 01       	movw	r18, r22
    129c:	ac 01       	movw	r20, r24
    129e:	c8 01       	movw	r24, r16
    12a0:	b7 01       	movw	r22, r14
    12a2:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__addsf3>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	9c 01       	movw	r18, r24
    12ac:	ad 01       	movw	r20, r26
    12ae:	c6 01       	movw	r24, r12
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	fc 01       	movw	r30, r24
    12ba:	e4 56       	subi	r30, 0x64	; 100
    12bc:	fa 4f       	sbci	r31, 0xFA	; 250
    12be:	20 83       	st	Z, r18
    12c0:	31 83       	std	Z+1, r19	; 0x01
    12c2:	42 83       	std	Z+2, r20	; 0x02
    12c4:	53 83       	std	Z+3, r21	; 0x03
					command_receiving.has_changed[r_curr_servo] = 1;
    12c6:	80 91 17 07 	lds	r24, 0x0717
    12ca:	99 27       	eor	r25, r25
    12cc:	87 fd       	sbrc	r24, 7
    12ce:	90 95       	com	r25
    12d0:	fc 01       	movw	r30, r24
    12d2:	e4 5b       	subi	r30, 0xB4	; 180
    12d4:	f9 4f       	sbci	r31, 0xF9	; 249
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	80 83       	st	Z, r24
					#ifdef DEBUG_SESSION
						cout << "Set current servo target position to:" << command_receiving.servo_target_positions[r_curr_servo] << "\n";
    12da:	80 91 43 08 	lds	r24, 0x0843
    12de:	90 91 44 08 	lds	r25, 0x0844
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	51 f0       	breq	.+20     	; 0x12fa <_Z6readerhR4UartPv+0x47c>
    12e6:	80 91 43 08 	lds	r24, 0x0843
    12ea:	90 91 44 08 	lds	r25, 0x0844
    12ee:	9c 01       	movw	r18, r24
    12f0:	22 50       	subi	r18, 0x02	; 2
    12f2:	30 40       	sbci	r19, 0x00	; 0
    12f4:	3a 8b       	std	Y+18, r19	; 0x12
    12f6:	29 8b       	std	Y+17, r18	; 0x11
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <_Z6readerhR4UartPv+0x480>
    12fa:	1a 8a       	std	Y+18, r1	; 0x12
    12fc:	19 8a       	std	Y+17, r1	; 0x11
    12fe:	2a e4       	ldi	r18, 0x4A	; 74
    1300:	33 e0       	ldi	r19, 0x03	; 3
    1302:	89 89       	ldd	r24, Y+17	; 0x11
    1304:	9a 89       	ldd	r25, Y+18	; 0x12
    1306:	b9 01       	movw	r22, r18
    1308:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
    130c:	bc 01       	movw	r22, r24
    130e:	80 91 17 07 	lds	r24, 0x0717
    1312:	99 27       	eor	r25, r25
    1314:	87 fd       	sbrc	r24, 7
    1316:	90 95       	com	r25
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	fc 01       	movw	r30, r24
    1322:	e4 56       	subi	r30, 0x64	; 100
    1324:	fa 4f       	sbci	r31, 0xFA	; 250
    1326:	20 81       	ld	r18, Z
    1328:	31 81       	ldd	r19, Z+1	; 0x01
    132a:	42 81       	ldd	r20, Z+2	; 0x02
    132c:	53 81       	ldd	r21, Z+3	; 0x03
    132e:	cb 01       	movw	r24, r22
    1330:	ba 01       	movw	r22, r20
    1332:	a9 01       	movw	r20, r18
    1334:	0e 94 6e 05 	call	0xadc	; 0xadc <_ZN6StreamlsEd>
    1338:	23 e1       	ldi	r18, 0x13	; 19
    133a:	32 e0       	ldi	r19, 0x02	; 2
    133c:	b9 01       	movw	r22, r18
    133e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
    1342:	1f c1       	rjmp	.+574    	; 0x1582 <_Z6readerhR4UartPv+0x704>
					#endif
					break;
				}
				case 'S':
				{
					command_receiving.servo_speeds[r_curr_servo] = command_receiving.servo_speeds[r_curr_servo]*10 + to_int(data);
    1344:	80 91 17 07 	lds	r24, 0x0717
    1348:	c8 2e       	mov	r12, r24
    134a:	dd 24       	eor	r13, r13
    134c:	c7 fc       	sbrc	r12, 7
    134e:	d0 94       	com	r13
    1350:	80 91 17 07 	lds	r24, 0x0717
    1354:	99 27       	eor	r25, r25
    1356:	87 fd       	sbrc	r24, 7
    1358:	90 95       	com	r25
    135a:	46 96       	adiw	r24, 0x16	; 22
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	fc 01       	movw	r30, r24
    1366:	e4 56       	subi	r30, 0x64	; 100
    1368:	fa 4f       	sbci	r31, 0xFA	; 250
    136a:	80 81       	ld	r24, Z
    136c:	91 81       	ldd	r25, Z+1	; 0x01
    136e:	a2 81       	ldd	r26, Z+2	; 0x02
    1370:	b3 81       	ldd	r27, Z+3	; 0x03
    1372:	bc 01       	movw	r22, r24
    1374:	cd 01       	movw	r24, r26
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	40 e2       	ldi	r20, 0x20	; 32
    137c:	51 e4       	ldi	r21, 0x41	; 65
    137e:	0e 94 1c 1c 	call	0x3838	; 0x3838 <__mulsf3>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	7c 01       	movw	r14, r24
    1388:	8d 01       	movw	r16, r26
    138a:	8c 81       	ldd	r24, Y+4	; 0x04
    138c:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_Z6to_intc>
    1390:	aa 27       	eor	r26, r26
    1392:	97 fd       	sbrc	r25, 7
    1394:	a0 95       	com	r26
    1396:	ba 2f       	mov	r27, r26
    1398:	bc 01       	movw	r22, r24
    139a:	cd 01       	movw	r24, r26
    139c:	0e 94 90 1b 	call	0x3720	; 0x3720 <__floatsisf>
    13a0:	9b 01       	movw	r18, r22
    13a2:	ac 01       	movw	r20, r24
    13a4:	c8 01       	movw	r24, r16
    13a6:	b7 01       	movw	r22, r14
    13a8:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__addsf3>
    13ac:	dc 01       	movw	r26, r24
    13ae:	cb 01       	movw	r24, r22
    13b0:	9c 01       	movw	r18, r24
    13b2:	ad 01       	movw	r20, r26
    13b4:	c6 01       	movw	r24, r12
    13b6:	46 96       	adiw	r24, 0x16	; 22
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	fc 01       	movw	r30, r24
    13c2:	e4 56       	subi	r30, 0x64	; 100
    13c4:	fa 4f       	sbci	r31, 0xFA	; 250
    13c6:	20 83       	st	Z, r18
    13c8:	31 83       	std	Z+1, r19	; 0x01
    13ca:	42 83       	std	Z+2, r20	; 0x02
    13cc:	53 83       	std	Z+3, r21	; 0x03
					#ifdef DEBUG_SESSION
						cout << "Set current servo speed to:" << command_receiving.servo_speeds[r_curr_servo] << "\n";
    13ce:	80 91 43 08 	lds	r24, 0x0843
    13d2:	90 91 44 08 	lds	r25, 0x0844
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	51 f0       	breq	.+20     	; 0x13ee <_Z6readerhR4UartPv+0x570>
    13da:	80 91 43 08 	lds	r24, 0x0843
    13de:	90 91 44 08 	lds	r25, 0x0844
    13e2:	9c 01       	movw	r18, r24
    13e4:	22 50       	subi	r18, 0x02	; 2
    13e6:	30 40       	sbci	r19, 0x00	; 0
    13e8:	38 8b       	std	Y+16, r19	; 0x10
    13ea:	2f 87       	std	Y+15, r18	; 0x0f
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <_Z6readerhR4UartPv+0x574>
    13ee:	18 8a       	std	Y+16, r1	; 0x10
    13f0:	1f 86       	std	Y+15, r1	; 0x0f
    13f2:	20 e7       	ldi	r18, 0x70	; 112
    13f4:	33 e0       	ldi	r19, 0x03	; 3
    13f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13f8:	98 89       	ldd	r25, Y+16	; 0x10
    13fa:	b9 01       	movw	r22, r18
    13fc:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
    1400:	bc 01       	movw	r22, r24
    1402:	80 91 17 07 	lds	r24, 0x0717
    1406:	99 27       	eor	r25, r25
    1408:	87 fd       	sbrc	r24, 7
    140a:	90 95       	com	r25
    140c:	46 96       	adiw	r24, 0x16	; 22
    140e:	88 0f       	add	r24, r24
    1410:	99 1f       	adc	r25, r25
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	fc 01       	movw	r30, r24
    1418:	e4 56       	subi	r30, 0x64	; 100
    141a:	fa 4f       	sbci	r31, 0xFA	; 250
    141c:	20 81       	ld	r18, Z
    141e:	31 81       	ldd	r19, Z+1	; 0x01
    1420:	42 81       	ldd	r20, Z+2	; 0x02
    1422:	53 81       	ldd	r21, Z+3	; 0x03
    1424:	cb 01       	movw	r24, r22
    1426:	ba 01       	movw	r22, r20
    1428:	a9 01       	movw	r20, r18
    142a:	0e 94 6e 05 	call	0xadc	; 0xadc <_ZN6StreamlsEd>
    142e:	23 e1       	ldi	r18, 0x13	; 19
    1430:	32 e0       	ldi	r19, 0x02	; 2
    1432:	b9 01       	movw	r22, r18
    1434:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
    1438:	a4 c0       	rjmp	.+328    	; 0x1582 <_Z6readerhR4UartPv+0x704>
					#endif
					break;
				}
				case 'T':
				{
					command_receiving.time = command_receiving.time*10 + to_int(data);
    143a:	80 91 57 06 	lds	r24, 0x0657
    143e:	90 91 58 06 	lds	r25, 0x0658
    1442:	9c 01       	movw	r18, r24
    1444:	22 0f       	add	r18, r18
    1446:	33 1f       	adc	r19, r19
    1448:	c9 01       	movw	r24, r18
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	89 01       	movw	r16, r18
    1454:	08 0f       	add	r16, r24
    1456:	19 1f       	adc	r17, r25
    1458:	8c 81       	ldd	r24, Y+4	; 0x04
    145a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_Z6to_intc>
    145e:	80 0f       	add	r24, r16
    1460:	91 1f       	adc	r25, r17
    1462:	90 93 58 06 	sts	0x0658, r25
    1466:	80 93 57 06 	sts	0x0657, r24
					#ifdef DEBUG_SESSION
						cout << "Set movement time to:" << command_receiving.time << "\n";
    146a:	80 91 43 08 	lds	r24, 0x0843
    146e:	90 91 44 08 	lds	r25, 0x0844
    1472:	00 97       	sbiw	r24, 0x00	; 0
    1474:	51 f0       	breq	.+20     	; 0x148a <_Z6readerhR4UartPv+0x60c>
    1476:	80 91 43 08 	lds	r24, 0x0843
    147a:	90 91 44 08 	lds	r25, 0x0844
    147e:	9c 01       	movw	r18, r24
    1480:	22 50       	subi	r18, 0x02	; 2
    1482:	30 40       	sbci	r19, 0x00	; 0
    1484:	3e 87       	std	Y+14, r19	; 0x0e
    1486:	2d 87       	std	Y+13, r18	; 0x0d
    1488:	02 c0       	rjmp	.+4      	; 0x148e <_Z6readerhR4UartPv+0x610>
    148a:	1e 86       	std	Y+14, r1	; 0x0e
    148c:	1d 86       	std	Y+13, r1	; 0x0d
    148e:	2c e8       	ldi	r18, 0x8C	; 140
    1490:	33 e0       	ldi	r19, 0x03	; 3
    1492:	8d 85       	ldd	r24, Y+13	; 0x0d
    1494:	9e 85       	ldd	r25, Y+14	; 0x0e
    1496:	b9 01       	movw	r22, r18
    1498:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
    149c:	20 91 57 06 	lds	r18, 0x0657
    14a0:	30 91 58 06 	lds	r19, 0x0658
    14a4:	b9 01       	movw	r22, r18
    14a6:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_ZN6StreamlsEi>
    14aa:	23 e1       	ldi	r18, 0x13	; 19
    14ac:	32 e0       	ldi	r19, 0x02	; 2
    14ae:	b9 01       	movw	r22, r18
    14b0:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
    14b4:	66 c0       	rjmp	.+204    	; 0x1582 <_Z6readerhR4UartPv+0x704>
			}
			break;
		}
		case ' ':
		{
			r_curr_subcommand = ' ';
    14b6:	80 e2       	ldi	r24, 0x20	; 32
    14b8:	80 93 16 07 	sts	0x0716, r24
    14bc:	62 c0       	rjmp	.+196    	; 0x1582 <_Z6readerhR4UartPv+0x704>
		}
		case '\r':
		case '\n':
		{
			// execute command
			r_curr_subcommand = ' ';
    14be:	80 e2       	ldi	r24, 0x20	; 32
    14c0:	80 93 16 07 	sts	0x0716, r24
			//	print_command(&command_receiving, NULL);
			//	cout << "In process ";
			//	print_command(&command_in_process, NULL);
			//#endif

			CRITICAL_SECTION{
    14c4:	ef e5       	ldi	r30, 0x5F	; 95
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	8b 83       	std	Y+3, r24	; 0x03
    14cc:	0e 94 ca 02 	call	0x594	; 0x594 <__iCliRetVal>
    14d0:	89 83       	std	Y+1, r24	; 0x01
    14d2:	0a c0       	rjmp	.+20     	; 0x14e8 <_Z6readerhR4UartPv+0x66a>
				memcpy(&command_in_process, &command_receiving, sizeof(command_receiving));
    14d4:	89 e5       	ldi	r24, 0x59	; 89
    14d6:	96 e0       	ldi	r25, 0x06	; 6
    14d8:	2c e9       	ldi	r18, 0x9C	; 156
    14da:	35 e0       	ldi	r19, 0x05	; 5
    14dc:	b9 01       	movw	r22, r18
    14de:	4d eb       	ldi	r20, 0xBD	; 189
    14e0:	50 e0       	ldi	r21, 0x00	; 0
    14e2:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <memcpy>
			//	print_command(&command_receiving, NULL);
			//	cout << "In process ";
			//	print_command(&command_in_process, NULL);
			//#endif

			CRITICAL_SECTION{
    14e6:	19 82       	std	Y+1, r1	; 0x01
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	88 23       	and	r24, r24
    14ec:	99 f7       	brne	.-26     	; 0x14d4 <_Z6readerhR4UartPv+0x656>
				memcpy(&command_in_process, &command_receiving, sizeof(command_receiving));
			}
    14ee:	ce 01       	movw	r24, r28
    14f0:	03 96       	adiw	r24, 0x03	; 3
    14f2:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__iRestore>
			
			
			initialize_command(&command_receiving);
    14f6:	8c e9       	ldi	r24, 0x9C	; 156
    14f8:	95 e0       	ldi	r25, 0x05	; 5
    14fa:	0e 94 92 03 	call	0x724	; 0x724 <_Z18initialize_commandP7command>
			
			#ifdef  DEBUG_SESSION
				cout << "After copy.\nReceived ";
    14fe:	80 91 43 08 	lds	r24, 0x0843
    1502:	90 91 44 08 	lds	r25, 0x0844
    1506:	00 97       	sbiw	r24, 0x00	; 0
    1508:	51 f0       	breq	.+20     	; 0x151e <_Z6readerhR4UartPv+0x6a0>
    150a:	80 91 43 08 	lds	r24, 0x0843
    150e:	90 91 44 08 	lds	r25, 0x0844
    1512:	9c 01       	movw	r18, r24
    1514:	22 50       	subi	r18, 0x02	; 2
    1516:	30 40       	sbci	r19, 0x00	; 0
    1518:	3c 87       	std	Y+12, r19	; 0x0c
    151a:	2b 87       	std	Y+11, r18	; 0x0b
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <_Z6readerhR4UartPv+0x6a4>
    151e:	1c 86       	std	Y+12, r1	; 0x0c
    1520:	1b 86       	std	Y+11, r1	; 0x0b
    1522:	22 ea       	ldi	r18, 0xA2	; 162
    1524:	33 e0       	ldi	r19, 0x03	; 3
    1526:	8b 85       	ldd	r24, Y+11	; 0x0b
    1528:	9c 85       	ldd	r25, Y+12	; 0x0c
    152a:	b9 01       	movw	r22, r18
    152c:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
				print_command(&command_receiving, NULL);
    1530:	8c e9       	ldi	r24, 0x9C	; 156
    1532:	95 e0       	ldi	r25, 0x05	; 5
    1534:	40 e0       	ldi	r20, 0x00	; 0
    1536:	50 e0       	ldi	r21, 0x00	; 0
    1538:	60 e0       	ldi	r22, 0x00	; 0
    153a:	70 e0       	ldi	r23, 0x00	; 0
    153c:	0e 94 1a 06 	call	0xc34	; 0xc34 <_Z13print_commandP7commandm>
				cout << "In process ";
    1540:	80 91 43 08 	lds	r24, 0x0843
    1544:	90 91 44 08 	lds	r25, 0x0844
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	51 f0       	breq	.+20     	; 0x1560 <_Z6readerhR4UartPv+0x6e2>
    154c:	80 91 43 08 	lds	r24, 0x0843
    1550:	90 91 44 08 	lds	r25, 0x0844
    1554:	9c 01       	movw	r18, r24
    1556:	22 50       	subi	r18, 0x02	; 2
    1558:	30 40       	sbci	r19, 0x00	; 0
    155a:	3a 87       	std	Y+10, r19	; 0x0a
    155c:	29 87       	std	Y+9, r18	; 0x09
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <_Z6readerhR4UartPv+0x6e6>
    1560:	1a 86       	std	Y+10, r1	; 0x0a
    1562:	19 86       	std	Y+9, r1	; 0x09
    1564:	28 eb       	ldi	r18, 0xB8	; 184
    1566:	33 e0       	ldi	r19, 0x03	; 3
    1568:	89 85       	ldd	r24, Y+9	; 0x09
    156a:	9a 85       	ldd	r25, Y+10	; 0x0a
    156c:	b9 01       	movw	r22, r18
    156e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN6StreamlsEPKc>
				print_command(&command_in_process, NULL);
    1572:	89 e5       	ldi	r24, 0x59	; 89
    1574:	96 e0       	ldi	r25, 0x06	; 6
    1576:	40 e0       	ldi	r20, 0x00	; 0
    1578:	50 e0       	ldi	r21, 0x00	; 0
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	70 e0       	ldi	r23, 0x00	; 0
    157e:	0e 94 1a 06 	call	0xc34	; 0xc34 <_Z13print_commandP7commandm>
		{
			//err.print("Reader: Wrong input!");
			break;
		}
	}
}
    1582:	a6 96       	adiw	r28, 0x26	; 38
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	f8 94       	cli
    1588:	de bf       	out	0x3e, r29	; 62
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	cd bf       	out	0x3d, r28	; 61
    158e:	cf 91       	pop	r28
    1590:	df 91       	pop	r29
    1592:	1f 91       	pop	r17
    1594:	0f 91       	pop	r16
    1596:	ff 90       	pop	r15
    1598:	ef 90       	pop	r14
    159a:	df 90       	pop	r13
    159c:	cf 90       	pop	r12
    159e:	08 95       	ret

000015a0 <clockGetSnapshot>:
#define STATUS_LED_DDR   DDRC		
#define STATUS_LED_PIN   PC1		
static uint8_t counter;
		

void clockGetSnapshot(TIMER_SNAPSHOT* snapshot){
    15a0:	fc 01       	movw	r30, r24
	// Clock timer uses TIMER_MODE_CTC_OCR which generate compare interrupts on channel A
	CRITICAL_SECTION{
    15a2:	6f b7       	in	r22, 0x3f	; 63
#endif  /* C++ */
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
    15a4:	f8 94       	cli
		// get the current ticks from the timer
		uint8_t tcnt = TCNT0;
    15a6:	86 b5       	in	r24, 0x26	; 38
		// get the number of whole ticks
		snapshot->whole  = wholeTicks;
    15a8:	20 91 1c 07 	lds	r18, 0x071C
    15ac:	30 91 1d 07 	lds	r19, 0x071D
    15b0:	40 91 1e 07 	lds	r20, 0x071E
    15b4:	50 91 1f 07 	lds	r21, 0x071F
    15b8:	20 83       	st	Z, r18
    15ba:	31 83       	std	Z+1, r19	; 0x01
    15bc:	42 83       	std	Z+2, r20	; 0x02
    15be:	53 83       	std	Z+3, r21	; 0x03
		// get the current ticks again
		snapshot->part   = TCNT0;
    15c0:	26 b5       	in	r18, 0x26	; 38
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	35 83       	std	Z+5, r19	; 0x05
    15c6:	24 83       	std	Z+4, r18	; 0x04
		// If the second reading of tcnt has gone down then there must have been an overflow
		// since reading the 'rtn' value. Or there may be a pending interrupt which may be
		// because interrupts are currently turned off. In either case increment the 'rtn' value
		// as if the interrupt has happened
		if(snapshot->part < tcnt || CLOCK_INT_PENDING ){
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	28 17       	cp	r18, r24
    15cc:	39 07       	cpc	r19, r25
    15ce:	10 f0       	brcs	.+4      	; 0x15d4 <clockGetSnapshot+0x34>
    15d0:	a9 9b       	sbis	0x15, 1	; 21
    15d2:	0f c0       	rjmp	.+30     	; 0x15f2 <clockGetSnapshot+0x52>
			snapshot->whole += usPerTop;
    15d4:	80 81       	ld	r24, Z
    15d6:	91 81       	ldd	r25, Z+1	; 0x01
    15d8:	a2 81       	ldd	r26, Z+2	; 0x02
    15da:	b3 81       	ldd	r27, Z+3	; 0x03
    15dc:	80 58       	subi	r24, 0x80	; 128
    15de:	91 4c       	sbci	r25, 0xC1	; 193
    15e0:	af 4f       	sbci	r26, 0xFF	; 255
    15e2:	bf 4f       	sbci	r27, 0xFF	; 255
    15e4:	80 83       	st	Z, r24
    15e6:	91 83       	std	Z+1, r25	; 0x01
    15e8:	a2 83       	std	Z+2, r26	; 0x02
    15ea:	b3 83       	std	Z+3, r27	; 0x03
			// get the current ticks again
			snapshot->part = TCNT0;
    15ec:	86 b5       	in	r24, 0x26	; 38
    15ee:	84 83       	std	Z+4, r24	; 0x04
    15f0:	15 82       	std	Z+5, r1	; 0x05
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
    15f2:	6f bf       	out	0x3f, r22	; 63
		}
	}
}
    15f4:	08 95       	ret

000015f6 <clockSnapshotToTicks>:

TICK_COUNT clockSnapshotToTicks(const TIMER_SNAPSHOT* snapshot){
    15f6:	ef 92       	push	r14
    15f8:	ff 92       	push	r15
    15fa:	0f 93       	push	r16
    15fc:	1f 93       	push	r17
    15fe:	fc 01       	movw	r30, r24
	TICK_COUNT rtn = snapshot->whole;
    1600:	e0 80       	ld	r14, Z
    1602:	f1 80       	ldd	r15, Z+1	; 0x01
    1604:	02 81       	ldd	r16, Z+2	; 0x02
    1606:	13 81       	ldd	r17, Z+3	; 0x03

	// top = usPerTop
	// part     x
	TICK_COUNT frac  = snapshot->part;
    1608:	64 81       	ldd	r22, Z+4	; 0x04
    160a:	75 81       	ldd	r23, Z+5	; 0x05
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	90 e0       	ldi	r25, 0x00	; 0
	frac *= usPerTop;
    1610:	20 e8       	ldi	r18, 0x80	; 128
    1612:	3e e3       	ldi	r19, 0x3E	; 62
    1614:	40 e0       	ldi	r20, 0x00	; 0
    1616:	50 e0       	ldi	r21, 0x00	; 0
    1618:	0e 94 06 21 	call	0x420c	; 0x420c <__mulsi3>
    161c:	2a ef       	ldi	r18, 0xFA	; 250
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	40 e0       	ldi	r20, 0x00	; 0
    1622:	50 e0       	ldi	r21, 0x00	; 0
    1624:	0e 94 39 21 	call	0x4272	; 0x4272 <__udivmodsi4>
    1628:	2e 0d       	add	r18, r14
    162a:	3f 1d       	adc	r19, r15
    162c:	40 1f       	adc	r20, r16
    162e:	51 1f       	adc	r21, r17
	frac /= CLOCK_TOP;

	rtn += frac;

	return rtn;
}
    1630:	b9 01       	movw	r22, r18
    1632:	ca 01       	movw	r24, r20
    1634:	1f 91       	pop	r17
    1636:	0f 91       	pop	r16
    1638:	ff 90       	pop	r15
    163a:	ef 90       	pop	r14
    163c:	08 95       	ret

0000163e <clockGetus>:

// Get the current clock time in uS
TICK_COUNT clockGetus(void){
    163e:	0f 93       	push	r16
    1640:	1f 93       	push	r17
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	00 d0       	rcall	.+0      	; 0x1648 <clockGetus+0xa>
    1648:	00 d0       	rcall	.+0      	; 0x164a <clockGetus+0xc>
    164a:	00 d0       	rcall	.+0      	; 0x164c <clockGetus+0xe>
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
	TIMER_SNAPSHOT snapshot;
	clockGetSnapshot(&snapshot);
    1650:	8e 01       	movw	r16, r28
    1652:	0f 5f       	subi	r16, 0xFF	; 255
    1654:	1f 4f       	sbci	r17, 0xFF	; 255
    1656:	c8 01       	movw	r24, r16
    1658:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <clockGetSnapshot>

	return clockSnapshotToTicks(&snapshot);
    165c:	c8 01       	movw	r24, r16
    165e:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <clockSnapshotToTicks>
}
    1662:	26 96       	adiw	r28, 0x06	; 6
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	de bf       	out	0x3e, r29	; 62
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	cd bf       	out	0x3d, r28	; 61
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	1f 91       	pop	r17
    1674:	0f 91       	pop	r16
    1676:	08 95       	ret

00001678 <__clockInit>:

// Initialise the clock timer and turn it on
void __clockInit(void){
	// Set interrupt pending = false
	CLOCK_INT_CLEAR;
    1678:	a9 9a       	sbi	0x15, 1	; 21
	
	// Enable interrupts
	CLOCK_INT_ENABLE;
    167a:	ee e6       	ldi	r30, 0x6E	; 110
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	82 60       	ori	r24, 0x02	; 2
    1682:	80 83       	st	Z, r24
}
    1684:	08 95       	ret

00001686 <__vector_21>:

// ISR for clock overflow. Occurs every msPerTop
ISR(TIMER0_COMPA_vect) {
    1686:	1f 92       	push	r1
    1688:	0f 92       	push	r0
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	0f 92       	push	r0
    168e:	11 24       	eor	r1, r1
    1690:	2f 93       	push	r18
    1692:	8f 93       	push	r24
    1694:	9f 93       	push	r25
    1696:	af 93       	push	r26
    1698:	bf 93       	push	r27
	wholeTicks += usPerTop;
    169a:	80 91 1c 07 	lds	r24, 0x071C
    169e:	90 91 1d 07 	lds	r25, 0x071D
    16a2:	a0 91 1e 07 	lds	r26, 0x071E
    16a6:	b0 91 1f 07 	lds	r27, 0x071F
    16aa:	80 58       	subi	r24, 0x80	; 128
    16ac:	91 4c       	sbci	r25, 0xC1	; 193
    16ae:	af 4f       	sbci	r26, 0xFF	; 255
    16b0:	bf 4f       	sbci	r27, 0xFF	; 255
    16b2:	80 93 1c 07 	sts	0x071C, r24
    16b6:	90 93 1d 07 	sts	0x071D, r25
    16ba:	a0 93 1e 07 	sts	0x071E, r26
    16be:	b0 93 1f 07 	sts	0x071F, r27

	
	// Flash the status led if there is an error
	ERROR* err = &__error;
	if(err->errorCode && bit_is_set(STATUS_LED_DDR,STATUS_LED_PIN)){
    16c2:	20 91 35 08 	lds	r18, 0x0835
    16c6:	22 23       	and	r18, r18
    16c8:	b9 f1       	breq	.+110    	; 0x1738 <__vector_21+0xb2>
    16ca:	39 9b       	sbis	0x07, 1	; 7
    16cc:	35 c0       	rjmp	.+106    	; 0x1738 <__vector_21+0xb2>
		// There is an error and status led pin is an output

		// Decrement any counter
		if(counter){
    16ce:	80 91 20 07 	lds	r24, 0x0720
    16d2:	88 23       	and	r24, r24
    16d4:	19 f0       	breq	.+6      	; 0x16dc <__vector_21+0x56>
			counter--;
    16d6:	81 50       	subi	r24, 0x01	; 1
    16d8:	80 93 20 07 	sts	0x0720, r24
		}
		if(counter==0){
    16dc:	80 91 20 07 	lds	r24, 0x0720
    16e0:	88 23       	and	r24, r24
    16e2:	51 f5       	brne	.+84     	; 0x1738 <__vector_21+0xb2>
			// Its time to do something
			if(err->remaining==0){
    16e4:	80 91 36 08 	lds	r24, 0x0836
    16e8:	88 23       	and	r24, r24
    16ea:	59 f4       	brne	.+22     	; 0x1702 <__vector_21+0x7c>
				err->remaining = ABS(err->errorCode);
    16ec:	82 2f       	mov	r24, r18
    16ee:	99 27       	eor	r25, r25
    16f0:	87 fd       	sbrc	r24, 7
    16f2:	90 95       	com	r25
    16f4:	97 ff       	sbrs	r25, 7
    16f6:	03 c0       	rjmp	.+6      	; 0x16fe <__vector_21+0x78>
    16f8:	90 95       	com	r25
    16fa:	81 95       	neg	r24
    16fc:	9f 4f       	sbci	r25, 0xFF	; 255
    16fe:	80 93 36 08 	sts	0x0836, r24
			}

			uint8_t delay = (err->errorCode < 0 ) ? 250/msPerTop : 500/msPerTop;
    1702:	27 fd       	sbrc	r18, 7
    1704:	02 c0       	rjmp	.+4      	; 0x170a <__vector_21+0x84>
    1706:	9f e1       	ldi	r25, 0x1F	; 31
    1708:	01 c0       	rjmp	.+2      	; 0x170c <__vector_21+0x86>
    170a:	9f e0       	ldi	r25, 0x0F	; 15
			if(err->phase){
    170c:	20 91 37 08 	lds	r18, 0x0837
    1710:	22 23       	and	r18, r18
    1712:	41 f0       	breq	.+16     	; 0x1724 <__vector_21+0x9e>
				// turn led off
				if(-- err->remaining == 0){
    1714:	80 91 36 08 	lds	r24, 0x0836
    1718:	81 50       	subi	r24, 0x01	; 1
    171a:	80 93 36 08 	sts	0x0836, r24
    171e:	88 23       	and	r24, r24
    1720:	09 f4       	brne	.+2      	; 0x1724 <__vector_21+0x9e>
    1722:	9d e7       	ldi	r25, 0x7D	; 125
					delay = 2000/msPerTop;
				}
			}else{
				// turn led on
			}
			err->phase = !err->phase;
    1724:	10 92 37 08 	sts	0x0837, r1
    1728:	22 23       	and	r18, r18
    172a:	19 f4       	brne	.+6      	; 0x1732 <__vector_21+0xac>
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	80 93 37 08 	sts	0x0837, r24
			counter = delay;
    1732:	90 93 20 07 	sts	0x0720, r25
			// toggle the LED
			sbi(STATUS_LED_INPUT,STATUS_LED_PIN);
    1736:	31 9a       	sbi	0x06, 1	; 6
		}
	}
	
}
    1738:	bf 91       	pop	r27
    173a:	af 91       	pop	r26
    173c:	9f 91       	pop	r25
    173e:	8f 91       	pop	r24
    1740:	2f 91       	pop	r18
    1742:	0f 90       	pop	r0
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	0f 90       	pop	r0
    1748:	1f 90       	pop	r1
    174a:	18 95       	reti

0000174c <marquee_put_char>:
static MAKE_WRITER(marquee_put_char); /* Fwd Def */
MARQUEE _marquee_ = MAKE_MARQUEE(marquee_list,500000,2000000,&marquee_put_char);
// Create a Writer to write to marquee
// Do NOT call it directly instead, to write the char 'A' use:
// 	marqueeGetWriter(&marquee)('A');
static MAKE_WRITER(marquee_put_char){ /* createWriter */
    174c:	68 2f       	mov	r22, r24
	return marqueeSendByte(&_marquee_,byte);
    174e:	82 e1       	ldi	r24, 0x12	; 18
    1750:	94 e0       	ldi	r25, 0x04	; 4
    1752:	0e 94 9f 12 	call	0x253e	; 0x253e <marqueeSendByte>
}
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	08 95       	ret

0000175a <registerLED>:
static __inline__ void LED_off(LED* led){
	LED_set(led,FALSE);
}

static __inline__ void statusLEDregister(const IOPin* pin, boolean activeHigh){
	statusLED.pin = pin;
    175a:	8e e7       	ldi	r24, 0x7E	; 126
    175c:	93 e0       	ldi	r25, 0x03	; 3
    175e:	90 93 3b 08 	sts	0x083B, r25
    1762:	80 93 3a 08 	sts	0x083A, r24
	statusLED.activeHigh = activeHigh;
    1766:	80 91 3c 08 	lds	r24, 0x083C
	statusLED.initialised=FALSE;
    176a:	8c 7f       	andi	r24, 0xFC	; 252
    176c:	80 93 3c 08 	sts	0x083C, r24


void LED_set(LED* led,	boolean value);

static __inline__ void LED_on(LED* led){
	LED_set(led,TRUE);
    1770:	8a e3       	ldi	r24, 0x3A	; 58
    1772:	98 e0       	ldi	r25, 0x08	; 8
    1774:	6f ef       	ldi	r22, 0xFF	; 255
    1776:	0e 94 ef 11 	call	0x23de	; 0x23de <LED_set>
	servoPWMInit(&_servos2_);
}
// ----------- Register the statusLED -----------
void registerLED(void){
	statusLEDregister(C1,false);
}
    177a:	08 95       	ret

0000177c <initHardware>:
	segled_init(&_led_display_);
}

// ----------- Initialise my added devices ------
void initHardware(void){
	servoPWMInit(&_Servos1_);
    177c:	8d ea       	ldi	r24, 0xAD	; 173
    177e:	94 e0       	ldi	r25, 0x04	; 4
    1780:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <servoPWMInit>
	servoPWMInit(&_servos2_);
    1784:	8d e3       	ldi	r24, 0x3D	; 61
    1786:	95 e0       	ldi	r25, 0x05	; 5
    1788:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <servoPWMInit>
}
    178c:	08 95       	ret

0000178e <sysInitHardware>:
	&_servo12_
};
SERVO_DRIVER _servos2_ = MAKE_SERVO_DRIVER(servos2_list);

// ----------- Initialise built in devices ------
void sysInitHardware(void){
    178e:	0f 93       	push	r16
    1790:	1f 93       	push	r17
static __inline__ boolean SWITCH_released(SWITCH* sw){
	return pin_is_high(sw->pin);
}

static __inline__ void SWITCH_init(SWITCH *sw){
	pin_make_input(sw->pin,TRUE);
    1792:	80 91 ff 03 	lds	r24, 0x03FF
    1796:	90 91 00 04 	lds	r25, 0x0400
    179a:	6f ef       	ldi	r22, 0xFF	; 255
    179c:	0e 94 a1 11 	call	0x2342	; 0x2342 <pin_make_input>
	SWITCH_init(&_button_);
	setErrorLog(&uart1SendByte);
    17a0:	0e e3       	ldi	r16, 0x3E	; 62
    17a2:	1c e0       	ldi	r17, 0x0C	; 12
    17a4:	c8 01       	movw	r24, r16
    17a6:	0e 94 24 11 	call	0x2248	; 0x2248 <setErrorLog>
	rprintfInit(&uart1SendByte);
    17aa:	c8 01       	movw	r24, r16
    17ac:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <rprintfInit>
	uartInit(_C_uart1,115200);
    17b0:	8d ec       	ldi	r24, 0xCD	; 205
    17b2:	93 e0       	ldi	r25, 0x03	; 3
    17b4:	40 e0       	ldi	r20, 0x00	; 0
    17b6:	52 ec       	ldi	r21, 0xC2	; 194
    17b8:	61 e0       	ldi	r22, 0x01	; 1
    17ba:	70 e0       	ldi	r23, 0x00	; 0
    17bc:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <_uartInit>

// Write a character to the display
uint8_t segled_put_char(SEGLED* led, uint8_t ch);

static __inline__ void segled_init(SEGLED* led){
	segled_put_char(led,' ');
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	94 e0       	ldi	r25, 0x04	; 4
    17c4:	60 e2       	ldi	r22, 0x20	; 32
    17c6:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <segled_put_char>
	segled_init(&_led_display_);
}
    17ca:	1f 91       	pop	r17
    17cc:	0f 91       	pop	r16
    17ce:	08 95       	ret

000017d0 <__vector_36>:
#endif

#ifndef USART1_RX_vect
# error Uart1 Rx complete vector undefined
#else
ISR(USART1_RX_vect){
    17d0:	1f 92       	push	r1
    17d2:	0f 92       	push	r0
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	0f 92       	push	r0
    17d8:	11 24       	eor	r1, r1
    17da:	2f 93       	push	r18
    17dc:	3f 93       	push	r19
    17de:	4f 93       	push	r20
    17e0:	5f 93       	push	r21
    17e2:	6f 93       	push	r22
    17e4:	7f 93       	push	r23
    17e6:	8f 93       	push	r24
    17e8:	9f 93       	push	r25
    17ea:	af 93       	push	r26
    17ec:	bf 93       	push	r27
    17ee:	ef 93       	push	r30
    17f0:	ff 93       	push	r31
	uartReceiveService(_C_uart1);
    17f2:	e0 91 f9 03 	lds	r30, 0x03F9
    17f6:	f0 91 fa 03 	lds	r31, 0x03FA
    17fa:	60 81       	ld	r22, Z
    17fc:	8d ec       	ldi	r24, 0xCD	; 205
    17fe:	93 e0       	ldi	r25, 0x03	; 3
    1800:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <__uartReceiveService>
}
    1804:	ff 91       	pop	r31
    1806:	ef 91       	pop	r30
    1808:	bf 91       	pop	r27
    180a:	af 91       	pop	r26
    180c:	9f 91       	pop	r25
    180e:	8f 91       	pop	r24
    1810:	7f 91       	pop	r23
    1812:	6f 91       	pop	r22
    1814:	5f 91       	pop	r21
    1816:	4f 91       	pop	r20
    1818:	3f 91       	pop	r19
    181a:	2f 91       	pop	r18
    181c:	0f 90       	pop	r0
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	0f 90       	pop	r0
    1822:	1f 90       	pop	r1
    1824:	18 95       	reti

00001826 <__vector_38>:
HW_UART __C_uart1 = MAKE_HW_UART(UCSR1A,UCSR1B,UBRR1L,UBRR1H,UDR1,null,BV(U2X1),D2,D3,&uart1GetByte,&uart1SendByte);

#ifndef USART1_TX_vect
# error Uart1 Tx complete vector undefined
#else
ISR(USART1_TX_vect){
    1826:	1f 92       	push	r1
    1828:	0f 92       	push	r0
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	0f 92       	push	r0
    182e:	11 24       	eor	r1, r1
    1830:	2f 93       	push	r18
    1832:	3f 93       	push	r19
    1834:	4f 93       	push	r20
    1836:	5f 93       	push	r21
    1838:	6f 93       	push	r22
    183a:	7f 93       	push	r23
    183c:	8f 93       	push	r24
    183e:	9f 93       	push	r25
    1840:	af 93       	push	r26
    1842:	bf 93       	push	r27
    1844:	ef 93       	push	r30
    1846:	ff 93       	push	r31
	uartTransmitService(_C_uart1);
    1848:	8d ec       	ldi	r24, 0xCD	; 205
    184a:	93 e0       	ldi	r25, 0x03	; 3
    184c:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__uartTransmitService>
}
    1850:	ff 91       	pop	r31
    1852:	ef 91       	pop	r30
    1854:	bf 91       	pop	r27
    1856:	af 91       	pop	r26
    1858:	9f 91       	pop	r25
    185a:	8f 91       	pop	r24
    185c:	7f 91       	pop	r23
    185e:	6f 91       	pop	r22
    1860:	5f 91       	pop	r21
    1862:	4f 91       	pop	r20
    1864:	3f 91       	pop	r19
    1866:	2f 91       	pop	r18
    1868:	0f 90       	pop	r0
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	0f 90       	pop	r0
    186e:	1f 90       	pop	r1
    1870:	18 95       	reti

00001872 <uart1GetByte>:
}

// Create a routine to read a byte from uart1
// Returns -1 if there was no data
MAKE_READER( uart1GetByte){
	return uartGetByte(_C_uart1);
    1872:	8d ec       	ldi	r24, 0xCD	; 205
    1874:	93 e0       	ldi	r25, 0x03	; 3
    1876:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__uartGetByte>
}
    187a:	08 95       	ret

0000187c <uart1SendByte>:

// ------------------- uart1 -------------------

// Create a routine to write bytes to uart1
// You can set rprintf to use it by calling rprintfInit(&uart1SendByte)
MAKE_WRITER(uart1SendByte){
    187c:	68 2f       	mov	r22, r24
	return uartSendByte(_C_uart1,byte);
    187e:	8d ec       	ldi	r24, 0xCD	; 205
    1880:	93 e0       	ldi	r25, 0x03	; 3
    1882:	0e 94 41 17 	call	0x2e82	; 0x2e82 <_uartSendByte>
}
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	08 95       	ret

0000188a <_ZN6Stream4_putEcP6__file>:
	/* function to write one char to device
	 * Called directly from the C FILE code
	 * when using commands from stdio.h
	 * This is passed on to the write of our C++ object
	 */
	static int	_put(char c, STREAM *s){
    188a:	28 2f       	mov	r18, r24
		Stream* str = (Stream*)s;
    188c:	61 15       	cp	r22, r1
    188e:	71 05       	cpc	r23, r1
    1890:	19 f4       	brne	.+6      	; 0x1898 <_ZN6Stream4_putEcP6__file+0xe>
    1892:	a0 e0       	ldi	r26, 0x00	; 0
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	02 c0       	rjmp	.+4      	; 0x189c <_ZN6Stream4_putEcP6__file+0x12>
    1898:	db 01       	movw	r26, r22
    189a:	12 97       	sbiw	r26, 0x02	; 2
		return str->write((uint8_t)c);
    189c:	ed 91       	ld	r30, X+
    189e:	fc 91       	ld	r31, X
    18a0:	11 97       	sbiw	r26, 0x01	; 1
    18a2:	01 90       	ld	r0, Z+
    18a4:	f0 81       	ld	r31, Z
    18a6:	e0 2d       	mov	r30, r0
    18a8:	cd 01       	movw	r24, r26
    18aa:	62 2f       	mov	r22, r18
    18ac:	09 95       	icall
	}
    18ae:	08 95       	ret

000018b0 <_ZN6Stream4_getEP6__file>:
	 * Called directly from the C FILE code
	 * when using commands from stdio.h
	 * This is passed on to the read of our C++ object
	 */
	static int	_get(STREAM *s){
		Stream* str = (Stream*)s;
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	19 f4       	brne	.+6      	; 0x18ba <_ZN6Stream4_getEP6__file+0xa>
    18b4:	a0 e0       	ldi	r26, 0x00	; 0
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <_ZN6Stream4_getEP6__file+0xe>
    18ba:	dc 01       	movw	r26, r24
    18bc:	12 97       	sbiw	r26, 0x02	; 2
		return str->read();
    18be:	ed 91       	ld	r30, X+
    18c0:	fc 91       	ld	r31, X
    18c2:	11 97       	sbiw	r26, 0x01	; 1
    18c4:	02 80       	ldd	r0, Z+2	; 0x02
    18c6:	f3 81       	ldd	r31, Z+3	; 0x03
    18c8:	e0 2d       	mov	r30, r0
    18ca:	cd 01       	movw	r24, r26
    18cc:	09 95       	icall
	}
    18ce:	08 95       	ret

000018d0 <_ZN10NullStream5writeEh>:
// A type of stream that just throws away output and returns EOF for input
class NullStream : public Stream{
public:
	NullStream(void) : Stream(){};
protected:
	virtual int write(uint8_t data) { return data;};
    18d0:	86 2f       	mov	r24, r22
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	08 95       	ret

000018d6 <_ZN10NullStream4readEv>:
	virtual int read(void) {return EOF;};
    18d6:	8f ef       	ldi	r24, 0xFF	; 255
    18d8:	9f ef       	ldi	r25, 0xFF	; 255
    18da:	08 95       	ret

000018dc <_ZN7Marquee4readEv>:
public:
	Marquee(MARQUEE* cstr) {m_cstr = cstr;}

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){return marqueeSendByte(m_cstr,data);}
	virtual int read(void){return EOF;}
    18dc:	8f ef       	ldi	r24, 0xFF	; 255
    18de:	9f ef       	ldi	r25, 0xFF	; 255
    18e0:	08 95       	ret

000018e2 <_Z10_cpp_Init_v>:
UartHW uart1(_C_uart1);
#include <Stream/Stream.h>
NullStream nullStream;

void __attribute__ ((constructor)) _cpp_Init_(void){
	stdin = stdout = uart1;
    18e2:	81 ef       	ldi	r24, 0xF1	; 241
    18e4:	97 e0       	ldi	r25, 0x07	; 7
    18e6:	90 93 44 08 	sts	0x0844, r25
    18ea:	80 93 43 08 	sts	0x0843, r24
    18ee:	90 93 42 08 	sts	0x0842, r25
    18f2:	80 93 41 08 	sts	0x0841, r24
	stderr = uart1;
    18f6:	90 93 46 08 	sts	0x0846, r25
    18fa:	80 93 45 08 	sts	0x0845, r24
}
    18fe:	08 95       	ret

00001900 <__cxa_pure_virtual>:

extern "C" void __cxa_pure_virtual(void){
    1900:	ff cf       	rjmp	.-2      	; 0x1900 <__cxa_pure_virtual>

00001902 <_GLOBAL__I_statusLed>:
#ifdef __cplusplus
}
/* ===================== C++ Wrapper Code ===============================================*/
class Led {
public:
	Led(LED * cstr){m_cstr = cstr;};
    1902:	8a e3       	ldi	r24, 0x3A	; 58
    1904:	98 e0       	ldi	r25, 0x08	; 8
    1906:	90 93 a6 07 	sts	0x07A6, r25
    190a:	80 93 a5 07 	sts	0x07A5, r24
	LED* m_cstr;
};

class StatusLed : public Led {
public:
	StatusLed(LED * cstr) : Led(cstr){
    190e:	8d e4       	ldi	r24, 0x4D	; 77
    1910:	95 e0       	ldi	r25, 0x05	; 5
    1912:	90 93 a4 07 	sts	0x07A4, r25
    1916:	80 93 a3 07 	sts	0x07A3, r24
#ifdef __cplusplus
}
/* ===================== C++ Wrapper Code ===============================================*/
class Switch {
public:
	Switch(SWITCH * cstr){m_cstr = cstr;};
    191a:	8f ef       	ldi	r24, 0xFF	; 255
    191c:	93 e0       	ldi	r25, 0x03	; 3
    191e:	90 93 a8 07 	sts	0x07A8, r25
    1922:	80 93 a7 07 	sts	0x07A7, r24

class Stream : STREAM{

public:
	Stream(void){
		fdev_setup_stream(this, &_put, &_get, _FDEV_SETUP_RW);
    1926:	65 e4       	ldi	r22, 0x45	; 69
    1928:	7c e0       	ldi	r23, 0x0C	; 12
    192a:	70 93 b4 07 	sts	0x07B4, r23
    192e:	60 93 b3 07 	sts	0x07B3, r22
    1932:	48 e5       	ldi	r20, 0x58	; 88
    1934:	5c e0       	ldi	r21, 0x0C	; 12
    1936:	50 93 b6 07 	sts	0x07B6, r21
    193a:	40 93 b5 07 	sts	0x07B5, r20
    193e:	a3 e0       	ldi	r26, 0x03	; 3
    1940:	a0 93 ae 07 	sts	0x07AE, r26
    1944:	10 92 b8 07 	sts	0x07B8, r1
    1948:	10 92 b7 07 	sts	0x07B7, r1
};


class Marquee : public Stream {
public:
	Marquee(MARQUEE* cstr) {m_cstr = cstr;}
    194c:	89 e5       	ldi	r24, 0x59	; 89
    194e:	95 e0       	ldi	r25, 0x05	; 5
    1950:	90 93 aa 07 	sts	0x07AA, r25
    1954:	80 93 a9 07 	sts	0x07A9, r24
    1958:	82 e1       	ldi	r24, 0x12	; 18
    195a:	94 e0       	ldi	r25, 0x04	; 4
    195c:	90 93 ba 07 	sts	0x07BA, r25
    1960:	80 93 b9 07 	sts	0x07B9, r24
#ifdef __cplusplus
}
class Actuator{
public:
	Actuator(__ACTUATOR* cstr){
		m_cstr = cstr;
    1964:	89 e2       	ldi	r24, 0x29	; 41
    1966:	94 e0       	ldi	r25, 0x04	; 4
    1968:	90 93 bc 07 	sts	0x07BC, r25
    196c:	80 93 bb 07 	sts	0x07BB, r24
#ifdef __cplusplus
}
class Servo : public Actuator{
public:
	Servo(SERVO* cstr) : Actuator(&cstr->actuator){
		m_cstr = cstr;
    1970:	90 93 be 07 	sts	0x07BE, r25
    1974:	80 93 bd 07 	sts	0x07BD, r24
    1978:	8f e3       	ldi	r24, 0x3F	; 63
    197a:	94 e0       	ldi	r25, 0x04	; 4
    197c:	90 93 c0 07 	sts	0x07C0, r25
    1980:	80 93 bf 07 	sts	0x07BF, r24
    1984:	90 93 c2 07 	sts	0x07C2, r25
    1988:	80 93 c1 07 	sts	0x07C1, r24
    198c:	85 e5       	ldi	r24, 0x55	; 85
    198e:	94 e0       	ldi	r25, 0x04	; 4
    1990:	90 93 c4 07 	sts	0x07C4, r25
    1994:	80 93 c3 07 	sts	0x07C3, r24
    1998:	90 93 c6 07 	sts	0x07C6, r25
    199c:	80 93 c5 07 	sts	0x07C5, r24
    19a0:	8b e6       	ldi	r24, 0x6B	; 107
    19a2:	94 e0       	ldi	r25, 0x04	; 4
    19a4:	90 93 c8 07 	sts	0x07C8, r25
    19a8:	80 93 c7 07 	sts	0x07C7, r24
    19ac:	90 93 ca 07 	sts	0x07CA, r25
    19b0:	80 93 c9 07 	sts	0x07C9, r24
    19b4:	81 e8       	ldi	r24, 0x81	; 129
    19b6:	94 e0       	ldi	r25, 0x04	; 4
    19b8:	90 93 cc 07 	sts	0x07CC, r25
    19bc:	80 93 cb 07 	sts	0x07CB, r24
    19c0:	90 93 ce 07 	sts	0x07CE, r25
    19c4:	80 93 cd 07 	sts	0x07CD, r24
    19c8:	87 e9       	ldi	r24, 0x97	; 151
    19ca:	94 e0       	ldi	r25, 0x04	; 4
    19cc:	90 93 d0 07 	sts	0x07D0, r25
    19d0:	80 93 cf 07 	sts	0x07CF, r24
    19d4:	90 93 d2 07 	sts	0x07D2, r25
    19d8:	80 93 d1 07 	sts	0x07D1, r24
};

class ServoDriver{
public:
	ServoDriver(SERVO_DRIVER* cstr){
		driver = cstr;
    19dc:	8d ea       	ldi	r24, 0xAD	; 173
    19de:	94 e0       	ldi	r25, 0x04	; 4
    19e0:	90 93 d4 07 	sts	0x07D4, r25
    19e4:	80 93 d3 07 	sts	0x07D3, r24
    19e8:	89 eb       	ldi	r24, 0xB9	; 185
    19ea:	94 e0       	ldi	r25, 0x04	; 4
    19ec:	90 93 d6 07 	sts	0x07D6, r25
    19f0:	80 93 d5 07 	sts	0x07D5, r24
#ifdef __cplusplus
}
class Servo : public Actuator{
public:
	Servo(SERVO* cstr) : Actuator(&cstr->actuator){
		m_cstr = cstr;
    19f4:	90 93 d8 07 	sts	0x07D8, r25
    19f8:	80 93 d7 07 	sts	0x07D7, r24
    19fc:	8f ec       	ldi	r24, 0xCF	; 207
    19fe:	94 e0       	ldi	r25, 0x04	; 4
    1a00:	90 93 da 07 	sts	0x07DA, r25
    1a04:	80 93 d9 07 	sts	0x07D9, r24
    1a08:	90 93 dc 07 	sts	0x07DC, r25
    1a0c:	80 93 db 07 	sts	0x07DB, r24
    1a10:	85 ee       	ldi	r24, 0xE5	; 229
    1a12:	94 e0       	ldi	r25, 0x04	; 4
    1a14:	90 93 de 07 	sts	0x07DE, r25
    1a18:	80 93 dd 07 	sts	0x07DD, r24
    1a1c:	90 93 e0 07 	sts	0x07E0, r25
    1a20:	80 93 df 07 	sts	0x07DF, r24
    1a24:	8b ef       	ldi	r24, 0xFB	; 251
    1a26:	94 e0       	ldi	r25, 0x04	; 4
    1a28:	90 93 e2 07 	sts	0x07E2, r25
    1a2c:	80 93 e1 07 	sts	0x07E1, r24
    1a30:	90 93 e4 07 	sts	0x07E4, r25
    1a34:	80 93 e3 07 	sts	0x07E3, r24
    1a38:	81 e1       	ldi	r24, 0x11	; 17
    1a3a:	95 e0       	ldi	r25, 0x05	; 5
    1a3c:	90 93 e6 07 	sts	0x07E6, r25
    1a40:	80 93 e5 07 	sts	0x07E5, r24
    1a44:	90 93 e8 07 	sts	0x07E8, r25
    1a48:	80 93 e7 07 	sts	0x07E7, r24
    1a4c:	87 e2       	ldi	r24, 0x27	; 39
    1a4e:	95 e0       	ldi	r25, 0x05	; 5
    1a50:	90 93 ea 07 	sts	0x07EA, r25
    1a54:	80 93 e9 07 	sts	0x07E9, r24
    1a58:	90 93 ec 07 	sts	0x07EC, r25
    1a5c:	80 93 eb 07 	sts	0x07EB, r24
};

class ServoDriver{
public:
	ServoDriver(SERVO_DRIVER* cstr){
		driver = cstr;
    1a60:	8d e3       	ldi	r24, 0x3D	; 61
    1a62:	95 e0       	ldi	r25, 0x05	; 5
    1a64:	90 93 ee 07 	sts	0x07EE, r25
    1a68:	80 93 ed 07 	sts	0x07ED, r24
    1a6c:	70 93 fa 07 	sts	0x07FA, r23
    1a70:	60 93 f9 07 	sts	0x07F9, r22
    1a74:	50 93 fc 07 	sts	0x07FC, r21
    1a78:	40 93 fb 07 	sts	0x07FB, r20
    1a7c:	a0 93 f4 07 	sts	0x07F4, r26
    1a80:	10 92 fe 07 	sts	0x07FE, r1
    1a84:	10 92 fd 07 	sts	0x07FD, r1
/* ===================== C++ Wrapper Code ===============================================*/
#include "Stream/Stream.h"
class Uart : public Stream {
public:
	Uart(UART * cstr): Stream(){
		m_cstr = cstr;
    1a88:	2d ec       	ldi	r18, 0xCD	; 205
    1a8a:	33 e0       	ldi	r19, 0x03	; 3
    1a8c:	30 93 00 08 	sts	0x0800, r19
    1a90:	20 93 ff 07 	sts	0x07FF, r18
		cstr->cpp = this;
    1a94:	ef ee       	ldi	r30, 0xEF	; 239
    1a96:	f7 e0       	ldi	r31, 0x07	; 7
    1a98:	f0 93 e3 03 	sts	0x03E3, r31
    1a9c:	e0 93 e2 03 	sts	0x03E2, r30
#ifdef __cplusplus
}
/* ===================== C++ Wrapper Code ===============================================*/
class UartHW : public Uart {
public:
	UartHW(HW_UART* uart) : Uart(&uart->_uart_){
    1aa0:	89 e6       	ldi	r24, 0x69	; 105
    1aa2:	95 e0       	ldi	r25, 0x05	; 5
    1aa4:	91 83       	std	Z+1, r25	; 0x01
    1aa6:	80 83       	st	Z, r24
		m_hw = uart;
    1aa8:	30 93 06 08 	sts	0x0806, r19
    1aac:	20 93 05 08 	sts	0x0805, r18
		m_polling = FALSE;
    1ab0:	10 92 07 08 	sts	0x0807, r1
    1ab4:	70 93 13 08 	sts	0x0813, r23
    1ab8:	60 93 12 08 	sts	0x0812, r22
    1abc:	50 93 15 08 	sts	0x0815, r21
    1ac0:	40 93 14 08 	sts	0x0814, r20
    1ac4:	a0 93 0d 08 	sts	0x080D, r26
    1ac8:	10 92 17 08 	sts	0x0817, r1
    1acc:	10 92 16 08 	sts	0x0816, r1
};

// A type of stream that just throws away output and returns EOF for input
class NullStream : public Stream{
public:
	NullStream(void) : Stream(){};
    1ad0:	89 e7       	ldi	r24, 0x79	; 121
    1ad2:	95 e0       	ldi	r25, 0x05	; 5
    1ad4:	90 93 09 08 	sts	0x0809, r25
    1ad8:	80 93 08 08 	sts	0x0808, r24
	while(1);
}
    1adc:	08 95       	ret

00001ade <_ZNK9StatusLed3setEa>:
	}

	virtual void set(boolean value) const{
    1ade:	1f 93       	push	r17
    1ae0:	16 2f       	mov	r17, r22
		LED_off(&statusLED);
	}
}

static __inline__ void statusLED_set(boolean value){
	if(pin_is_output(statusLED.pin)){
    1ae2:	80 91 3a 08 	lds	r24, 0x083A
    1ae6:	90 91 3b 08 	lds	r25, 0x083B
    1aea:	0e 94 8c 11 	call	0x2318	; 0x2318 <pin_is_output>
    1aee:	88 23       	and	r24, r24
    1af0:	29 f0       	breq	.+10     	; 0x1afc <_ZNK9StatusLed3setEa+0x1e>
		LED_set(&statusLED, value);
    1af2:	8a e3       	ldi	r24, 0x3A	; 58
    1af4:	98 e0       	ldi	r25, 0x08	; 8
    1af6:	61 2f       	mov	r22, r17
    1af8:	0e 94 ef 11 	call	0x23de	; 0x23de <LED_set>
	StatusLed(LED * cstr) : Led(cstr){
	}

	virtual void set(boolean value) const{
		statusLED_set(value);
	}
    1afc:	1f 91       	pop	r17
    1afe:	08 95       	ret

00001b00 <_ZNK3Led3setEa>:
	}
	void off(void) const{
		set(FALSE);
	}
	virtual void set(boolean value) const{
		LED_set(m_cstr,value);
    1b00:	fc 01       	movw	r30, r24
    1b02:	82 81       	ldd	r24, Z+2	; 0x02
    1b04:	93 81       	ldd	r25, Z+3	; 0x03
    1b06:	0e 94 ef 11 	call	0x23de	; 0x23de <LED_set>
	}
    1b0a:	08 95       	ret

00001b0c <_ZN7Marquee5writeEh>:

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){return marqueeSendByte(m_cstr,data);}
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	80 89       	ldd	r24, Z+16	; 0x10
    1b10:	91 89       	ldd	r25, Z+17	; 0x11
    1b12:	0e 94 9f 12 	call	0x253e	; 0x253e <marqueeSendByte>
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	08 95       	ret

00001b1a <_ZN6UartHW4readEv>:
	};

	virtual int read(void){
    1b1a:	fc 01       	movw	r30, r24
		int ch;

		if(m_polling){
    1b1c:	80 8d       	ldd	r24, Z+24	; 0x18
    1b1e:	88 23       	and	r24, r24
    1b20:	29 f0       	breq	.+10     	; 0x1b2c <_ZN6UartHW4readEv+0x12>
			ch = uartPollByte(m_hw);
    1b22:	86 89       	ldd	r24, Z+22	; 0x16
    1b24:	97 89       	ldd	r25, Z+23	; 0x17
    1b26:	0e 94 82 17 	call	0x2f04	; 0x2f04 <uartPollByte>
    1b2a:	08 95       	ret
		}else{
			ch = __uartGetByte(m_cstr);
    1b2c:	80 89       	ldd	r24, Z+16	; 0x10
    1b2e:	91 89       	ldd	r25, Z+17	; 0x11
    1b30:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__uartGetByte>
		}

		return ch;
	}
    1b34:	08 95       	ret

00001b36 <_ZN4Uart4readEv>:
	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){
		return _uartSendByte(m_cstr, data);
	}
	virtual int read(void){
		return __uartGetByte(m_cstr);
    1b36:	fc 01       	movw	r30, r24
    1b38:	80 89       	ldd	r24, Z+16	; 0x10
    1b3a:	91 89       	ldd	r25, Z+17	; 0x11
    1b3c:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__uartGetByte>
	}
    1b40:	08 95       	ret

00001b42 <_ZN4Uart5writeEh>:
		return m_cstr;
	}

	/* Implement the raw methods from Stream */
	virtual int write(uint8_t data){
		return _uartSendByte(m_cstr, data);
    1b42:	fc 01       	movw	r30, r24
    1b44:	80 89       	ldd	r24, Z+16	; 0x10
    1b46:	91 89       	ldd	r25, Z+17	; 0x11
    1b48:	0e 94 41 17 	call	0x2e82	; 0x2e82 <_uartSendByte>
	}
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	08 95       	ret

00001b50 <__initTimers>:
// Private methods

//int __timerPrescalerIndex(const Timer* timer, uint16_t prescaler);

static __inline__ TimerData* timerGetData(const Timer* timer){
	return (TimerData*)pgm_read_word(&timer->pgm_data);
    1b50:	2b ef       	ldi	r18, 0xFB	; 251
    1b52:	31 e0       	ldi	r19, 0x01	; 1
    1b54:	f9 01       	movw	r30, r18
    1b56:	a5 91       	lpm	r26, Z+
    1b58:	b4 91       	lpm	r27, Z+
 
// Set Timer0 to the following:-
//		Mode 	 = TIMER_MODE_CTC_OCR
//		Prescale = 1024
	// Save the timer mode
	timerGetData(&pgm_Timers[0])->mode = TIMER_MODE_CTC_OCR;
    1b5a:	84 e0       	ldi	r24, 0x04	; 4
    1b5c:	1a 96       	adiw	r26, 0x0a	; 10
    1b5e:	8c 93       	st	X, r24
    1b60:	1a 97       	sbiw	r26, 0x0a	; 10
		sbi(TCCR0A,WGM00);
	} 
		
			
	if(2 & 2){
		sbi(TCCR0A,WGM01);
    1b62:	84 b5       	in	r24, 0x24	; 36
    1b64:	82 60       	ori	r24, 0x02	; 2
    1b66:	84 bd       	out	0x24, r24	; 36
	if(2 & 4){
		sbi(TCCR0B,WGM02);
	} 
		
	// Top is stored in Compare A OCR
				OCR0A = 250;			
    1b68:	8a ef       	ldi	r24, 0xFA	; 250
    1b6a:	87 bd       	out	0x27, r24	; 39
				
	// Turn on the timer by setting prescaler
	timerGetData(&pgm_Timers[0])->prescale_value = 1024;
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	94 e0       	ldi	r25, 0x04	; 4
    1b70:	8d 93       	st	X+, r24
    1b72:	9c 93       	st	X, r25
	TCCR0B |= 5;
    1b74:	85 b5       	in	r24, 0x25	; 37
    1b76:	85 60       	ori	r24, 0x05	; 5
    1b78:	85 bd       	out	0x25, r24	; 37
    1b7a:	21 5d       	subi	r18, 0xD1	; 209
    1b7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7e:	f9 01       	movw	r30, r18
    1b80:	a5 91       	lpm	r26, Z+
    1b82:	b4 91       	lpm	r27, Z+
	 
// Set Timer1 to the following:-
//		Mode 	 = TIMER_MODE_PWM_FAST_ICR
//		Prescale = 8
	// Save the timer mode
	timerGetData(&pgm_Timers[1])->mode = TIMER_MODE_PWM_FAST_ICR;
    1b84:	9e e0       	ldi	r25, 0x0E	; 14
    1b86:	1a 96       	adiw	r26, 0x0a	; 10
    1b88:	9c 93       	st	X, r25
    1b8a:	1a 97       	sbiw	r26, 0x0a	; 10
		sbi(TCCR1A,WGM10);
	} 
		
			
	if(14 & 2){
		sbi(TCCR1A,WGM11);
    1b8c:	e0 e8       	ldi	r30, 0x80	; 128
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	82 60       	ori	r24, 0x02	; 2
    1b94:	80 83       	st	Z, r24
	} 
		
			
	if(14 & 4){
		sbi(TCCR1B,WGM12);
    1b96:	e1 e8       	ldi	r30, 0x81	; 129
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	88 60       	ori	r24, 0x08	; 8
    1b9e:	80 83       	st	Z, r24
	} 
		
			
	if(14 & 8){
		sbi(TCCR1B,WGM13);
    1ba0:	80 81       	ld	r24, Z
    1ba2:	80 61       	ori	r24, 0x10	; 16
    1ba4:	80 83       	st	Z, r24
	} 
		
	// Top is stored in ICR register
	ICR1 = 40000;			
    1ba6:	40 e4       	ldi	r20, 0x40	; 64
    1ba8:	5c e9       	ldi	r21, 0x9C	; 156
    1baa:	50 93 87 00 	sts	0x0087, r21
    1bae:	40 93 86 00 	sts	0x0086, r20
			
	// Turn on the timer by setting prescaler
	timerGetData(&pgm_Timers[1])->prescale_value = 8;
    1bb2:	28 e0       	ldi	r18, 0x08	; 8
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	2d 93       	st	X+, r18
    1bb8:	3c 93       	st	X, r19
	TCCR1B |= 2;
    1bba:	80 81       	ld	r24, Z
    1bbc:	82 60       	ori	r24, 0x02	; 2
    1bbe:	80 83       	st	Z, r24
    1bc0:	e8 e8       	ldi	r30, 0x88	; 136
    1bc2:	f2 e0       	ldi	r31, 0x02	; 2
    1bc4:	a5 91       	lpm	r26, Z+
    1bc6:	b4 91       	lpm	r27, Z+
	 
// Set Timer3 to the following:-
//		Mode 	 = TIMER_MODE_PWM_FAST_ICR
//		Prescale = 8
	// Save the timer mode
	timerGetData(&pgm_Timers[3])->mode = TIMER_MODE_PWM_FAST_ICR;
    1bc8:	1a 96       	adiw	r26, 0x0a	; 10
    1bca:	9c 93       	st	X, r25
    1bcc:	1a 97       	sbiw	r26, 0x0a	; 10
		sbi(TCCR3A,WGM30);
	} 
		
			
	if(14 & 2){
		sbi(TCCR3A,WGM31);
    1bce:	e0 e9       	ldi	r30, 0x90	; 144
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	82 60       	ori	r24, 0x02	; 2
    1bd6:	80 83       	st	Z, r24
	} 
		
			
	if(14 & 4){
		sbi(TCCR3B,WGM32);
    1bd8:	e1 e9       	ldi	r30, 0x91	; 145
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	88 60       	ori	r24, 0x08	; 8
    1be0:	80 83       	st	Z, r24
	} 
		
			
	if(14 & 8){
		sbi(TCCR3B,WGM33);
    1be2:	80 81       	ld	r24, Z
    1be4:	80 61       	ori	r24, 0x10	; 16
    1be6:	80 83       	st	Z, r24
	} 
		
	// Top is stored in ICR register
	ICR3 = 40000;			
    1be8:	50 93 97 00 	sts	0x0097, r21
    1bec:	40 93 96 00 	sts	0x0096, r20
			
	// Turn on the timer by setting prescaler
	timerGetData(&pgm_Timers[3])->prescale_value = 8;
    1bf0:	2d 93       	st	X+, r18
    1bf2:	3c 93       	st	X, r19
	TCCR3B |= 2;
    1bf4:	80 81       	ld	r24, Z
    1bf6:	82 60       	ori	r24, 0x02	; 2
    1bf8:	80 83       	st	Z, r24
    1bfa:	e7 eb       	ldi	r30, 0xB7	; 183
    1bfc:	f2 e0       	ldi	r31, 0x02	; 2
    1bfe:	a5 91       	lpm	r26, Z+
    1c00:	b4 91       	lpm	r27, Z+
	 
// Set Timer4 to the following:-
//		Mode 	 = TIMER_MODE_PWM_FAST_ICR
//		Prescale = 8
	// Save the timer mode
	timerGetData(&pgm_Timers[4])->mode = TIMER_MODE_PWM_FAST_ICR;
    1c02:	1a 96       	adiw	r26, 0x0a	; 10
    1c04:	9c 93       	st	X, r25
    1c06:	1a 97       	sbiw	r26, 0x0a	; 10
		sbi(TCCR4A,WGM40);
	} 
		
			
	if(14 & 2){
		sbi(TCCR4A,WGM41);
    1c08:	e0 ea       	ldi	r30, 0xA0	; 160
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	82 60       	ori	r24, 0x02	; 2
    1c10:	80 83       	st	Z, r24
	} 
		
			
	if(14 & 4){
		sbi(TCCR4B,WGM42);
    1c12:	e1 ea       	ldi	r30, 0xA1	; 161
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	88 60       	ori	r24, 0x08	; 8
    1c1a:	80 83       	st	Z, r24
	} 
		
			
	if(14 & 8){
		sbi(TCCR4B,WGM43);
    1c1c:	80 81       	ld	r24, Z
    1c1e:	80 61       	ori	r24, 0x10	; 16
    1c20:	80 83       	st	Z, r24
	} 
		
	// Top is stored in ICR register
	ICR4 = 40000;			
    1c22:	50 93 a7 00 	sts	0x00A7, r21
    1c26:	40 93 a6 00 	sts	0x00A6, r20
			
	// Turn on the timer by setting prescaler
	timerGetData(&pgm_Timers[4])->prescale_value = 8;
    1c2a:	2d 93       	st	X+, r18
    1c2c:	3c 93       	st	X, r19
	TCCR4B |= 2;
    1c2e:	80 81       	ld	r24, Z
    1c30:	82 60       	ori	r24, 0x02	; 2
    1c32:	80 83       	st	Z, r24
    1c34:	e6 ee       	ldi	r30, 0xE6	; 230
    1c36:	f2 e0       	ldi	r31, 0x02	; 2
    1c38:	a5 91       	lpm	r26, Z+
    1c3a:	b4 91       	lpm	r27, Z+
	 
// Set Timer5 to the following:-
//		Mode 	 = TIMER_MODE_PWM_FAST_ICR
//		Prescale = 8
	// Save the timer mode
	timerGetData(&pgm_Timers[5])->mode = TIMER_MODE_PWM_FAST_ICR;
    1c3c:	1a 96       	adiw	r26, 0x0a	; 10
    1c3e:	9c 93       	st	X, r25
    1c40:	1a 97       	sbiw	r26, 0x0a	; 10
		sbi(TCCR5A,WGM50);
	} 
		
			
	if(14 & 2){
		sbi(TCCR5A,WGM51);
    1c42:	e0 e2       	ldi	r30, 0x20	; 32
    1c44:	f1 e0       	ldi	r31, 0x01	; 1
    1c46:	80 81       	ld	r24, Z
    1c48:	82 60       	ori	r24, 0x02	; 2
    1c4a:	80 83       	st	Z, r24
	} 
		
			
	if(14 & 4){
		sbi(TCCR5B,WGM52);
    1c4c:	e1 e2       	ldi	r30, 0x21	; 33
    1c4e:	f1 e0       	ldi	r31, 0x01	; 1
    1c50:	80 81       	ld	r24, Z
    1c52:	88 60       	ori	r24, 0x08	; 8
    1c54:	80 83       	st	Z, r24
	} 
		
			
	if(14 & 8){
		sbi(TCCR5B,WGM53);
    1c56:	80 81       	ld	r24, Z
    1c58:	80 61       	ori	r24, 0x10	; 16
    1c5a:	80 83       	st	Z, r24
	} 
		
	// Top is stored in ICR register
	ICR5 = 40000;			
    1c5c:	50 93 27 01 	sts	0x0127, r21
    1c60:	40 93 26 01 	sts	0x0126, r20
			
	// Turn on the timer by setting prescaler
	timerGetData(&pgm_Timers[5])->prescale_value = 8;
    1c64:	2d 93       	st	X+, r18
    1c66:	3c 93       	st	X, r19
	TCCR5B |= 2;
    1c68:	80 81       	ld	r24, Z
    1c6a:	82 60       	ori	r24, 0x02	; 2
    1c6c:	80 83       	st	Z, r24
	}
    1c6e:	08 95       	ret

00001c70 <servoPWMInit>:
    1c70:	8f 92       	push	r8
    1c72:	9f 92       	push	r9
    1c74:	af 92       	push	r10
    1c76:	bf 92       	push	r11
    1c78:	cf 92       	push	r12
    1c7a:	df 92       	push	r13
    1c7c:	ef 92       	push	r14
    1c7e:	ff 92       	push	r15
    1c80:	0f 93       	push	r16
    1c82:	1f 93       	push	r17
    1c84:	cf 93       	push	r28
    1c86:	df 93       	push	r29
    1c88:	6c 01       	movw	r12, r24
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	12 96       	adiw	r26, 0x02	; 2
    1c8e:	8c 91       	ld	r24, X
    1c90:	c8 2f       	mov	r28, r24
    1c92:	d0 e0       	ldi	r29, 0x00	; 0
    1c94:	21 97       	sbiw	r28, 0x01	; 1
    1c96:	7e 01       	movw	r14, r28
    1c98:	ee 0c       	add	r14, r14
    1c9a:	ff 1c       	adc	r15, r15
    1c9c:	92 ef       	ldi	r25, 0xF2	; 242
    1c9e:	89 2e       	mov	r8, r25
    1ca0:	93 e0       	ldi	r25, 0x03	; 3
    1ca2:	99 2e       	mov	r9, r25
    1ca4:	8f e2       	ldi	r24, 0x2F	; 47
    1ca6:	a8 2e       	mov	r10, r24
    1ca8:	47 c0       	rjmp	.+142    	; 0x1d38 <servoPWMInit+0xc8>
    1caa:	d6 01       	movw	r26, r12
    1cac:	ed 91       	ld	r30, X+
    1cae:	fc 91       	ld	r31, X
    1cb0:	ee 0d       	add	r30, r14
    1cb2:	ff 1d       	adc	r31, r15
    1cb4:	05 91       	lpm	r16, Z+
    1cb6:	14 91       	lpm	r17, Z+
    1cb8:	f8 01       	movw	r30, r16
    1cba:	d5 82       	std	Z+5, r13	; 0x05
    1cbc:	c4 82       	std	Z+4, r12	; 0x04
    1cbe:	86 81       	ldd	r24, Z+6	; 0x06
    1cc0:	97 81       	ldd	r25, Z+7	; 0x07
    1cc2:	0e 94 bd 14 	call	0x297a	; 0x297a <compareFromIOPin>
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	d8 01       	movw	r26, r16
    1cca:	55 96       	adiw	r26, 0x15	; 21
    1ccc:	9c 93       	st	X, r25
    1cce:	8e 93       	st	-X, r24
    1cd0:	54 97       	sbiw	r26, 0x14	; 20
    1cd2:	32 96       	adiw	r30, 0x02	; 2
    1cd4:	b4 90       	lpm	r11, Z+
    1cd6:	11 96       	adiw	r26, 0x01	; 1
    1cd8:	9c 92       	st	X, r9
    1cda:	8e 92       	st	-X, r8
    1cdc:	16 96       	adiw	r26, 0x06	; 6
    1cde:	8d 91       	ld	r24, X+
    1ce0:	9c 91       	ld	r25, X
    1ce2:	17 97       	sbiw	r26, 0x07	; 7
    1ce4:	60 e0       	ldi	r22, 0x00	; 0
    1ce6:	0e 94 c8 11 	call	0x2390	; 0x2390 <pin_make_output>
    1cea:	ba 9c       	mul	r11, r10
    1cec:	c0 01       	movw	r24, r0
    1cee:	11 24       	eor	r1, r1
    1cf0:	85 5e       	subi	r24, 0xE5	; 229
    1cf2:	9d 4f       	sbci	r25, 0xFD	; 253
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	a5 91       	lpm	r26, Z+
    1cf8:	b4 91       	lpm	r27, Z+
    1cfa:	8d 91       	ld	r24, X+
    1cfc:	9c 91       	ld	r25, X
    1cfe:	d8 01       	movw	r26, r16
    1d00:	53 96       	adiw	r26, 0x13	; 19
    1d02:	9c 93       	st	X, r25
    1d04:	8e 93       	st	-X, r24
    1d06:	52 97       	sbiw	r26, 0x12	; 18
    1d08:	18 96       	adiw	r26, 0x08	; 8
    1d0a:	6d 91       	ld	r22, X+
    1d0c:	7c 91       	ld	r23, X
    1d0e:	19 97       	sbiw	r26, 0x09	; 9
    1d10:	1a 96       	adiw	r26, 0x0a	; 10
    1d12:	4d 91       	ld	r20, X+
    1d14:	5c 91       	ld	r21, X
    1d16:	1b 97       	sbiw	r26, 0x0b	; 11
    1d18:	c8 01       	movw	r24, r16
    1d1a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <servoSetConfig>
    1d1e:	c8 01       	movw	r24, r16
    1d20:	60 e0       	ldi	r22, 0x00	; 0
    1d22:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__act_setSpeed>
    1d26:	c8 01       	movw	r24, r16
    1d28:	6f ef       	ldi	r22, 0xFF	; 255
    1d2a:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__act_setConnected>
    1d2e:	21 97       	sbiw	r28, 0x01	; 1
    1d30:	ee ef       	ldi	r30, 0xFE	; 254
    1d32:	ff ef       	ldi	r31, 0xFF	; 255
    1d34:	ee 0e       	add	r14, r30
    1d36:	ff 1e       	adc	r15, r31
    1d38:	ff ef       	ldi	r31, 0xFF	; 255
    1d3a:	cf 3f       	cpi	r28, 0xFF	; 255
    1d3c:	df 07       	cpc	r29, r31
    1d3e:	09 f0       	breq	.+2      	; 0x1d42 <servoPWMInit+0xd2>
    1d40:	b4 cf       	rjmp	.-152    	; 0x1caa <servoPWMInit+0x3a>
    1d42:	df 91       	pop	r29
    1d44:	cf 91       	pop	r28
    1d46:	1f 91       	pop	r17
    1d48:	0f 91       	pop	r16
    1d4a:	ff 90       	pop	r15
    1d4c:	ef 90       	pop	r14
    1d4e:	df 90       	pop	r13
    1d50:	cf 90       	pop	r12
    1d52:	bf 90       	pop	r11
    1d54:	af 90       	pop	r10
    1d56:	9f 90       	pop	r9
    1d58:	8f 90       	pop	r8
    1d5a:	08 95       	ret

00001d5c <setConnected>:
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	84 89       	ldd	r24, Z+20	; 0x14
    1d60:	95 89       	ldd	r25, Z+21	; 0x15
    1d62:	61 11       	cpse	r22, r1
    1d64:	62 e0       	ldi	r22, 0x02	; 2
    1d66:	0e 94 09 15 	call	0x2a12	; 0x2a12 <compareSetOutputMode>
    1d6a:	08 95       	ret

00001d6c <setSpeed>:
    1d6c:	ef 92       	push	r14
    1d6e:	ff 92       	push	r15
    1d70:	0f 93       	push	r16
    1d72:	1f 93       	push	r17
    1d74:	fc 01       	movw	r30, r24
    1d76:	e4 88       	ldd	r14, Z+20	; 0x14
    1d78:	f5 88       	ldd	r15, Z+21	; 0x15
    1d7a:	24 85       	ldd	r18, Z+12	; 0x0c
    1d7c:	35 85       	ldd	r19, Z+13	; 0x0d
    1d7e:	06 85       	ldd	r16, Z+14	; 0x0e
    1d80:	17 85       	ldd	r17, Z+15	; 0x0f
    1d82:	86 2f       	mov	r24, r22
    1d84:	99 27       	eor	r25, r25
    1d86:	87 fd       	sbrc	r24, 7
    1d88:	90 95       	com	r25
    1d8a:	61 e8       	ldi	r22, 0x81	; 129
    1d8c:	7f ef       	ldi	r23, 0xFF	; 255
    1d8e:	4f e7       	ldi	r20, 0x7F	; 127
    1d90:	50 e0       	ldi	r21, 0x00	; 0
    1d92:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <interpolateU>
    1d96:	bc 01       	movw	r22, r24
    1d98:	c7 01       	movw	r24, r14
    1d9a:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <compareSetThreshold>
    1d9e:	1f 91       	pop	r17
    1da0:	0f 91       	pop	r16
    1da2:	ff 90       	pop	r15
    1da4:	ef 90       	pop	r14
    1da6:	08 95       	ret

00001da8 <servoSetConfig>:
    1da8:	9f 92       	push	r9
    1daa:	af 92       	push	r10
    1dac:	bf 92       	push	r11
    1dae:	cf 92       	push	r12
    1db0:	df 92       	push	r13
    1db2:	ef 92       	push	r14
    1db4:	ff 92       	push	r15
    1db6:	0f 93       	push	r16
    1db8:	1f 93       	push	r17
    1dba:	cf 93       	push	r28
    1dbc:	df 93       	push	r29
    1dbe:	ec 01       	movw	r28, r24
    1dc0:	7b 01       	movw	r14, r22
    1dc2:	8a 01       	movw	r16, r20
    1dc4:	79 87       	std	Y+9, r23	; 0x09
    1dc6:	68 87       	std	Y+8, r22	; 0x08
    1dc8:	5b 87       	std	Y+11, r21	; 0x0b
    1dca:	4a 87       	std	Y+10, r20	; 0x0a
    1dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dce:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd0:	89 2b       	or	r24, r25
    1dd2:	09 f4       	brne	.+2      	; 0x1dd6 <servoSetConfig+0x2e>
    1dd4:	5e c0       	rjmp	.+188    	; 0x1e92 <servoSetConfig+0xea>
    1dd6:	9f b6       	in	r9, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	8a 89       	ldd	r24, Y+18	; 0x12
    1ddc:	9b 89       	ldd	r25, Y+19	; 0x13
    1dde:	68 ee       	ldi	r22, 0xE8	; 232
    1de0:	73 e0       	ldi	r23, 0x03	; 3
    1de2:	0e 94 25 21 	call	0x424a	; 0x424a <__udivmodhi4>
    1de6:	5b 01       	movw	r10, r22
    1de8:	cc 24       	eor	r12, r12
    1dea:	dd 24       	eor	r13, r13
    1dec:	b7 01       	movw	r22, r14
    1dee:	60 1b       	sub	r22, r16
    1df0:	71 0b       	sbc	r23, r17
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	a6 01       	movw	r20, r12
    1df8:	95 01       	movw	r18, r10
    1dfa:	0e 94 06 21 	call	0x420c	; 0x420c <__mulsi3>
    1dfe:	24 e1       	ldi	r18, 0x14	; 20
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e0       	ldi	r20, 0x00	; 0
    1e04:	50 e0       	ldi	r21, 0x00	; 0
    1e06:	0e 94 39 21 	call	0x4272	; 0x4272 <__udivmodsi4>
    1e0a:	c9 01       	movw	r24, r18
    1e0c:	da 01       	movw	r26, r20
    1e0e:	9c 01       	movw	r18, r24
    1e10:	ad 01       	movw	r20, r26
    1e12:	da 01       	movw	r26, r20
    1e14:	c9 01       	movw	r24, r18
    1e16:	80 70       	andi	r24, 0x00	; 0
    1e18:	90 70       	andi	r25, 0x00	; 0
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
    1e1c:	a1 05       	cpc	r26, r1
    1e1e:	b1 05       	cpc	r27, r1
    1e20:	39 f0       	breq	.+14     	; 0x1e30 <servoSetConfig+0x88>
    1e22:	86 ee       	ldi	r24, 0xE6	; 230
    1e24:	0e 94 29 11 	call	0x2252	; 0x2252 <setError>
    1e28:	2f ef       	ldi	r18, 0xFF	; 255
    1e2a:	3f ef       	ldi	r19, 0xFF	; 255
    1e2c:	40 e0       	ldi	r20, 0x00	; 0
    1e2e:	50 e0       	ldi	r21, 0x00	; 0
    1e30:	3d 87       	std	Y+13, r19	; 0x0d
    1e32:	2c 87       	std	Y+12, r18	; 0x0c
    1e34:	0e 0d       	add	r16, r14
    1e36:	1f 1d       	adc	r17, r15
    1e38:	b8 01       	movw	r22, r16
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	a6 01       	movw	r20, r12
    1e40:	95 01       	movw	r18, r10
    1e42:	0e 94 06 21 	call	0x420c	; 0x420c <__mulsi3>
    1e46:	24 e1       	ldi	r18, 0x14	; 20
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	40 e0       	ldi	r20, 0x00	; 0
    1e4c:	50 e0       	ldi	r21, 0x00	; 0
    1e4e:	0e 94 39 21 	call	0x4272	; 0x4272 <__udivmodsi4>
    1e52:	c9 01       	movw	r24, r18
    1e54:	da 01       	movw	r26, r20
    1e56:	9c 01       	movw	r18, r24
    1e58:	ad 01       	movw	r20, r26
    1e5a:	da 01       	movw	r26, r20
    1e5c:	c9 01       	movw	r24, r18
    1e5e:	80 70       	andi	r24, 0x00	; 0
    1e60:	90 70       	andi	r25, 0x00	; 0
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	a1 05       	cpc	r26, r1
    1e66:	b1 05       	cpc	r27, r1
    1e68:	39 f0       	breq	.+14     	; 0x1e78 <servoSetConfig+0xd0>
    1e6a:	86 ee       	ldi	r24, 0xE6	; 230
    1e6c:	0e 94 29 11 	call	0x2252	; 0x2252 <setError>
    1e70:	2f ef       	ldi	r18, 0xFF	; 255
    1e72:	3f ef       	ldi	r19, 0xFF	; 255
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	50 e0       	ldi	r21, 0x00	; 0
    1e78:	3f 87       	std	Y+15, r19	; 0x0f
    1e7a:	2e 87       	std	Y+14, r18	; 0x0e
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	80 ff       	sbrs	r24, 0
    1e80:	07 c0       	rjmp	.+14     	; 0x1e90 <servoSetConfig+0xe8>
    1e82:	6a 81       	ldd	r22, Y+2	; 0x02
    1e84:	61 50       	subi	r22, 0x01	; 1
    1e86:	6a 83       	std	Y+2, r22	; 0x02
    1e88:	6f 5f       	subi	r22, 0xFF	; 255
    1e8a:	ce 01       	movw	r24, r28
    1e8c:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__act_setSpeed>
    1e90:	9f be       	out	0x3f, r9	; 63
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	1f 91       	pop	r17
    1e98:	0f 91       	pop	r16
    1e9a:	ff 90       	pop	r15
    1e9c:	ef 90       	pop	r14
    1e9e:	df 90       	pop	r13
    1ea0:	cf 90       	pop	r12
    1ea2:	bf 90       	pop	r11
    1ea4:	af 90       	pop	r10
    1ea6:	9f 90       	pop	r9
    1ea8:	08 95       	ret

00001eaa <_ZN6Stream5printEc>:
    1eaa:	1f 93       	push	r17
    1eac:	cf 93       	push	r28
    1eae:	df 93       	push	r29
    1eb0:	ec 01       	movw	r28, r24
    1eb2:	16 2f       	mov	r17, r22
    1eb4:	6a 30       	cpi	r22, 0x0A	; 10
    1eb6:	39 f4       	brne	.+14     	; 0x1ec6 <_ZN6Stream5printEc+0x1c>
    1eb8:	e8 81       	ld	r30, Y
    1eba:	f9 81       	ldd	r31, Y+1	; 0x01
    1ebc:	01 90       	ld	r0, Z+
    1ebe:	f0 81       	ld	r31, Z
    1ec0:	e0 2d       	mov	r30, r0
    1ec2:	6d e0       	ldi	r22, 0x0D	; 13
    1ec4:	09 95       	icall
    1ec6:	e8 81       	ld	r30, Y
    1ec8:	f9 81       	ldd	r31, Y+1	; 0x01
    1eca:	01 90       	ld	r0, Z+
    1ecc:	f0 81       	ld	r31, Z
    1ece:	e0 2d       	mov	r30, r0
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	61 2f       	mov	r22, r17
    1ed4:	09 95       	icall
    1ed6:	ce 01       	movw	r24, r28
    1ed8:	df 91       	pop	r29
    1eda:	cf 91       	pop	r28
    1edc:	1f 91       	pop	r17
    1ede:	08 95       	ret

00001ee0 <_ZN6Stream5printEdh>:
    1ee0:	ef 92       	push	r14
    1ee2:	ff 92       	push	r15
    1ee4:	0f 93       	push	r16
    1ee6:	1f 93       	push	r17
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    1ef0:	a0 97       	sbiw	r28, 0x20	; 32
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	de bf       	out	0x3e, r29	; 62
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	cd bf       	out	0x3d, r28	; 61
    1efc:	f8 2e       	mov	r15, r24
    1efe:	e9 2e       	mov	r14, r25
    1f00:	cb 01       	movw	r24, r22
    1f02:	ba 01       	movw	r22, r20
    1f04:	4f ef       	ldi	r20, 0xFF	; 255
    1f06:	8e 01       	movw	r16, r28
    1f08:	0f 5f       	subi	r16, 0xFF	; 255
    1f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f0c:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <dtostrf>
    1f10:	bc 01       	movw	r22, r24
    1f12:	8f 2d       	mov	r24, r15
    1f14:	9e 2d       	mov	r25, r14
    1f16:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <_ZN6Stream5printEPKc>
    1f1a:	8f 2d       	mov	r24, r15
    1f1c:	9e 2d       	mov	r25, r14
    1f1e:	a0 96       	adiw	r28, 0x20	; 32
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	f8 94       	cli
    1f24:	de bf       	out	0x3e, r29	; 62
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	cd bf       	out	0x3d, r28	; 61
    1f2a:	cf 91       	pop	r28
    1f2c:	df 91       	pop	r29
    1f2e:	1f 91       	pop	r17
    1f30:	0f 91       	pop	r16
    1f32:	ff 90       	pop	r15
    1f34:	ef 90       	pop	r14
    1f36:	08 95       	ret

00001f38 <_ZN6Stream5printElh>:
    1f38:	0f 93       	push	r16
    1f3a:	1f 93       	push	r17
    1f3c:	df 93       	push	r29
    1f3e:	cf 93       	push	r28
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	a1 97       	sbiw	r28, 0x21	; 33
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	de bf       	out	0x3e, r29	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	cd bf       	out	0x3d, r28	; 61
    1f50:	8c 01       	movw	r16, r24
    1f52:	22 30       	cpi	r18, 0x02	; 2
    1f54:	08 f4       	brcc	.+2      	; 0x1f58 <_ZN6Stream5printElh+0x20>
    1f56:	22 e0       	ldi	r18, 0x02	; 2
    1f58:	cb 01       	movw	r24, r22
    1f5a:	ba 01       	movw	r22, r20
    1f5c:	ae 01       	movw	r20, r28
    1f5e:	4f 5f       	subi	r20, 0xFF	; 255
    1f60:	5f 4f       	sbci	r21, 0xFF	; 255
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <ltoa>
    1f68:	bc 01       	movw	r22, r24
    1f6a:	c8 01       	movw	r24, r16
    1f6c:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <_ZN6Stream5printEPKc>
    1f70:	a1 96       	adiw	r28, 0x21	; 33
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	f8 94       	cli
    1f76:	de bf       	out	0x3e, r29	; 62
    1f78:	0f be       	out	0x3f, r0	; 63
    1f7a:	cd bf       	out	0x3d, r28	; 61
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	1f 91       	pop	r17
    1f82:	0f 91       	pop	r16
    1f84:	08 95       	ret

00001f86 <_ZN6Stream5printEl>:
    1f86:	2a e0       	ldi	r18, 0x0A	; 10
    1f88:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <_ZN6Stream5printElh>
    1f8c:	08 95       	ret

00001f8e <_ZN6Stream5printEih>:
    1f8e:	ab 01       	movw	r20, r22
    1f90:	66 27       	eor	r22, r22
    1f92:	57 fd       	sbrc	r21, 7
    1f94:	60 95       	com	r22
    1f96:	76 2f       	mov	r23, r22
    1f98:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <_ZN6Stream5printEl>
    1f9c:	08 95       	ret

00001f9e <_ZN6Stream5printEi>:
    1f9e:	ab 01       	movw	r20, r22
    1fa0:	66 27       	eor	r22, r22
    1fa2:	57 fd       	sbrc	r21, 7
    1fa4:	60 95       	com	r22
    1fa6:	76 2f       	mov	r23, r22
    1fa8:	2a e0       	ldi	r18, 0x0A	; 10
    1faa:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <_ZN6Stream5printElh>
    1fae:	08 95       	ret

00001fb0 <_ZN6Stream5printEa>:
    1fb0:	46 2f       	mov	r20, r22
    1fb2:	55 27       	eor	r21, r21
    1fb4:	47 fd       	sbrc	r20, 7
    1fb6:	50 95       	com	r21
    1fb8:	65 2f       	mov	r22, r21
    1fba:	75 2f       	mov	r23, r21
    1fbc:	2a e0       	ldi	r18, 0x0A	; 10
    1fbe:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <_ZN6Stream5printElh>
    1fc2:	08 95       	ret

00001fc4 <_ZN6Stream5printEah>:
    1fc4:	ef 92       	push	r14
    1fc6:	ff 92       	push	r15
    1fc8:	0f 93       	push	r16
    1fca:	1f 93       	push	r17
    1fcc:	e6 2e       	mov	r14, r22
    1fce:	24 2f       	mov	r18, r20
    1fd0:	ff 24       	eor	r15, r15
    1fd2:	e7 fc       	sbrc	r14, 7
    1fd4:	f0 94       	com	r15
    1fd6:	0f 2d       	mov	r16, r15
    1fd8:	1f 2d       	mov	r17, r15
    1fda:	b8 01       	movw	r22, r16
    1fdc:	a7 01       	movw	r20, r14
    1fde:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <_ZN6Stream5printElh>
    1fe2:	1f 91       	pop	r17
    1fe4:	0f 91       	pop	r16
    1fe6:	ff 90       	pop	r15
    1fe8:	ef 90       	pop	r14
    1fea:	08 95       	ret

00001fec <_ZN6Stream5printEPKc>:
    1fec:	0f 93       	push	r16
    1fee:	1f 93       	push	r17
    1ff0:	cf 93       	push	r28
    1ff2:	df 93       	push	r29
    1ff4:	18 2f       	mov	r17, r24
    1ff6:	09 2f       	mov	r16, r25
    1ff8:	eb 01       	movw	r28, r22
    1ffa:	04 c0       	rjmp	.+8      	; 0x2004 <_ZN6Stream5printEPKc+0x18>
    1ffc:	81 2f       	mov	r24, r17
    1ffe:	90 2f       	mov	r25, r16
    2000:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <_ZN6Stream5printEc>
    2004:	69 91       	ld	r22, Y+
    2006:	66 23       	and	r22, r22
    2008:	c9 f7       	brne	.-14     	; 0x1ffc <_ZN6Stream5printEPKc+0x10>
    200a:	81 2f       	mov	r24, r17
    200c:	90 2f       	mov	r25, r16
    200e:	df 91       	pop	r29
    2010:	cf 91       	pop	r28
    2012:	1f 91       	pop	r17
    2014:	0f 91       	pop	r16
    2016:	08 95       	ret

00002018 <_ZN6Stream5printEmh>:
    2018:	0f 93       	push	r16
    201a:	1f 93       	push	r17
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	a1 97       	sbiw	r28, 0x21	; 33
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	f8 94       	cli
    202a:	de bf       	out	0x3e, r29	; 62
    202c:	0f be       	out	0x3f, r0	; 63
    202e:	cd bf       	out	0x3d, r28	; 61
    2030:	8c 01       	movw	r16, r24
    2032:	22 30       	cpi	r18, 0x02	; 2
    2034:	08 f4       	brcc	.+2      	; 0x2038 <_ZN6Stream5printEmh+0x20>
    2036:	22 e0       	ldi	r18, 0x02	; 2
    2038:	cb 01       	movw	r24, r22
    203a:	ba 01       	movw	r22, r20
    203c:	ae 01       	movw	r20, r28
    203e:	4f 5f       	subi	r20, 0xFF	; 255
    2040:	5f 4f       	sbci	r21, 0xFF	; 255
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <ultoa>
    2048:	bc 01       	movw	r22, r24
    204a:	c8 01       	movw	r24, r16
    204c:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <_ZN6Stream5printEPKc>
    2050:	a1 96       	adiw	r28, 0x21	; 33
    2052:	0f b6       	in	r0, 0x3f	; 63
    2054:	f8 94       	cli
    2056:	de bf       	out	0x3e, r29	; 62
    2058:	0f be       	out	0x3f, r0	; 63
    205a:	cd bf       	out	0x3d, r28	; 61
    205c:	cf 91       	pop	r28
    205e:	df 91       	pop	r29
    2060:	1f 91       	pop	r17
    2062:	0f 91       	pop	r16
    2064:	08 95       	ret

00002066 <_ZN6Stream5printEm>:
    2066:	2a e0       	ldi	r18, 0x0A	; 10
    2068:	0e 94 0c 10 	call	0x2018	; 0x2018 <_ZN6Stream5printEmh>
    206c:	08 95       	ret

0000206e <_ZN6Stream5printEjh>:
    206e:	ab 01       	movw	r20, r22
    2070:	60 e0       	ldi	r22, 0x00	; 0
    2072:	70 e0       	ldi	r23, 0x00	; 0
    2074:	0e 94 33 10 	call	0x2066	; 0x2066 <_ZN6Stream5printEm>
    2078:	08 95       	ret

0000207a <_ZN6Stream5printEj>:
    207a:	ab 01       	movw	r20, r22
    207c:	60 e0       	ldi	r22, 0x00	; 0
    207e:	70 e0       	ldi	r23, 0x00	; 0
    2080:	2a e0       	ldi	r18, 0x0A	; 10
    2082:	0e 94 0c 10 	call	0x2018	; 0x2018 <_ZN6Stream5printEmh>
    2086:	08 95       	ret

00002088 <_ZN6Stream5printEh>:
    2088:	46 2f       	mov	r20, r22
    208a:	50 e0       	ldi	r21, 0x00	; 0
    208c:	60 e0       	ldi	r22, 0x00	; 0
    208e:	70 e0       	ldi	r23, 0x00	; 0
    2090:	2a e0       	ldi	r18, 0x0A	; 10
    2092:	0e 94 0c 10 	call	0x2018	; 0x2018 <_ZN6Stream5printEmh>
    2096:	08 95       	ret

00002098 <_ZN6Stream5printEhh>:
    2098:	ef 92       	push	r14
    209a:	ff 92       	push	r15
    209c:	0f 93       	push	r16
    209e:	1f 93       	push	r17
    20a0:	24 2f       	mov	r18, r20
    20a2:	e6 2e       	mov	r14, r22
    20a4:	ff 24       	eor	r15, r15
    20a6:	00 e0       	ldi	r16, 0x00	; 0
    20a8:	10 e0       	ldi	r17, 0x00	; 0
    20aa:	b8 01       	movw	r22, r16
    20ac:	a7 01       	movw	r20, r14
    20ae:	0e 94 0c 10 	call	0x2018	; 0x2018 <_ZN6Stream5printEmh>
    20b2:	1f 91       	pop	r17
    20b4:	0f 91       	pop	r16
    20b6:	ff 90       	pop	r15
    20b8:	ef 90       	pop	r14
    20ba:	08 95       	ret

000020bc <__act_setSpeed>:
    20bc:	1f 93       	push	r17
    20be:	cf 93       	push	r28
    20c0:	df 93       	push	r29
    20c2:	ec 01       	movw	r28, r24
    20c4:	16 2f       	mov	r17, r22
    20c6:	61 38       	cpi	r22, 0x81	; 129
    20c8:	0c f4       	brge	.+2      	; 0x20cc <__act_setSpeed+0x10>
    20ca:	11 e8       	ldi	r17, 0x81	; 129
    20cc:	e8 81       	ld	r30, Y
    20ce:	f9 81       	ldd	r31, Y+1	; 0x01
    20d0:	30 97       	sbiw	r30, 0x00	; 0
    20d2:	79 f0       	breq	.+30     	; 0x20f2 <__act_setSpeed+0x36>
    20d4:	25 91       	lpm	r18, Z+
    20d6:	34 91       	lpm	r19, Z+
    20d8:	21 15       	cp	r18, r1
    20da:	31 05       	cpc	r19, r1
    20dc:	51 f0       	breq	.+20     	; 0x20f2 <__act_setSpeed+0x36>
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	81 fd       	sbrc	r24, 1
    20e2:	02 c0       	rjmp	.+4      	; 0x20e8 <__act_setSpeed+0x2c>
    20e4:	61 2f       	mov	r22, r17
    20e6:	02 c0       	rjmp	.+4      	; 0x20ec <__act_setSpeed+0x30>
    20e8:	61 2f       	mov	r22, r17
    20ea:	61 95       	neg	r22
    20ec:	ce 01       	movw	r24, r28
    20ee:	f9 01       	movw	r30, r18
    20f0:	09 95       	icall
    20f2:	1a 83       	std	Y+2, r17	; 0x02
    20f4:	df 91       	pop	r29
    20f6:	cf 91       	pop	r28
    20f8:	1f 91       	pop	r17
    20fa:	08 95       	ret

000020fc <__act_setConnected>:
    20fc:	dc 01       	movw	r26, r24
    20fe:	96 2f       	mov	r25, r22
    2100:	91 70       	andi	r25, 0x01	; 1
    2102:	13 96       	adiw	r26, 0x03	; 3
    2104:	8c 91       	ld	r24, X
    2106:	13 97       	sbiw	r26, 0x03	; 3
    2108:	8e 7f       	andi	r24, 0xFE	; 254
    210a:	89 2b       	or	r24, r25
    210c:	13 96       	adiw	r26, 0x03	; 3
    210e:	8c 93       	st	X, r24
    2110:	13 97       	sbiw	r26, 0x03	; 3
    2112:	8d 91       	ld	r24, X+
    2114:	9c 91       	ld	r25, X
    2116:	11 97       	sbiw	r26, 0x01	; 1
    2118:	00 97       	sbiw	r24, 0x00	; 0
    211a:	51 f0       	breq	.+20     	; 0x2130 <__act_setConnected+0x34>
    211c:	fc 01       	movw	r30, r24
    211e:	32 96       	adiw	r30, 0x02	; 2
    2120:	25 91       	lpm	r18, Z+
    2122:	34 91       	lpm	r19, Z+
    2124:	21 15       	cp	r18, r1
    2126:	31 05       	cpc	r19, r1
    2128:	19 f0       	breq	.+6      	; 0x2130 <__act_setConnected+0x34>
    212a:	cd 01       	movw	r24, r26
    212c:	f9 01       	movw	r30, r18
    212e:	09 95       	icall
    2130:	08 95       	ret

00002132 <interpolate>:
    2132:	4f 92       	push	r4
    2134:	5f 92       	push	r5
    2136:	6f 92       	push	r6
    2138:	7f 92       	push	r7
    213a:	8f 92       	push	r8
    213c:	9f 92       	push	r9
    213e:	af 92       	push	r10
    2140:	bf 92       	push	r11
    2142:	cf 92       	push	r12
    2144:	df 92       	push	r13
    2146:	ef 92       	push	r14
    2148:	ff 92       	push	r15
    214a:	0f 93       	push	r16
    214c:	1f 93       	push	r17
    214e:	2b 01       	movw	r4, r22
    2150:	3a 01       	movw	r6, r20
    2152:	59 01       	movw	r10, r18
    2154:	78 01       	movw	r14, r16
    2156:	e2 1a       	sub	r14, r18
    2158:	f3 0a       	sbc	r15, r19
    215a:	00 27       	eor	r16, r16
    215c:	f7 fc       	sbrc	r15, 7
    215e:	00 95       	com	r16
    2160:	10 2f       	mov	r17, r16
    2162:	9c 01       	movw	r18, r24
    2164:	26 1b       	sub	r18, r22
    2166:	37 0b       	sbc	r19, r23
    2168:	44 27       	eor	r20, r20
    216a:	37 fd       	sbrc	r19, 7
    216c:	40 95       	com	r20
    216e:	54 2f       	mov	r21, r20
    2170:	c8 01       	movw	r24, r16
    2172:	b7 01       	movw	r22, r14
    2174:	0e 94 06 21 	call	0x420c	; 0x420c <__mulsi3>
    2178:	64 18       	sub	r6, r4
    217a:	75 08       	sbc	r7, r5
    217c:	88 24       	eor	r8, r8
    217e:	77 fc       	sbrc	r7, 7
    2180:	80 94       	com	r8
    2182:	98 2c       	mov	r9, r8
    2184:	a4 01       	movw	r20, r8
    2186:	93 01       	movw	r18, r6
    2188:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__divmodsi4>
    218c:	c9 01       	movw	r24, r18
    218e:	da 01       	movw	r26, r20
    2190:	cc 24       	eor	r12, r12
    2192:	b7 fc       	sbrc	r11, 7
    2194:	c0 94       	com	r12
    2196:	dc 2c       	mov	r13, r12
    2198:	a8 0e       	add	r10, r24
    219a:	b9 1e       	adc	r11, r25
    219c:	ca 1e       	adc	r12, r26
    219e:	db 1e       	adc	r13, r27
    21a0:	c5 01       	movw	r24, r10
    21a2:	1f 91       	pop	r17
    21a4:	0f 91       	pop	r16
    21a6:	ff 90       	pop	r15
    21a8:	ef 90       	pop	r14
    21aa:	df 90       	pop	r13
    21ac:	cf 90       	pop	r12
    21ae:	bf 90       	pop	r11
    21b0:	af 90       	pop	r10
    21b2:	9f 90       	pop	r9
    21b4:	8f 90       	pop	r8
    21b6:	7f 90       	pop	r7
    21b8:	6f 90       	pop	r6
    21ba:	5f 90       	pop	r5
    21bc:	4f 90       	pop	r4
    21be:	08 95       	ret

000021c0 <interpolateU>:
    21c0:	4f 92       	push	r4
    21c2:	5f 92       	push	r5
    21c4:	6f 92       	push	r6
    21c6:	7f 92       	push	r7
    21c8:	8f 92       	push	r8
    21ca:	9f 92       	push	r9
    21cc:	af 92       	push	r10
    21ce:	bf 92       	push	r11
    21d0:	cf 92       	push	r12
    21d2:	df 92       	push	r13
    21d4:	ef 92       	push	r14
    21d6:	ff 92       	push	r15
    21d8:	0f 93       	push	r16
    21da:	1f 93       	push	r17
    21dc:	2b 01       	movw	r4, r22
    21de:	5a 01       	movw	r10, r20
    21e0:	39 01       	movw	r6, r18
    21e2:	78 01       	movw	r14, r16
    21e4:	e2 1a       	sub	r14, r18
    21e6:	f3 0a       	sbc	r15, r19
    21e8:	00 e0       	ldi	r16, 0x00	; 0
    21ea:	10 e0       	ldi	r17, 0x00	; 0
    21ec:	9c 01       	movw	r18, r24
    21ee:	26 1b       	sub	r18, r22
    21f0:	37 0b       	sbc	r19, r23
    21f2:	44 27       	eor	r20, r20
    21f4:	37 fd       	sbrc	r19, 7
    21f6:	40 95       	com	r20
    21f8:	54 2f       	mov	r21, r20
    21fa:	c8 01       	movw	r24, r16
    21fc:	b7 01       	movw	r22, r14
    21fe:	0e 94 06 21 	call	0x420c	; 0x420c <__mulsi3>
    2202:	a4 18       	sub	r10, r4
    2204:	b5 08       	sbc	r11, r5
    2206:	cc 24       	eor	r12, r12
    2208:	b7 fc       	sbrc	r11, 7
    220a:	c0 94       	com	r12
    220c:	dc 2c       	mov	r13, r12
    220e:	a6 01       	movw	r20, r12
    2210:	95 01       	movw	r18, r10
    2212:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__divmodsi4>
    2216:	88 24       	eor	r8, r8
    2218:	99 24       	eor	r9, r9
    221a:	26 0d       	add	r18, r6
    221c:	37 1d       	adc	r19, r7
    221e:	48 1d       	adc	r20, r8
    2220:	59 1d       	adc	r21, r9
    2222:	c9 01       	movw	r24, r18
    2224:	1f 91       	pop	r17
    2226:	0f 91       	pop	r16
    2228:	ff 90       	pop	r15
    222a:	ef 90       	pop	r14
    222c:	df 90       	pop	r13
    222e:	cf 90       	pop	r12
    2230:	bf 90       	pop	r11
    2232:	af 90       	pop	r10
    2234:	9f 90       	pop	r9
    2236:	8f 90       	pop	r8
    2238:	7f 90       	pop	r7
    223a:	6f 90       	pop	r6
    223c:	5f 90       	pop	r5
    223e:	4f 90       	pop	r4
    2240:	08 95       	ret

00002242 <getError>:
    2242:	80 91 35 08 	lds	r24, 0x0835
    2246:	08 95       	ret

00002248 <setErrorLog>:
    2248:	90 93 39 08 	sts	0x0839, r25
    224c:	80 93 38 08 	sts	0x0838, r24
    2250:	08 95       	ret

00002252 <setError>:
    2252:	1f 93       	push	r17
    2254:	18 2f       	mov	r17, r24
    2256:	80 91 35 08 	lds	r24, 0x0835
    225a:	88 23       	and	r24, r24
    225c:	09 f0       	breq	.+2      	; 0x2260 <setError+0xe>
    225e:	5a c0       	rjmp	.+180    	; 0x2314 <setError+0xc2>
    2260:	10 93 35 08 	sts	0x0835, r17
    2264:	80 91 3a 08 	lds	r24, 0x083A
    2268:	90 91 3b 08 	lds	r25, 0x083B
    226c:	00 97       	sbiw	r24, 0x00	; 0
    226e:	49 f0       	breq	.+18     	; 0x2282 <setError+0x30>
    2270:	0e 94 8c 11 	call	0x2318	; 0x2318 <pin_is_output>
    2274:	88 23       	and	r24, r24
    2276:	29 f0       	breq	.+10     	; 0x2282 <setError+0x30>
    2278:	8a e3       	ldi	r24, 0x3A	; 58
    227a:	98 e0       	ldi	r25, 0x08	; 8
    227c:	60 e0       	ldi	r22, 0x00	; 0
    227e:	0e 94 ef 11 	call	0x23de	; 0x23de <LED_set>
    2282:	80 91 45 08 	lds	r24, 0x0845
    2286:	90 91 46 08 	lds	r25, 0x0846
    228a:	00 97       	sbiw	r24, 0x00	; 0
    228c:	09 f4       	brne	.+2      	; 0x2290 <setError+0x3e>
    228e:	42 c0       	rjmp	.+132    	; 0x2314 <setError+0xc2>
    2290:	17 ff       	sbrs	r17, 7
    2292:	12 c0       	rjmp	.+36     	; 0x22b8 <setError+0x66>
    2294:	00 d0       	rcall	.+0      	; 0x2296 <setError+0x44>
    2296:	00 d0       	rcall	.+0      	; 0x2298 <setError+0x46>
    2298:	ad b7       	in	r26, 0x3d	; 61
    229a:	be b7       	in	r27, 0x3e	; 62
    229c:	12 96       	adiw	r26, 0x02	; 2
    229e:	9c 93       	st	X, r25
    22a0:	8e 93       	st	-X, r24
    22a2:	11 97       	sbiw	r26, 0x01	; 1
    22a4:	87 e0       	ldi	r24, 0x07	; 7
    22a6:	94 e0       	ldi	r25, 0x04	; 4
    22a8:	14 96       	adiw	r26, 0x04	; 4
    22aa:	9c 93       	st	X, r25
    22ac:	8e 93       	st	-X, r24
    22ae:	13 97       	sbiw	r26, 0x03	; 3
    22b0:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <fprintf_P>
    22b4:	11 95       	neg	r17
    22b6:	0c c0       	rjmp	.+24     	; 0x22d0 <setError+0x7e>
    22b8:	00 d0       	rcall	.+0      	; 0x22ba <setError+0x68>
    22ba:	00 d0       	rcall	.+0      	; 0x22bc <setError+0x6a>
    22bc:	ed b7       	in	r30, 0x3d	; 61
    22be:	fe b7       	in	r31, 0x3e	; 62
    22c0:	92 83       	std	Z+2, r25	; 0x02
    22c2:	81 83       	std	Z+1, r24	; 0x01
    22c4:	82 e0       	ldi	r24, 0x02	; 2
    22c6:	94 e0       	ldi	r25, 0x04	; 4
    22c8:	94 83       	std	Z+4, r25	; 0x04
    22ca:	83 83       	std	Z+3, r24	; 0x03
    22cc:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <fprintf_P>
    22d0:	00 d0       	rcall	.+0      	; 0x22d2 <setError+0x80>
    22d2:	ed b7       	in	r30, 0x3d	; 61
    22d4:	fe b7       	in	r31, 0x3e	; 62
    22d6:	31 96       	adiw	r30, 0x01	; 1
    22d8:	80 91 45 08 	lds	r24, 0x0845
    22dc:	90 91 46 08 	lds	r25, 0x0846
    22e0:	ad b7       	in	r26, 0x3d	; 61
    22e2:	be b7       	in	r27, 0x3e	; 62
    22e4:	12 96       	adiw	r26, 0x02	; 2
    22e6:	9c 93       	st	X, r25
    22e8:	8e 93       	st	-X, r24
    22ea:	11 97       	sbiw	r26, 0x01	; 1
    22ec:	86 ef       	ldi	r24, 0xF6	; 246
    22ee:	93 e0       	ldi	r25, 0x03	; 3
    22f0:	93 83       	std	Z+3, r25	; 0x03
    22f2:	82 83       	std	Z+2, r24	; 0x02
    22f4:	81 2f       	mov	r24, r17
    22f6:	99 27       	eor	r25, r25
    22f8:	87 fd       	sbrc	r24, 7
    22fa:	90 95       	com	r25
    22fc:	95 83       	std	Z+5, r25	; 0x05
    22fe:	84 83       	std	Z+4, r24	; 0x04
    2300:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <fprintf_P>
    2304:	ed b7       	in	r30, 0x3d	; 61
    2306:	fe b7       	in	r31, 0x3e	; 62
    2308:	36 96       	adiw	r30, 0x06	; 6
    230a:	0f b6       	in	r0, 0x3f	; 63
    230c:	f8 94       	cli
    230e:	fe bf       	out	0x3e, r31	; 62
    2310:	0f be       	out	0x3f, r0	; 63
    2312:	ed bf       	out	0x3d, r30	; 61
    2314:	1f 91       	pop	r17
    2316:	08 95       	ret

00002318 <pin_is_output>:
    2318:	9c 01       	movw	r18, r24
    231a:	00 97       	sbiw	r24, 0x00	; 0
    231c:	81 f0       	breq	.+32     	; 0x233e <pin_is_output+0x26>
    231e:	fc 01       	movw	r30, r24
    2320:	85 91       	lpm	r24, Z+
    2322:	94 91       	lpm	r25, Z+
    2324:	02 96       	adiw	r24, 0x02	; 2
    2326:	fc 01       	movw	r30, r24
    2328:	a5 91       	lpm	r26, Z+
    232a:	b4 91       	lpm	r27, Z+
    232c:	2e 5f       	subi	r18, 0xFE	; 254
    232e:	3f 4f       	sbci	r19, 0xFF	; 255
    2330:	f9 01       	movw	r30, r18
    2332:	94 91       	lpm	r25, Z+
    2334:	8c 91       	ld	r24, X
    2336:	89 23       	and	r24, r25
    2338:	11 f0       	breq	.+4      	; 0x233e <pin_is_output+0x26>
    233a:	8f ef       	ldi	r24, 0xFF	; 255
    233c:	08 95       	ret
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	08 95       	ret

00002342 <pin_make_input>:
    2342:	cf 93       	push	r28
    2344:	df 93       	push	r29
    2346:	9c 01       	movw	r18, r24
    2348:	00 97       	sbiw	r24, 0x00	; 0
    234a:	f9 f0       	breq	.+62     	; 0x238a <pin_make_input+0x48>
    234c:	fc 01       	movw	r30, r24
    234e:	45 91       	lpm	r20, Z+
    2350:	54 91       	lpm	r21, Z+
    2352:	ca 01       	movw	r24, r20
    2354:	02 96       	adiw	r24, 0x02	; 2
    2356:	fc 01       	movw	r30, r24
    2358:	a5 91       	lpm	r26, Z+
    235a:	b4 91       	lpm	r27, Z+
    235c:	fa 01       	movw	r30, r20
    235e:	c5 91       	lpm	r28, Z+
    2360:	d4 91       	lpm	r29, Z+
    2362:	2e 5f       	subi	r18, 0xFE	; 254
    2364:	3f 4f       	sbci	r19, 0xFF	; 255
    2366:	f9 01       	movw	r30, r18
    2368:	94 91       	lpm	r25, Z+
    236a:	3f b7       	in	r19, 0x3f	; 63
    236c:	f8 94       	cli
    236e:	8c 91       	ld	r24, X
    2370:	29 2f       	mov	r18, r25
    2372:	20 95       	com	r18
    2374:	82 23       	and	r24, r18
    2376:	8c 93       	st	X, r24
    2378:	66 23       	and	r22, r22
    237a:	19 f0       	breq	.+6      	; 0x2382 <pin_make_input+0x40>
    237c:	88 81       	ld	r24, Y
    237e:	89 2b       	or	r24, r25
    2380:	02 c0       	rjmp	.+4      	; 0x2386 <pin_make_input+0x44>
    2382:	88 81       	ld	r24, Y
    2384:	82 23       	and	r24, r18
    2386:	88 83       	st	Y, r24
    2388:	3f bf       	out	0x3f, r19	; 63
    238a:	df 91       	pop	r29
    238c:	cf 91       	pop	r28
    238e:	08 95       	ret

00002390 <pin_make_output>:
    2390:	cf 93       	push	r28
    2392:	df 93       	push	r29
    2394:	9c 01       	movw	r18, r24
    2396:	00 97       	sbiw	r24, 0x00	; 0
    2398:	f9 f0       	breq	.+62     	; 0x23d8 <pin_make_output+0x48>
    239a:	fc 01       	movw	r30, r24
    239c:	45 91       	lpm	r20, Z+
    239e:	54 91       	lpm	r21, Z+
    23a0:	ca 01       	movw	r24, r20
    23a2:	02 96       	adiw	r24, 0x02	; 2
    23a4:	fc 01       	movw	r30, r24
    23a6:	c5 91       	lpm	r28, Z+
    23a8:	d4 91       	lpm	r29, Z+
    23aa:	fa 01       	movw	r30, r20
    23ac:	a5 91       	lpm	r26, Z+
    23ae:	b4 91       	lpm	r27, Z+
    23b0:	2e 5f       	subi	r18, 0xFE	; 254
    23b2:	3f 4f       	sbci	r19, 0xFF	; 255
    23b4:	f9 01       	movw	r30, r18
    23b6:	24 91       	lpm	r18, Z+
    23b8:	3f b7       	in	r19, 0x3f	; 63
    23ba:	f8 94       	cli
    23bc:	66 23       	and	r22, r22
    23be:	19 f0       	breq	.+6      	; 0x23c6 <pin_make_output+0x36>
    23c0:	8c 91       	ld	r24, X
    23c2:	82 2b       	or	r24, r18
    23c4:	04 c0       	rjmp	.+8      	; 0x23ce <pin_make_output+0x3e>
    23c6:	8c 91       	ld	r24, X
    23c8:	92 2f       	mov	r25, r18
    23ca:	90 95       	com	r25
    23cc:	89 23       	and	r24, r25
    23ce:	8c 93       	st	X, r24
    23d0:	88 81       	ld	r24, Y
    23d2:	82 2b       	or	r24, r18
    23d4:	88 83       	st	Y, r24
    23d6:	3f bf       	out	0x3f, r19	; 63
    23d8:	df 91       	pop	r29
    23da:	cf 91       	pop	r28
    23dc:	08 95       	ret

000023de <LED_set>:
    23de:	1f 93       	push	r17
    23e0:	cf 93       	push	r28
    23e2:	df 93       	push	r29
    23e4:	ec 01       	movw	r28, r24
    23e6:	16 2f       	mov	r17, r22
    23e8:	88 81       	ld	r24, Y
    23ea:	99 81       	ldd	r25, Y+1	; 0x01
    23ec:	00 97       	sbiw	r24, 0x00	; 0
    23ee:	a9 f0       	breq	.+42     	; 0x241a <LED_set+0x3c>
    23f0:	3a 81       	ldd	r19, Y+2	; 0x02
    23f2:	30 fd       	sbrc	r19, 0
    23f4:	05 c0       	rjmp	.+10     	; 0x2400 <LED_set+0x22>
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	66 23       	and	r22, r22
    23fa:	09 f4       	brne	.+2      	; 0x23fe <LED_set+0x20>
    23fc:	21 e0       	ldi	r18, 0x01	; 1
    23fe:	12 2f       	mov	r17, r18
    2400:	31 fd       	sbrc	r19, 1
    2402:	06 c0       	rjmp	.+12     	; 0x2410 <LED_set+0x32>
    2404:	61 2f       	mov	r22, r17
    2406:	0e 94 c8 11 	call	0x2390	; 0x2390 <pin_make_output>
    240a:	8a 81       	ldd	r24, Y+2	; 0x02
    240c:	82 60       	ori	r24, 0x02	; 2
    240e:	8a 83       	std	Y+2, r24	; 0x02
    2410:	88 81       	ld	r24, Y
    2412:	99 81       	ldd	r25, Y+1	; 0x01
    2414:	61 2f       	mov	r22, r17
    2416:	0e 94 35 18 	call	0x306a	; 0x306a <pin_set>
    241a:	df 91       	pop	r29
    241c:	cf 91       	pop	r28
    241e:	1f 91       	pop	r17
    2420:	08 95       	ret

00002422 <main>:
    2422:	0e 94 ad 0b 	call	0x175a	; 0x175a <registerLED>
    2426:	f8 94       	cli
    2428:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <__initTimers>
    242c:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__clockInit>
    2430:	78 94       	sei
    2432:	0e 94 c7 0b 	call	0x178e	; 0x178e <sysInitHardware>
    2436:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <appInitHardware>
    243a:	0e 94 1f 0b 	call	0x163e	; 0x163e <clockGetus>
    243e:	60 93 1c 08 	sts	0x081C, r22
    2442:	70 93 1d 08 	sts	0x081D, r23
    2446:	80 93 1e 08 	sts	0x081E, r24
    244a:	90 93 1f 08 	sts	0x081F, r25
    244e:	0e 94 11 04 	call	0x822	; 0x822 <appInitSoftware>
    2452:	60 93 20 08 	sts	0x0820, r22
    2456:	70 93 21 08 	sts	0x0821, r23
    245a:	80 93 22 08 	sts	0x0822, r24
    245e:	90 93 23 08 	sts	0x0823, r25
    2462:	78 94       	sei
    2464:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <breathe>
    2468:	80 91 20 08 	lds	r24, 0x0820
    246c:	90 91 21 08 	lds	r25, 0x0821
    2470:	a0 91 22 08 	lds	r26, 0x0822
    2474:	b0 91 23 08 	lds	r27, 0x0823
    2478:	00 97       	sbiw	r24, 0x00	; 0
    247a:	a1 05       	cpc	r26, r1
    247c:	b1 05       	cpc	r27, r1
    247e:	19 f4       	brne	.+6      	; 0x2486 <main+0x64>
    2480:	16 c0       	rjmp	.+44     	; 0x24ae <main+0x8c>
    2482:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <breathe>
    2486:	60 91 1c 08 	lds	r22, 0x081C
    248a:	70 91 1d 08 	lds	r23, 0x081D
    248e:	80 91 1e 08 	lds	r24, 0x081E
    2492:	90 91 1f 08 	lds	r25, 0x081F
    2496:	20 91 20 08 	lds	r18, 0x0820
    249a:	30 91 21 08 	lds	r19, 0x0821
    249e:	40 91 22 08 	lds	r20, 0x0822
    24a2:	50 91 23 08 	lds	r21, 0x0823
    24a6:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <clockHasElapsed>
    24aa:	88 23       	and	r24, r24
    24ac:	51 f3       	breq	.-44     	; 0x2482 <main+0x60>
    24ae:	0e 94 1f 0b 	call	0x163e	; 0x163e <clockGetus>
    24b2:	9b 01       	movw	r18, r22
    24b4:	ac 01       	movw	r20, r24
    24b6:	60 93 1c 08 	sts	0x081C, r22
    24ba:	70 93 1d 08 	sts	0x081D, r23
    24be:	80 93 1e 08 	sts	0x081E, r24
    24c2:	90 93 1f 08 	sts	0x081F, r25
    24c6:	60 91 18 08 	lds	r22, 0x0818
    24ca:	70 91 19 08 	lds	r23, 0x0819
    24ce:	80 91 1a 08 	lds	r24, 0x081A
    24d2:	90 91 1b 08 	lds	r25, 0x081B
    24d6:	6f 5f       	subi	r22, 0xFF	; 255
    24d8:	7f 4f       	sbci	r23, 0xFF	; 255
    24da:	8f 4f       	sbci	r24, 0xFF	; 255
    24dc:	9f 4f       	sbci	r25, 0xFF	; 255
    24de:	60 93 18 08 	sts	0x0818, r22
    24e2:	70 93 19 08 	sts	0x0819, r23
    24e6:	80 93 1a 08 	sts	0x081A, r24
    24ea:	90 93 1b 08 	sts	0x081B, r25
    24ee:	0e 94 47 04 	call	0x88e	; 0x88e <appControl>
    24f2:	af cf       	rjmp	.-162    	; 0x2452 <main+0x30>

000024f4 <rprintfIgnore>:
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	08 95       	ret

000024f8 <rprintfInit>:
    24f8:	4f b7       	in	r20, 0x3f	; 63
    24fa:	f8 94       	cli
    24fc:	20 91 7d 05 	lds	r18, 0x057D
    2500:	30 91 7e 05 	lds	r19, 0x057E
    2504:	90 93 7e 05 	sts	0x057E, r25
    2508:	80 93 7d 05 	sts	0x057D, r24
    250c:	4f bf       	out	0x3f, r20	; 63
    250e:	c9 01       	movw	r24, r18
    2510:	08 95       	ret

00002512 <rprintfChar>:
    2512:	1f 93       	push	r17
    2514:	18 2f       	mov	r17, r24
    2516:	8a 30       	cpi	r24, 0x0A	; 10
    2518:	31 f4       	brne	.+12     	; 0x2526 <rprintfChar+0x14>
    251a:	e0 91 7d 05 	lds	r30, 0x057D
    251e:	f0 91 7e 05 	lds	r31, 0x057E
    2522:	8d e0       	ldi	r24, 0x0D	; 13
    2524:	09 95       	icall
    2526:	e0 91 7d 05 	lds	r30, 0x057D
    252a:	f0 91 7e 05 	lds	r31, 0x057E
    252e:	81 2f       	mov	r24, r17
    2530:	09 95       	icall
    2532:	1f 91       	pop	r17
    2534:	08 95       	ret

00002536 <rprintfCRLF>:
    2536:	8a e0       	ldi	r24, 0x0A	; 10
    2538:	0e 94 89 12 	call	0x2512	; 0x2512 <rprintfChar>
    253c:	08 95       	ret

0000253e <marqueeSendByte>:
    253e:	cf 92       	push	r12
    2540:	df 92       	push	r13
    2542:	ef 92       	push	r14
    2544:	ff 92       	push	r15
    2546:	0f 93       	push	r16
    2548:	1f 93       	push	r17
    254a:	cf 93       	push	r28
    254c:	df 93       	push	r29
    254e:	ec 01       	movw	r28, r24
    2550:	d6 2e       	mov	r13, r22
    2552:	8c 81       	ldd	r24, Y+4	; 0x04
    2554:	9d 81       	ldd	r25, Y+5	; 0x05
    2556:	89 2b       	or	r24, r25
    2558:	a9 f5       	brne	.+106    	; 0x25c4 <marqueeSendByte+0x86>
    255a:	8a 85       	ldd	r24, Y+10	; 0x0a
    255c:	9b 85       	ldd	r25, Y+11	; 0x0b
    255e:	01 96       	adiw	r24, 0x01	; 1
    2560:	0e 94 a0 1c 	call	0x3940	; 0x3940 <malloc>
    2564:	9d 83       	std	Y+5, r25	; 0x05
    2566:	8c 83       	std	Y+4, r24	; 0x04
    2568:	00 97       	sbiw	r24, 0x00	; 0
    256a:	61 f1       	breq	.+88     	; 0x25c4 <marqueeSendByte+0x86>
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	07 c0       	rjmp	.+14     	; 0x2580 <marqueeSendByte+0x42>
    2572:	ec 81       	ldd	r30, Y+4	; 0x04
    2574:	fd 81       	ldd	r31, Y+5	; 0x05
    2576:	e2 0f       	add	r30, r18
    2578:	f3 1f       	adc	r31, r19
    257a:	10 82       	st	Z, r1
    257c:	2f 5f       	subi	r18, 0xFF	; 255
    257e:	3f 4f       	sbci	r19, 0xFF	; 255
    2580:	8a 85       	ldd	r24, Y+10	; 0x0a
    2582:	9b 85       	ldd	r25, Y+11	; 0x0b
    2584:	82 17       	cp	r24, r18
    2586:	93 07       	cpc	r25, r19
    2588:	a0 f7       	brcc	.-24     	; 0x2572 <marqueeSendByte+0x34>
    258a:	19 86       	std	Y+9, r1	; 0x09
    258c:	18 86       	std	Y+8, r1	; 0x08
    258e:	1f 82       	std	Y+7, r1	; 0x07
    2590:	1e 82       	std	Y+6, r1	; 0x06
    2592:	8c 89       	ldd	r24, Y+20	; 0x14
    2594:	8e 7f       	andi	r24, 0xFE	; 254
    2596:	8c 8b       	std	Y+20, r24	; 0x14
    2598:	00 e0       	ldi	r16, 0x00	; 0
    259a:	10 e0       	ldi	r17, 0x00	; 0
    259c:	0e c0       	rjmp	.+28     	; 0x25ba <marqueeSendByte+0x7c>
    259e:	c8 01       	movw	r24, r16
    25a0:	88 0f       	add	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	e8 81       	ld	r30, Y
    25a6:	f9 81       	ldd	r31, Y+1	; 0x01
    25a8:	e8 0f       	add	r30, r24
    25aa:	f9 1f       	adc	r31, r25
    25ac:	85 91       	lpm	r24, Z+
    25ae:	94 91       	lpm	r25, Z+
    25b0:	60 e2       	ldi	r22, 0x20	; 32
    25b2:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <segled_put_char>
    25b6:	0f 5f       	subi	r16, 0xFF	; 255
    25b8:	1f 4f       	sbci	r17, 0xFF	; 255
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
    25bc:	9b 81       	ldd	r25, Y+3	; 0x03
    25be:	08 17       	cp	r16, r24
    25c0:	19 07       	cpc	r17, r25
    25c2:	68 f3       	brcs	.-38     	; 0x259e <marqueeSendByte+0x60>
    25c4:	ec 81       	ldd	r30, Y+4	; 0x04
    25c6:	fd 81       	ldd	r31, Y+5	; 0x05
    25c8:	30 97       	sbiw	r30, 0x00	; 0
    25ca:	09 f4       	brne	.+2      	; 0x25ce <marqueeSendByte+0x90>
    25cc:	3e c0       	rjmp	.+124    	; 0x264a <marqueeSendByte+0x10c>
    25ce:	8a e0       	ldi	r24, 0x0A	; 10
    25d0:	d8 16       	cp	r13, r24
    25d2:	19 f5       	brne	.+70     	; 0x261a <marqueeSendByte+0xdc>
    25d4:	88 85       	ldd	r24, Y+8	; 0x08
    25d6:	99 85       	ldd	r25, Y+9	; 0x09
    25d8:	e8 0f       	add	r30, r24
    25da:	f9 1f       	adc	r31, r25
    25dc:	10 82       	st	Z, r1
    25de:	19 86       	std	Y+9, r1	; 0x09
    25e0:	18 86       	std	Y+8, r1	; 0x08
    25e2:	cf b6       	in	r12, 0x3f	; 63
    25e4:	f8 94       	cli
    25e6:	8c 89       	ldd	r24, Y+20	; 0x14
    25e8:	80 fd       	sbrc	r24, 0
    25ea:	15 c0       	rjmp	.+42     	; 0x2616 <marqueeSendByte+0xd8>
    25ec:	8c 89       	ldd	r24, Y+20	; 0x14
    25ee:	81 60       	ori	r24, 0x01	; 1
    25f0:	8c 8b       	std	Y+20, r24	; 0x14
    25f2:	8c 89       	ldd	r24, Y+20	; 0x14
    25f4:	8d 7f       	andi	r24, 0xFD	; 253
    25f6:	8c 8b       	std	Y+20, r24	; 0x14
    25f8:	1f 82       	std	Y+7, r1	; 0x07
    25fa:	1e 82       	std	Y+6, r1	; 0x06
    25fc:	0e 94 1f 0b 	call	0x163e	; 0x163e <clockGetus>
    2600:	9b 01       	movw	r18, r22
    2602:	ac 01       	movw	r20, r24
    2604:	ec 84       	ldd	r14, Y+12	; 0x0c
    2606:	fd 84       	ldd	r15, Y+13	; 0x0d
    2608:	0e 85       	ldd	r16, Y+14	; 0x0e
    260a:	1f 85       	ldd	r17, Y+15	; 0x0f
    260c:	8f e2       	ldi	r24, 0x2F	; 47
    260e:	93 e1       	ldi	r25, 0x13	; 19
    2610:	be 01       	movw	r22, r28
    2612:	0e 94 40 19 	call	0x3280	; 0x3280 <scheduleJob>
    2616:	cf be       	out	0x3f, r12	; 63
    2618:	18 c0       	rjmp	.+48     	; 0x264a <marqueeSendByte+0x10c>
    261a:	8d e0       	ldi	r24, 0x0D	; 13
    261c:	d8 16       	cp	r13, r24
    261e:	a9 f0       	breq	.+42     	; 0x264a <marqueeSendByte+0x10c>
    2620:	28 85       	ldd	r18, Y+8	; 0x08
    2622:	39 85       	ldd	r19, Y+9	; 0x09
    2624:	8a 85       	ldd	r24, Y+10	; 0x0a
    2626:	9b 85       	ldd	r25, Y+11	; 0x0b
    2628:	28 17       	cp	r18, r24
    262a:	39 07       	cpc	r19, r25
    262c:	70 f4       	brcc	.+28     	; 0x264a <marqueeSendByte+0x10c>
    262e:	e2 0f       	add	r30, r18
    2630:	f3 1f       	adc	r31, r19
    2632:	2f b7       	in	r18, 0x3f	; 63
    2634:	f8 94       	cli
    2636:	d0 82       	st	Z, r13
    2638:	11 82       	std	Z+1, r1	; 0x01
    263a:	88 85       	ldd	r24, Y+8	; 0x08
    263c:	99 85       	ldd	r25, Y+9	; 0x09
    263e:	01 96       	adiw	r24, 0x01	; 1
    2640:	99 87       	std	Y+9, r25	; 0x09
    2642:	88 87       	std	Y+8, r24	; 0x08
    2644:	1f 82       	std	Y+7, r1	; 0x07
    2646:	1e 82       	std	Y+6, r1	; 0x06
    2648:	2f bf       	out	0x3f, r18	; 63
    264a:	8d 2d       	mov	r24, r13
    264c:	df 91       	pop	r29
    264e:	cf 91       	pop	r28
    2650:	1f 91       	pop	r17
    2652:	0f 91       	pop	r16
    2654:	ff 90       	pop	r15
    2656:	ef 90       	pop	r14
    2658:	df 90       	pop	r13
    265a:	cf 90       	pop	r12
    265c:	08 95       	ret

0000265e <marqueeUpdate>:
    265e:	2f 92       	push	r2
    2660:	3f 92       	push	r3
    2662:	4f 92       	push	r4
    2664:	5f 92       	push	r5
    2666:	6f 92       	push	r6
    2668:	7f 92       	push	r7
    266a:	8f 92       	push	r8
    266c:	9f 92       	push	r9
    266e:	af 92       	push	r10
    2670:	bf 92       	push	r11
    2672:	cf 92       	push	r12
    2674:	df 92       	push	r13
    2676:	ef 92       	push	r14
    2678:	ff 92       	push	r15
    267a:	0f 93       	push	r16
    267c:	1f 93       	push	r17
    267e:	cf 93       	push	r28
    2680:	df 93       	push	r29
    2682:	38 2e       	mov	r3, r24
    2684:	29 2e       	mov	r2, r25
    2686:	2a 01       	movw	r4, r20
    2688:	3b 01       	movw	r6, r22
    268a:	c8 2f       	mov	r28, r24
    268c:	d9 2f       	mov	r29, r25
    268e:	0c 81       	ldd	r16, Y+4	; 0x04
    2690:	1d 81       	ldd	r17, Y+5	; 0x05
    2692:	8e 81       	ldd	r24, Y+6	; 0x06
    2694:	9f 81       	ldd	r25, Y+7	; 0x07
    2696:	08 0f       	add	r16, r24
    2698:	19 1f       	adc	r17, r25
    269a:	f8 01       	movw	r30, r16
    269c:	80 80       	ld	r8, Z
    269e:	8c 89       	ldd	r24, Y+20	; 0x14
    26a0:	86 95       	lsr	r24
    26a2:	81 70       	andi	r24, 0x01	; 1
    26a4:	88 20       	and	r8, r8
    26a6:	29 f4       	brne	.+10     	; 0x26b2 <marqueeUpdate+0x54>
    26a8:	a8 88       	ldd	r10, Y+16	; 0x10
    26aa:	b9 88       	ldd	r11, Y+17	; 0x11
    26ac:	ca 88       	ldd	r12, Y+18	; 0x12
    26ae:	db 88       	ldd	r13, Y+19	; 0x13
    26b0:	04 c0       	rjmp	.+8      	; 0x26ba <marqueeUpdate+0x5c>
    26b2:	ac 84       	ldd	r10, Y+12	; 0x0c
    26b4:	bd 84       	ldd	r11, Y+13	; 0x0d
    26b6:	ce 84       	ldd	r12, Y+14	; 0x0e
    26b8:	df 84       	ldd	r13, Y+15	; 0x0f
    26ba:	88 23       	and	r24, r24
    26bc:	d1 f4       	brne	.+52     	; 0x26f2 <marqueeUpdate+0x94>
    26be:	88 20       	and	r8, r8
    26c0:	c1 f0       	breq	.+48     	; 0x26f2 <marqueeUpdate+0x94>
    26c2:	f8 01       	movw	r30, r16
    26c4:	32 91       	ld	r19, -Z
    26c6:	8f 01       	movw	r16, r30
    26c8:	0f 5f       	subi	r16, 0xFF	; 255
    26ca:	1f 4f       	sbci	r17, 0xFF	; 255
    26cc:	4a 81       	ldd	r20, Y+2	; 0x02
    26ce:	5b 81       	ldd	r21, Y+3	; 0x03
    26d0:	f8 01       	movw	r30, r16
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	07 c0       	rjmp	.+14     	; 0x26e6 <marqueeUpdate+0x88>
    26d8:	20 81       	ld	r18, Z
    26da:	22 23       	and	r18, r18
    26dc:	51 f0       	breq	.+20     	; 0x26f2 <marqueeUpdate+0x94>
    26de:	23 17       	cp	r18, r19
    26e0:	41 f4       	brne	.+16     	; 0x26f2 <marqueeUpdate+0x94>
    26e2:	31 96       	adiw	r30, 0x01	; 1
    26e4:	01 96       	adiw	r24, 0x01	; 1
    26e6:	84 17       	cp	r24, r20
    26e8:	95 07       	cpc	r25, r21
    26ea:	b0 f3       	brcs	.-20     	; 0x26d8 <marqueeUpdate+0x7a>
    26ec:	99 24       	eor	r9, r9
    26ee:	9a 94       	dec	r9
    26f0:	01 c0       	rjmp	.+2      	; 0x26f4 <marqueeUpdate+0x96>
    26f2:	99 24       	eor	r9, r9
    26f4:	8c 89       	ldd	r24, Y+20	; 0x14
    26f6:	86 95       	lsr	r24
    26f8:	81 70       	andi	r24, 0x01	; 1
    26fa:	29 2d       	mov	r18, r9
    26fc:	33 27       	eor	r19, r19
    26fe:	27 fd       	sbrc	r18, 7
    2700:	30 95       	com	r19
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	28 17       	cp	r18, r24
    2706:	39 07       	cpc	r19, r25
    2708:	c1 f0       	breq	.+48     	; 0x273a <marqueeUpdate+0xdc>
    270a:	a6 01       	movw	r20, r12
    270c:	95 01       	movw	r18, r10
    270e:	62 e0       	ldi	r22, 0x02	; 2
    2710:	56 95       	lsr	r21
    2712:	47 95       	ror	r20
    2714:	37 95       	ror	r19
    2716:	27 95       	ror	r18
    2718:	6a 95       	dec	r22
    271a:	d1 f7       	brne	.-12     	; 0x2710 <marqueeUpdate+0xb2>
    271c:	99 2d       	mov	r25, r9
    271e:	92 70       	andi	r25, 0x02	; 2
    2720:	8c 89       	ldd	r24, Y+20	; 0x14
    2722:	8d 7f       	andi	r24, 0xFD	; 253
    2724:	89 2b       	or	r24, r25
    2726:	8c 8b       	std	Y+20, r24	; 0x14
    2728:	99 20       	and	r9, r9
    272a:	19 f0       	breq	.+6      	; 0x2732 <marqueeUpdate+0xd4>
    272c:	59 01       	movw	r10, r18
    272e:	6a 01       	movw	r12, r20
    2730:	04 c0       	rjmp	.+8      	; 0x273a <marqueeUpdate+0xdc>
    2732:	a2 1a       	sub	r10, r18
    2734:	b3 0a       	sbc	r11, r19
    2736:	c4 0a       	sbc	r12, r20
    2738:	d5 0a       	sbc	r13, r21
    273a:	ee 24       	eor	r14, r14
    273c:	ff 24       	eor	r15, r15
    273e:	18 c0       	rjmp	.+48     	; 0x2770 <marqueeUpdate+0x112>
    2740:	c7 01       	movw	r24, r14
    2742:	88 0f       	add	r24, r24
    2744:	99 1f       	adc	r25, r25
    2746:	e8 81       	ld	r30, Y
    2748:	f9 81       	ldd	r31, Y+1	; 0x01
    274a:	e8 0f       	add	r30, r24
    274c:	f9 1f       	adc	r31, r25
    274e:	85 91       	lpm	r24, Z+
    2750:	94 91       	lpm	r25, Z+
    2752:	99 20       	and	r9, r9
    2754:	39 f4       	brne	.+14     	; 0x2764 <marqueeUpdate+0x106>
    2756:	f8 01       	movw	r30, r16
    2758:	60 81       	ld	r22, Z
    275a:	66 23       	and	r22, r22
    275c:	19 f0       	breq	.+6      	; 0x2764 <marqueeUpdate+0x106>
    275e:	0f 5f       	subi	r16, 0xFF	; 255
    2760:	1f 4f       	sbci	r17, 0xFF	; 255
    2762:	01 c0       	rjmp	.+2      	; 0x2766 <marqueeUpdate+0x108>
    2764:	60 e2       	ldi	r22, 0x20	; 32
    2766:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <segled_put_char>
    276a:	08 94       	sec
    276c:	e1 1c       	adc	r14, r1
    276e:	f1 1c       	adc	r15, r1
    2770:	8a 81       	ldd	r24, Y+2	; 0x02
    2772:	9b 81       	ldd	r25, Y+3	; 0x03
    2774:	e8 16       	cp	r14, r24
    2776:	f9 06       	cpc	r15, r25
    2778:	18 f3       	brcs	.-58     	; 0x2740 <marqueeUpdate+0xe2>
    277a:	88 20       	and	r8, r8
    277c:	b1 f4       	brne	.+44     	; 0x27aa <marqueeUpdate+0x14c>
    277e:	1f 82       	std	Y+7, r1	; 0x07
    2780:	1e 82       	std	Y+6, r1	; 0x06
    2782:	88 89       	ldd	r24, Y+16	; 0x10
    2784:	99 89       	ldd	r25, Y+17	; 0x11
    2786:	aa 89       	ldd	r26, Y+18	; 0x12
    2788:	bb 89       	ldd	r27, Y+19	; 0x13
    278a:	00 97       	sbiw	r24, 0x00	; 0
    278c:	a1 05       	cpc	r26, r1
    278e:	b1 05       	cpc	r27, r1
    2790:	29 f0       	breq	.+10     	; 0x279c <marqueeUpdate+0x13e>
    2792:	ec 81       	ldd	r30, Y+4	; 0x04
    2794:	fd 81       	ldd	r31, Y+5	; 0x05
    2796:	80 81       	ld	r24, Z
    2798:	88 23       	and	r24, r24
    279a:	19 f4       	brne	.+6      	; 0x27a2 <marqueeUpdate+0x144>
    279c:	8c 89       	ldd	r24, Y+20	; 0x14
    279e:	8e 7f       	andi	r24, 0xFE	; 254
    27a0:	02 c0       	rjmp	.+4      	; 0x27a6 <marqueeUpdate+0x148>
    27a2:	8c 89       	ldd	r24, Y+20	; 0x14
    27a4:	8d 7f       	andi	r24, 0xFD	; 253
    27a6:	8c 8b       	std	Y+20, r24	; 0x14
    27a8:	07 c0       	rjmp	.+14     	; 0x27b8 <marqueeUpdate+0x15a>
    27aa:	99 20       	and	r9, r9
    27ac:	29 f4       	brne	.+10     	; 0x27b8 <marqueeUpdate+0x15a>
    27ae:	8e 81       	ldd	r24, Y+6	; 0x06
    27b0:	9f 81       	ldd	r25, Y+7	; 0x07
    27b2:	01 96       	adiw	r24, 0x01	; 1
    27b4:	9f 83       	std	Y+7, r25	; 0x07
    27b6:	8e 83       	std	Y+6, r24	; 0x06
    27b8:	8c 89       	ldd	r24, Y+20	; 0x14
    27ba:	80 ff       	sbrs	r24, 0
    27bc:	0a c0       	rjmp	.+20     	; 0x27d2 <marqueeUpdate+0x174>
    27be:	8f e2       	ldi	r24, 0x2F	; 47
    27c0:	93 e1       	ldi	r25, 0x13	; 19
    27c2:	63 2d       	mov	r22, r3
    27c4:	72 2d       	mov	r23, r2
    27c6:	a3 01       	movw	r20, r6
    27c8:	92 01       	movw	r18, r4
    27ca:	86 01       	movw	r16, r12
    27cc:	75 01       	movw	r14, r10
    27ce:	0e 94 40 19 	call	0x3280	; 0x3280 <scheduleJob>
    27d2:	df 91       	pop	r29
    27d4:	cf 91       	pop	r28
    27d6:	1f 91       	pop	r17
    27d8:	0f 91       	pop	r16
    27da:	ff 90       	pop	r15
    27dc:	ef 90       	pop	r14
    27de:	df 90       	pop	r13
    27e0:	cf 90       	pop	r12
    27e2:	bf 90       	pop	r11
    27e4:	af 90       	pop	r10
    27e6:	9f 90       	pop	r9
    27e8:	8f 90       	pop	r8
    27ea:	7f 90       	pop	r7
    27ec:	6f 90       	pop	r6
    27ee:	5f 90       	pop	r5
    27f0:	4f 90       	pop	r4
    27f2:	3f 90       	pop	r3
    27f4:	2f 90       	pop	r2
    27f6:	08 95       	ret

000027f8 <segled_put_char>:
    27f8:	ef 92       	push	r14
    27fa:	ff 92       	push	r15
    27fc:	0f 93       	push	r16
    27fe:	1f 93       	push	r17
    2800:	cf 93       	push	r28
    2802:	df 93       	push	r29
    2804:	8c 01       	movw	r16, r24
    2806:	e6 2e       	mov	r14, r22
    2808:	fc 01       	movw	r30, r24
    280a:	80 89       	ldd	r24, Z+16	; 0x10
    280c:	81 fd       	sbrc	r24, 1
    280e:	12 c0       	rjmp	.+36     	; 0x2834 <segled_put_char+0x3c>
    2810:	c0 e0       	ldi	r28, 0x00	; 0
    2812:	d0 e0       	ldi	r29, 0x00	; 0
    2814:	f8 01       	movw	r30, r16
    2816:	ec 0f       	add	r30, r28
    2818:	fd 1f       	adc	r31, r29
    281a:	80 81       	ld	r24, Z
    281c:	91 81       	ldd	r25, Z+1	; 0x01
    281e:	60 e0       	ldi	r22, 0x00	; 0
    2820:	0e 94 c8 11 	call	0x2390	; 0x2390 <pin_make_output>
    2824:	22 96       	adiw	r28, 0x02	; 2
    2826:	c0 31       	cpi	r28, 0x10	; 16
    2828:	d1 05       	cpc	r29, r1
    282a:	a1 f7       	brne	.-24     	; 0x2814 <segled_put_char+0x1c>
    282c:	f8 01       	movw	r30, r16
    282e:	80 89       	ldd	r24, Z+16	; 0x10
    2830:	82 60       	ori	r24, 0x02	; 2
    2832:	80 8b       	std	Z+16, r24	; 0x10
    2834:	8e 2d       	mov	r24, r14
    2836:	0e 94 82 14 	call	0x2904	; 0x2904 <segled8_get_mask>
    283a:	f8 2e       	mov	r15, r24
    283c:	80 ff       	sbrs	r24, 0
    283e:	07 c0       	rjmp	.+14     	; 0x284e <segled_put_char+0x56>
    2840:	f8 01       	movw	r30, r16
    2842:	86 85       	ldd	r24, Z+14	; 0x0e
    2844:	97 85       	ldd	r25, Z+15	; 0x0f
    2846:	89 2b       	or	r24, r25
    2848:	11 f4       	brne	.+4      	; 0x284e <segled_put_char+0x56>
    284a:	80 e1       	ldi	r24, 0x10	; 16
    284c:	f8 2e       	mov	r15, r24
    284e:	f8 01       	movw	r30, r16
    2850:	80 89       	ldd	r24, Z+16	; 0x10
    2852:	80 ff       	sbrs	r24, 0
    2854:	f0 94       	com	r15
    2856:	c0 e0       	ldi	r28, 0x00	; 0
    2858:	d0 e0       	ldi	r29, 0x00	; 0
    285a:	f8 01       	movw	r30, r16
    285c:	ec 0f       	add	r30, r28
    285e:	fd 1f       	adc	r31, r29
    2860:	80 81       	ld	r24, Z
    2862:	91 81       	ldd	r25, Z+1	; 0x01
    2864:	f7 fe       	sbrs	r15, 7
    2866:	03 c0       	rjmp	.+6      	; 0x286e <segled_put_char+0x76>
    2868:	0e 94 11 18 	call	0x3022	; 0x3022 <pin_high>
    286c:	02 c0       	rjmp	.+4      	; 0x2872 <segled_put_char+0x7a>
    286e:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <pin_low>
    2872:	22 96       	adiw	r28, 0x02	; 2
    2874:	c0 31       	cpi	r28, 0x10	; 16
    2876:	d1 05       	cpc	r29, r1
    2878:	11 f0       	breq	.+4      	; 0x287e <segled_put_char+0x86>
    287a:	ff 0c       	add	r15, r15
    287c:	ee cf       	rjmp	.-36     	; 0x285a <segled_put_char+0x62>
    287e:	8e 2d       	mov	r24, r14
    2880:	df 91       	pop	r29
    2882:	cf 91       	pop	r28
    2884:	1f 91       	pop	r17
    2886:	0f 91       	pop	r16
    2888:	ff 90       	pop	r15
    288a:	ef 90       	pop	r14
    288c:	08 95       	ret

0000288e <segled_set>:
    288e:	ef 92       	push	r14
    2890:	ff 92       	push	r15
    2892:	0f 93       	push	r16
    2894:	1f 93       	push	r17
    2896:	cf 93       	push	r28
    2898:	df 93       	push	r29
    289a:	8c 01       	movw	r16, r24
    289c:	e6 2e       	mov	r14, r22
    289e:	f4 2e       	mov	r15, r20
    28a0:	fc 01       	movw	r30, r24
    28a2:	80 89       	ldd	r24, Z+16	; 0x10
    28a4:	81 fd       	sbrc	r24, 1
    28a6:	12 c0       	rjmp	.+36     	; 0x28cc <segled_set+0x3e>
    28a8:	c0 e0       	ldi	r28, 0x00	; 0
    28aa:	d0 e0       	ldi	r29, 0x00	; 0
    28ac:	f8 01       	movw	r30, r16
    28ae:	ec 0f       	add	r30, r28
    28b0:	fd 1f       	adc	r31, r29
    28b2:	80 81       	ld	r24, Z
    28b4:	91 81       	ldd	r25, Z+1	; 0x01
    28b6:	60 e0       	ldi	r22, 0x00	; 0
    28b8:	0e 94 c8 11 	call	0x2390	; 0x2390 <pin_make_output>
    28bc:	22 96       	adiw	r28, 0x02	; 2
    28be:	c0 31       	cpi	r28, 0x10	; 16
    28c0:	d1 05       	cpc	r29, r1
    28c2:	a1 f7       	brne	.-24     	; 0x28ac <segled_set+0x1e>
    28c4:	f8 01       	movw	r30, r16
    28c6:	80 89       	ldd	r24, Z+16	; 0x10
    28c8:	82 60       	ori	r24, 0x02	; 2
    28ca:	80 8b       	std	Z+16, r24	; 0x10
    28cc:	f8 01       	movw	r30, r16
    28ce:	80 89       	ldd	r24, Z+16	; 0x10
    28d0:	80 fd       	sbrc	r24, 0
    28d2:	06 c0       	rjmp	.+12     	; 0x28e0 <segled_set+0x52>
    28d4:	ff 20       	and	r15, r15
    28d6:	19 f4       	brne	.+6      	; 0x28de <segled_set+0x50>
    28d8:	ff 24       	eor	r15, r15
    28da:	fa 94       	dec	r15
    28dc:	01 c0       	rjmp	.+2      	; 0x28e0 <segled_set+0x52>
    28de:	ff 24       	eor	r15, r15
    28e0:	ee 2d       	mov	r30, r14
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	ee 0f       	add	r30, r30
    28e6:	ff 1f       	adc	r31, r31
    28e8:	e0 0f       	add	r30, r16
    28ea:	f1 1f       	adc	r31, r17
    28ec:	80 81       	ld	r24, Z
    28ee:	91 81       	ldd	r25, Z+1	; 0x01
    28f0:	6f 2d       	mov	r22, r15
    28f2:	0e 94 35 18 	call	0x306a	; 0x306a <pin_set>
    28f6:	df 91       	pop	r29
    28f8:	cf 91       	pop	r28
    28fa:	1f 91       	pop	r17
    28fc:	0f 91       	pop	r16
    28fe:	ff 90       	pop	r15
    2900:	ef 90       	pop	r14
    2902:	08 95       	ret

00002904 <segled8_get_mask>:
    2904:	e8 2f       	mov	r30, r24
    2906:	81 54       	subi	r24, 0x41	; 65
    2908:	8a 31       	cpi	r24, 0x1A	; 26
    290a:	28 f4       	brcc	.+10     	; 0x2916 <segled8_get_mask+0x12>
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	e0 53       	subi	r30, 0x30	; 48
    2910:	fc 4f       	sbci	r31, 0xFC	; 252
    2912:	84 91       	lpm	r24, Z+
    2914:	08 95       	ret
    2916:	8e 2f       	mov	r24, r30
    2918:	81 56       	subi	r24, 0x61	; 97
    291a:	8a 31       	cpi	r24, 0x1A	; 26
    291c:	28 f4       	brcc	.+10     	; 0x2928 <segled8_get_mask+0x24>
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	e0 55       	subi	r30, 0x50	; 80
    2922:	fc 4f       	sbci	r31, 0xFC	; 252
    2924:	84 91       	lpm	r24, Z+
    2926:	08 95       	ret
    2928:	8e 2f       	mov	r24, r30
    292a:	80 53       	subi	r24, 0x30	; 48
    292c:	8a 30       	cpi	r24, 0x0A	; 10
    292e:	28 f4       	brcc	.+10     	; 0x293a <segled8_get_mask+0x36>
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	e5 50       	subi	r30, 0x05	; 5
    2934:	fc 4f       	sbci	r31, 0xFC	; 252
    2936:	84 91       	lpm	r24, Z+
    2938:	08 95       	ret
    293a:	ea 30       	cpi	r30, 0x0A	; 10
    293c:	28 f4       	brcc	.+10     	; 0x2948 <segled8_get_mask+0x44>
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	e5 5d       	subi	r30, 0xD5	; 213
    2942:	fb 4f       	sbci	r31, 0xFB	; 251
    2944:	84 91       	lpm	r24, Z+
    2946:	08 95       	ret
    2948:	ed 32       	cpi	r30, 0x2D	; 45
    294a:	11 f4       	brne	.+4      	; 0x2950 <segled8_get_mask+0x4c>
    294c:	82 e0       	ldi	r24, 0x02	; 2
    294e:	08 95       	ret
    2950:	eb 35       	cpi	r30, 0x5B	; 91
    2952:	79 f0       	breq	.+30     	; 0x2972 <segled8_get_mask+0x6e>
    2954:	eb 37       	cpi	r30, 0x7B	; 123
    2956:	69 f0       	breq	.+26     	; 0x2972 <segled8_get_mask+0x6e>
    2958:	e8 32       	cpi	r30, 0x28	; 40
    295a:	59 f0       	breq	.+22     	; 0x2972 <segled8_get_mask+0x6e>
    295c:	ed 35       	cpi	r30, 0x5D	; 93
    295e:	59 f0       	breq	.+22     	; 0x2976 <segled8_get_mask+0x72>
    2960:	ed 37       	cpi	r30, 0x7D	; 125
    2962:	49 f0       	breq	.+18     	; 0x2976 <segled8_get_mask+0x72>
    2964:	e9 32       	cpi	r30, 0x29	; 41
    2966:	39 f0       	breq	.+14     	; 0x2976 <segled8_get_mask+0x72>
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	ee 32       	cpi	r30, 0x2E	; 46
    296c:	29 f4       	brne	.+10     	; 0x2978 <segled8_get_mask+0x74>
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	08 95       	ret
    2972:	8c e9       	ldi	r24, 0x9C	; 156
    2974:	08 95       	ret
    2976:	80 ef       	ldi	r24, 0xF0	; 240
    2978:	08 95       	ret

0000297a <compareFromIOPin>:
    297a:	bf 92       	push	r11
    297c:	cf 92       	push	r12
    297e:	df 92       	push	r13
    2980:	ef 92       	push	r14
    2982:	ff 92       	push	r15
    2984:	0f 93       	push	r16
    2986:	1f 93       	push	r17
    2988:	cf 93       	push	r28
    298a:	df 93       	push	r29
    298c:	6c 01       	movw	r12, r24
    298e:	b0 90 c4 03 	lds	r11, 0x03C4
    2992:	2b ef       	ldi	r18, 0xFB	; 251
    2994:	31 e0       	ldi	r19, 0x01	; 1
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	c0 e0       	ldi	r28, 0x00	; 0
    299a:	d0 e0       	ldi	r29, 0x00	; 0
    299c:	2d c0       	rjmp	.+90     	; 0x29f8 <compareFromIOPin+0x7e>
    299e:	28 5f       	subi	r18, 0xF8	; 248
    29a0:	3f 4f       	sbci	r19, 0xFF	; 255
    29a2:	f9 01       	movw	r30, r18
    29a4:	e4 90       	lpm	r14, Z+
    29a6:	28 50       	subi	r18, 0x08	; 8
    29a8:	30 40       	sbci	r19, 0x00	; 0
    29aa:	f9 01       	movw	r30, r18
    29ac:	78 96       	adiw	r30, 0x18	; 24
    29ae:	29 5f       	subi	r18, 0xF9	; 249
    29b0:	3f 4f       	sbci	r19, 0xFF	; 255
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	a0 e0       	ldi	r26, 0x00	; 0
    29b6:	b0 e0       	ldi	r27, 0x00	; 0
    29b8:	05 91       	lpm	r16, Z+
    29ba:	14 91       	lpm	r17, Z+
    29bc:	f9 01       	movw	r30, r18
    29be:	f4 90       	lpm	r15, Z+
    29c0:	27 50       	subi	r18, 0x07	; 7
    29c2:	30 40       	sbci	r19, 0x00	; 0
    29c4:	14 c0       	rjmp	.+40     	; 0x29ee <compareFromIOPin+0x74>
    29c6:	b8 01       	movw	r22, r16
    29c8:	6a 0f       	add	r22, r26
    29ca:	7b 1f       	adc	r23, r27
    29cc:	fb 01       	movw	r30, r22
    29ce:	3e 96       	adiw	r30, 0x0e	; 14
    29d0:	45 91       	lpm	r20, Z+
    29d2:	54 91       	lpm	r21, Z+
    29d4:	41 15       	cp	r20, r1
    29d6:	51 05       	cpc	r21, r1
    29d8:	41 f0       	breq	.+16     	; 0x29ea <compareFromIOPin+0x70>
    29da:	4c 15       	cp	r20, r12
    29dc:	5d 05       	cpc	r21, r13
    29de:	29 f4       	brne	.+10     	; 0x29ea <compareFromIOPin+0x70>
    29e0:	ff 20       	and	r15, r15
    29e2:	11 f0       	breq	.+4      	; 0x29e8 <compareFromIOPin+0x6e>
    29e4:	eb 01       	movw	r28, r22
    29e6:	0a c0       	rjmp	.+20     	; 0x29fc <compareFromIOPin+0x82>
    29e8:	eb 01       	movw	r28, r22
    29ea:	8f 5f       	subi	r24, 0xFF	; 255
    29ec:	50 96       	adiw	r26, 0x10	; 16
    29ee:	8e 15       	cp	r24, r14
    29f0:	50 f3       	brcs	.-44     	; 0x29c6 <compareFromIOPin+0x4c>
    29f2:	9f 5f       	subi	r25, 0xFF	; 255
    29f4:	21 5d       	subi	r18, 0xD1	; 209
    29f6:	3f 4f       	sbci	r19, 0xFF	; 255
    29f8:	9b 15       	cp	r25, r11
    29fa:	88 f2       	brcs	.-94     	; 0x299e <compareFromIOPin+0x24>
    29fc:	ce 01       	movw	r24, r28
    29fe:	df 91       	pop	r29
    2a00:	cf 91       	pop	r28
    2a02:	1f 91       	pop	r17
    2a04:	0f 91       	pop	r16
    2a06:	ff 90       	pop	r15
    2a08:	ef 90       	pop	r14
    2a0a:	df 90       	pop	r13
    2a0c:	cf 90       	pop	r12
    2a0e:	bf 90       	pop	r11
    2a10:	08 95       	ret

00002a12 <compareSetOutputMode>:
    2a12:	9c 01       	movw	r18, r24
    2a14:	0b 96       	adiw	r24, 0x0b	; 11
    2a16:	fc 01       	movw	r30, r24
    2a18:	a5 91       	lpm	r26, Z+
    2a1a:	b4 91       	lpm	r27, Z+
    2a1c:	23 5f       	subi	r18, 0xF3	; 243
    2a1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a20:	f9 01       	movw	r30, r18
    2a22:	24 91       	lpm	r18, Z+
    2a24:	70 e0       	ldi	r23, 0x00	; 0
    2a26:	02 2e       	mov	r0, r18
    2a28:	02 c0       	rjmp	.+4      	; 0x2a2e <compareSetOutputMode+0x1c>
    2a2a:	66 0f       	add	r22, r22
    2a2c:	77 1f       	adc	r23, r23
    2a2e:	0a 94       	dec	r0
    2a30:	e2 f7       	brpl	.-8      	; 0x2a2a <compareSetOutputMode+0x18>
    2a32:	81 e0       	ldi	r24, 0x01	; 1
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	02 c0       	rjmp	.+4      	; 0x2a3c <compareSetOutputMode+0x2a>
    2a38:	88 0f       	add	r24, r24
    2a3a:	99 1f       	adc	r25, r25
    2a3c:	2a 95       	dec	r18
    2a3e:	e2 f7       	brpl	.-8      	; 0x2a38 <compareSetOutputMode+0x26>
    2a40:	28 2f       	mov	r18, r24
    2a42:	22 0f       	add	r18, r18
    2a44:	28 2b       	or	r18, r24
    2a46:	9c 91       	ld	r25, X
    2a48:	82 2f       	mov	r24, r18
    2a4a:	86 23       	and	r24, r22
    2a4c:	20 95       	com	r18
    2a4e:	29 23       	and	r18, r25
    2a50:	82 2b       	or	r24, r18
    2a52:	8c 93       	st	X, r24
    2a54:	08 95       	ret

00002a56 <compareSetThreshold>:
    2a56:	cf 93       	push	r28
    2a58:	df 93       	push	r29
    2a5a:	9c 01       	movw	r18, r24
    2a5c:	2e 5f       	subi	r18, 0xFE	; 254
    2a5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a60:	f9 01       	movw	r30, r18
    2a62:	84 91       	lpm	r24, Z+
    2a64:	22 50       	subi	r18, 0x02	; 2
    2a66:	30 40       	sbci	r19, 0x00	; 0
    2a68:	9f e2       	ldi	r25, 0x2F	; 47
    2a6a:	89 9f       	mul	r24, r25
    2a6c:	a0 01       	movw	r20, r0
    2a6e:	11 24       	eor	r1, r1
    2a70:	45 50       	subi	r20, 0x05	; 5
    2a72:	5e 4f       	sbci	r21, 0xFE	; 254
    2a74:	48 5f       	subi	r20, 0xF8	; 248
    2a76:	5f 4f       	sbci	r21, 0xFF	; 255
    2a78:	fa 01       	movw	r30, r20
    2a7a:	84 91       	lpm	r24, Z+
    2a7c:	48 50       	subi	r20, 0x08	; 8
    2a7e:	50 40       	sbci	r21, 0x00	; 0
    2a80:	88 23       	and	r24, r24
    2a82:	c1 f0       	breq	.+48     	; 0x2ab4 <compareSetThreshold+0x5e>
    2a84:	c9 01       	movw	r24, r18
    2a86:	06 96       	adiw	r24, 0x06	; 6
    2a88:	fc 01       	movw	r30, r24
    2a8a:	c5 91       	lpm	r28, Z+
    2a8c:	d4 91       	lpm	r29, Z+
    2a8e:	fa 01       	movw	r30, r20
    2a90:	37 96       	adiw	r30, 0x07	; 7
    2a92:	e4 91       	lpm	r30, Z+
    2a94:	ee 23       	and	r30, r30
    2a96:	19 f0       	breq	.+6      	; 0x2a9e <compareSetThreshold+0x48>
    2a98:	79 83       	std	Y+1, r23	; 0x01
    2a9a:	68 83       	st	Y, r22
    2a9c:	0e c0       	rjmp	.+28     	; 0x2aba <compareSetThreshold+0x64>
    2a9e:	6f 3f       	cpi	r22, 0xFF	; 255
    2aa0:	71 05       	cpc	r23, r1
    2aa2:	31 f0       	breq	.+12     	; 0x2ab0 <compareSetThreshold+0x5a>
    2aa4:	28 f0       	brcs	.+10     	; 0x2ab0 <compareSetThreshold+0x5a>
    2aa6:	8e ef       	ldi	r24, 0xFE	; 254
    2aa8:	0e 94 29 11 	call	0x2252	; 0x2252 <setError>
    2aac:	6f ef       	ldi	r22, 0xFF	; 255
    2aae:	70 e0       	ldi	r23, 0x00	; 0
    2ab0:	68 83       	st	Y, r22
    2ab2:	03 c0       	rjmp	.+6      	; 0x2aba <compareSetThreshold+0x64>
    2ab4:	8d ef       	ldi	r24, 0xFD	; 253
    2ab6:	0e 94 29 11 	call	0x2252	; 0x2252 <setError>
    2aba:	df 91       	pop	r29
    2abc:	cf 91       	pop	r28
    2abe:	08 95       	ret

00002ac0 <_uartSetBaudRate>:
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	19 96       	adiw	r26, 0x09	; 9
    2ac4:	8d 91       	ld	r24, X+
    2ac6:	9c 91       	ld	r25, X
    2ac8:	1a 97       	sbiw	r26, 0x0a	; 10
    2aca:	fc 01       	movw	r30, r24
    2acc:	25 91       	lpm	r18, Z+
    2ace:	34 91       	lpm	r19, Z+
    2ad0:	cd 01       	movw	r24, r26
    2ad2:	f9 01       	movw	r30, r18
    2ad4:	09 95       	icall
    2ad6:	08 95       	ret

00002ad8 <_uartInit>:
    2ad8:	df 92       	push	r13
    2ada:	ef 92       	push	r14
    2adc:	ff 92       	push	r15
    2ade:	0f 93       	push	r16
    2ae0:	1f 93       	push	r17
    2ae2:	cf 93       	push	r28
    2ae4:	df 93       	push	r29
    2ae6:	ec 01       	movw	r28, r24
    2ae8:	7a 01       	movw	r14, r20
    2aea:	8b 01       	movw	r16, r22
    2aec:	df b6       	in	r13, 0x3f	; 63
    2aee:	f8 94       	cli
    2af0:	2d 85       	ldd	r18, Y+13	; 0x0d
    2af2:	3e 85       	ldd	r19, Y+14	; 0x0e
    2af4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2af6:	98 89       	ldd	r25, Y+16	; 0x10
    2af8:	28 17       	cp	r18, r24
    2afa:	39 07       	cpc	r19, r25
    2afc:	11 f0       	breq	.+4      	; 0x2b02 <_uartInit+0x2a>
    2afe:	80 e0       	ldi	r24, 0x00	; 0
    2b00:	01 c0       	rjmp	.+2      	; 0x2b04 <_uartInit+0x2c>
    2b02:	8f ef       	ldi	r24, 0xFF	; 255
    2b04:	8f 8b       	std	Y+23, r24	; 0x17
    2b06:	88 23       	and	r24, r24
    2b08:	81 f0       	breq	.+32     	; 0x2b2a <_uartInit+0x52>
    2b0a:	2d 85       	ldd	r18, Y+13	; 0x0d
    2b0c:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b10:	98 89       	ldd	r25, Y+16	; 0x10
    2b12:	28 17       	cp	r18, r24
    2b14:	39 07       	cpc	r19, r25
    2b16:	21 f0       	breq	.+8      	; 0x2b20 <_uartInit+0x48>
    2b18:	c9 01       	movw	r24, r18
    2b1a:	60 e0       	ldi	r22, 0x00	; 0
    2b1c:	0e 94 a1 11 	call	0x2342	; 0x2342 <pin_make_input>
    2b20:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b22:	98 89       	ldd	r25, Y+16	; 0x10
    2b24:	6f ef       	ldi	r22, 0xFF	; 255
    2b26:	0e 94 a1 11 	call	0x2342	; 0x2342 <pin_make_input>
    2b2a:	88 85       	ldd	r24, Y+8	; 0x08
    2b2c:	81 60       	ori	r24, 0x01	; 1
    2b2e:	88 87       	std	Y+8, r24	; 0x08
    2b30:	88 85       	ldd	r24, Y+8	; 0x08
    2b32:	8b 7f       	andi	r24, 0xFB	; 251
    2b34:	88 87       	std	Y+8, r24	; 0x08
    2b36:	88 85       	ldd	r24, Y+8	; 0x08
    2b38:	8d 7f       	andi	r24, 0xFD	; 253
    2b3a:	88 87       	std	Y+8, r24	; 0x08
    2b3c:	89 85       	ldd	r24, Y+9	; 0x09
    2b3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b40:	04 96       	adiw	r24, 0x04	; 4
    2b42:	fc 01       	movw	r30, r24
    2b44:	25 91       	lpm	r18, Z+
    2b46:	34 91       	lpm	r19, Z+
    2b48:	ce 01       	movw	r24, r28
    2b4a:	b8 01       	movw	r22, r16
    2b4c:	a7 01       	movw	r20, r14
    2b4e:	f9 01       	movw	r30, r18
    2b50:	09 95       	icall
    2b52:	df be       	out	0x3f, r13	; 63
    2b54:	df 91       	pop	r29
    2b56:	cf 91       	pop	r28
    2b58:	1f 91       	pop	r17
    2b5a:	0f 91       	pop	r16
    2b5c:	ff 90       	pop	r15
    2b5e:	ef 90       	pop	r14
    2b60:	df 90       	pop	r13
    2b62:	08 95       	ret

00002b64 <__uartHWSetBaudRate>:
    2b64:	bf 92       	push	r11
    2b66:	cf 92       	push	r12
    2b68:	df 92       	push	r13
    2b6a:	ef 92       	push	r14
    2b6c:	ff 92       	push	r15
    2b6e:	0f 93       	push	r16
    2b70:	1f 93       	push	r17
    2b72:	cf 93       	push	r28
    2b74:	df 93       	push	r29
    2b76:	7a 01       	movw	r14, r20
    2b78:	8b 01       	movw	r16, r22
    2b7a:	ec 01       	movw	r28, r24
    2b7c:	bf b6       	in	r11, 0x3f	; 63
    2b7e:	f8 94       	cli
    2b80:	4f 3f       	cpi	r20, 0xFF	; 255
    2b82:	8f ef       	ldi	r24, 0xFF	; 255
    2b84:	58 07       	cpc	r21, r24
    2b86:	8f ef       	ldi	r24, 0xFF	; 255
    2b88:	68 07       	cpc	r22, r24
    2b8a:	8f ef       	ldi	r24, 0xFF	; 255
    2b8c:	78 07       	cpc	r23, r24
    2b8e:	21 f4       	brne	.+8      	; 0x2b98 <__uartHWSetBaudRate+0x34>
    2b90:	a1 e0       	ldi	r26, 0x01	; 1
    2b92:	ca 2e       	mov	r12, r26
    2b94:	d1 2c       	mov	r13, r1
    2b96:	24 c0       	rjmp	.+72     	; 0x2be0 <__uartHWSetBaudRate+0x7c>
    2b98:	cb 01       	movw	r24, r22
    2b9a:	ba 01       	movw	r22, r20
    2b9c:	f3 e0       	ldi	r31, 0x03	; 3
    2b9e:	66 0f       	add	r22, r22
    2ba0:	77 1f       	adc	r23, r23
    2ba2:	88 1f       	adc	r24, r24
    2ba4:	99 1f       	adc	r25, r25
    2ba6:	fa 95       	dec	r31
    2ba8:	d1 f7       	brne	.-12     	; 0x2b9e <__uartHWSetBaudRate+0x3a>
    2baa:	20 91 c5 03 	lds	r18, 0x03C5
    2bae:	30 91 c6 03 	lds	r19, 0x03C6
    2bb2:	40 91 c7 03 	lds	r20, 0x03C7
    2bb6:	50 91 c8 03 	lds	r21, 0x03C8
    2bba:	62 0f       	add	r22, r18
    2bbc:	73 1f       	adc	r23, r19
    2bbe:	84 1f       	adc	r24, r20
    2bc0:	95 1f       	adc	r25, r21
    2bc2:	a8 01       	movw	r20, r16
    2bc4:	97 01       	movw	r18, r14
    2bc6:	e4 e0       	ldi	r30, 0x04	; 4
    2bc8:	22 0f       	add	r18, r18
    2bca:	33 1f       	adc	r19, r19
    2bcc:	44 1f       	adc	r20, r20
    2bce:	55 1f       	adc	r21, r21
    2bd0:	ea 95       	dec	r30
    2bd2:	d1 f7       	brne	.-12     	; 0x2bc8 <__uartHWSetBaudRate+0x64>
    2bd4:	0e 94 39 21 	call	0x4272	; 0x4272 <__udivmodsi4>
    2bd8:	69 01       	movw	r12, r18
    2bda:	08 94       	sec
    2bdc:	c1 08       	sbc	r12, r1
    2bde:	d1 08       	sbc	r13, r1
    2be0:	98 a9       	ldd	r25, Y+48	; 0x30
    2be2:	99 23       	and	r25, r25
    2be4:	c9 f1       	breq	.+114    	; 0x2c58 <__uartHWSetBaudRate+0xf4>
    2be6:	ec a1       	ldd	r30, Y+36	; 0x24
    2be8:	fd a1       	ldd	r31, Y+37	; 0x25
    2bea:	80 81       	ld	r24, Z
    2bec:	90 95       	com	r25
    2bee:	89 23       	and	r24, r25
    2bf0:	80 83       	st	Z, r24
    2bf2:	8f ef       	ldi	r24, 0xFF	; 255
    2bf4:	e8 16       	cp	r14, r24
    2bf6:	8f ef       	ldi	r24, 0xFF	; 255
    2bf8:	f8 06       	cpc	r15, r24
    2bfa:	8f ef       	ldi	r24, 0xFF	; 255
    2bfc:	08 07       	cpc	r16, r24
    2bfe:	8f ef       	ldi	r24, 0xFF	; 255
    2c00:	18 07       	cpc	r17, r24
    2c02:	19 f4       	brne	.+6      	; 0x2c0a <__uartHWSetBaudRate+0xa6>
    2c04:	21 e0       	ldi	r18, 0x01	; 1
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	1d c0       	rjmp	.+58     	; 0x2c44 <__uartHWSetBaudRate+0xe0>
    2c0a:	32 e0       	ldi	r19, 0x02	; 2
    2c0c:	ee 0c       	add	r14, r14
    2c0e:	ff 1c       	adc	r15, r15
    2c10:	00 1f       	adc	r16, r16
    2c12:	11 1f       	adc	r17, r17
    2c14:	3a 95       	dec	r19
    2c16:	d1 f7       	brne	.-12     	; 0x2c0c <__uartHWSetBaudRate+0xa8>
    2c18:	60 91 c5 03 	lds	r22, 0x03C5
    2c1c:	70 91 c6 03 	lds	r23, 0x03C6
    2c20:	80 91 c7 03 	lds	r24, 0x03C7
    2c24:	90 91 c8 03 	lds	r25, 0x03C8
    2c28:	6e 0d       	add	r22, r14
    2c2a:	7f 1d       	adc	r23, r15
    2c2c:	80 1f       	adc	r24, r16
    2c2e:	91 1f       	adc	r25, r17
    2c30:	ee 0c       	add	r14, r14
    2c32:	ff 1c       	adc	r15, r15
    2c34:	00 1f       	adc	r16, r16
    2c36:	11 1f       	adc	r17, r17
    2c38:	a8 01       	movw	r20, r16
    2c3a:	97 01       	movw	r18, r14
    2c3c:	0e 94 39 21 	call	0x4272	; 0x4272 <__udivmodsi4>
    2c40:	21 50       	subi	r18, 0x01	; 1
    2c42:	30 40       	sbci	r19, 0x00	; 0
    2c44:	2c 15       	cp	r18, r12
    2c46:	3d 05       	cpc	r19, r13
    2c48:	38 f0       	brcs	.+14     	; 0x2c58 <__uartHWSetBaudRate+0xf4>
    2c4a:	ec a1       	ldd	r30, Y+36	; 0x24
    2c4c:	fd a1       	ldd	r31, Y+37	; 0x25
    2c4e:	80 81       	ld	r24, Z
    2c50:	98 a9       	ldd	r25, Y+48	; 0x30
    2c52:	89 2b       	or	r24, r25
    2c54:	80 83       	st	Z, r24
    2c56:	69 01       	movw	r12, r18
    2c58:	e8 a5       	ldd	r30, Y+40	; 0x28
    2c5a:	f9 a5       	ldd	r31, Y+41	; 0x29
    2c5c:	c0 82       	st	Z, r12
    2c5e:	ea a5       	ldd	r30, Y+42	; 0x2a
    2c60:	fb a5       	ldd	r31, Y+43	; 0x2b
    2c62:	d0 82       	st	Z, r13
    2c64:	bf be       	out	0x3f, r11	; 63
    2c66:	df 91       	pop	r29
    2c68:	cf 91       	pop	r28
    2c6a:	1f 91       	pop	r17
    2c6c:	0f 91       	pop	r16
    2c6e:	ff 90       	pop	r15
    2c70:	ef 90       	pop	r14
    2c72:	df 90       	pop	r13
    2c74:	cf 90       	pop	r12
    2c76:	bf 90       	pop	r11
    2c78:	08 95       	ret

00002c7a <__uartHWOff>:
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	96 96       	adiw	r26, 0x26	; 38
    2c7e:	ed 91       	ld	r30, X+
    2c80:	fc 91       	ld	r31, X
    2c82:	97 97       	sbiw	r26, 0x27	; 39
    2c84:	80 81       	ld	r24, Z
    2c86:	87 72       	andi	r24, 0x27	; 39
    2c88:	80 83       	st	Z, r24
    2c8a:	d0 96       	adiw	r26, 0x30	; 48
    2c8c:	9c 91       	ld	r25, X
    2c8e:	d0 97       	sbiw	r26, 0x30	; 48
    2c90:	99 23       	and	r25, r25
    2c92:	41 f0       	breq	.+16     	; 0x2ca4 <__uartHWOff+0x2a>
    2c94:	94 96       	adiw	r26, 0x24	; 36
    2c96:	ed 91       	ld	r30, X+
    2c98:	fc 91       	ld	r31, X
    2c9a:	95 97       	sbiw	r26, 0x25	; 37
    2c9c:	80 81       	ld	r24, Z
    2c9e:	90 95       	com	r25
    2ca0:	89 23       	and	r24, r25
    2ca2:	80 83       	st	Z, r24
    2ca4:	08 95       	ret

00002ca6 <oneWireReceiveMode>:
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	57 96       	adiw	r26, 0x17	; 23
    2caa:	8c 91       	ld	r24, X
    2cac:	57 97       	sbiw	r26, 0x17	; 23
    2cae:	88 23       	and	r24, r24
    2cb0:	71 f0       	breq	.+28     	; 0x2cce <oneWireReceiveMode+0x28>
    2cb2:	96 96       	adiw	r26, 0x26	; 38
    2cb4:	ed 91       	ld	r30, X+
    2cb6:	fc 91       	ld	r31, X
    2cb8:	97 97       	sbiw	r26, 0x27	; 39
    2cba:	80 81       	ld	r24, Z
    2cbc:	87 7b       	andi	r24, 0xB7	; 183
    2cbe:	80 83       	st	Z, r24
    2cc0:	96 96       	adiw	r26, 0x26	; 38
    2cc2:	ed 91       	ld	r30, X+
    2cc4:	fc 91       	ld	r31, X
    2cc6:	97 97       	sbiw	r26, 0x27	; 39
    2cc8:	80 81       	ld	r24, Z
    2cca:	80 69       	ori	r24, 0x90	; 144
    2ccc:	80 83       	st	Z, r24
    2cce:	08 95       	ret

00002cd0 <__uartHWStartXmit>:
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	9c 96       	adiw	r26, 0x2c	; 44
    2cd4:	ed 91       	ld	r30, X+
    2cd6:	fc 91       	ld	r31, X
    2cd8:	9d 97       	sbiw	r26, 0x2d	; 45
    2cda:	60 83       	st	Z, r22
    2cdc:	08 95       	ret

00002cde <startXmitMode>:
    2cde:	dc 01       	movw	r26, r24
    2ce0:	57 96       	adiw	r26, 0x17	; 23
    2ce2:	8c 91       	ld	r24, X
    2ce4:	57 97       	sbiw	r26, 0x17	; 23
    2ce6:	88 23       	and	r24, r24
    2ce8:	71 f0       	breq	.+28     	; 0x2d06 <startXmitMode+0x28>
    2cea:	96 96       	adiw	r26, 0x26	; 38
    2cec:	ed 91       	ld	r30, X+
    2cee:	fc 91       	ld	r31, X
    2cf0:	97 97       	sbiw	r26, 0x27	; 39
    2cf2:	80 81       	ld	r24, Z
    2cf4:	8f 76       	andi	r24, 0x6F	; 111
    2cf6:	80 83       	st	Z, r24
    2cf8:	96 96       	adiw	r26, 0x26	; 38
    2cfa:	ed 91       	ld	r30, X+
    2cfc:	fc 91       	ld	r31, X
    2cfe:	97 97       	sbiw	r26, 0x27	; 39
    2d00:	80 81       	ld	r24, Z
    2d02:	88 64       	ori	r24, 0x48	; 72
    2d04:	80 83       	st	Z, r24
    2d06:	08 95       	ret

00002d08 <__uartHWInit>:
    2d08:	cf 93       	push	r28
    2d0a:	df 93       	push	r29
    2d0c:	ec 01       	movw	r28, r24
    2d0e:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <_uartSetBaudRate>
    2d12:	8f 89       	ldd	r24, Y+23	; 0x17
    2d14:	88 23       	and	r24, r24
    2d16:	11 f0       	breq	.+4      	; 0x2d1c <__uartHWInit+0x14>
    2d18:	20 e9       	ldi	r18, 0x90	; 144
    2d1a:	0c c0       	rjmp	.+24     	; 0x2d34 <__uartHWInit+0x2c>
    2d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d20:	89 2b       	or	r24, r25
    2d22:	11 f0       	breq	.+4      	; 0x2d28 <__uartHWInit+0x20>
    2d24:	20 e9       	ldi	r18, 0x90	; 144
    2d26:	01 c0       	rjmp	.+2      	; 0x2d2a <__uartHWInit+0x22>
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d2c:	98 89       	ldd	r25, Y+16	; 0x10
    2d2e:	89 2b       	or	r24, r25
    2d30:	09 f0       	breq	.+2      	; 0x2d34 <__uartHWInit+0x2c>
    2d32:	28 64       	ori	r18, 0x48	; 72
    2d34:	ee a1       	ldd	r30, Y+38	; 0x26
    2d36:	ff a1       	ldd	r31, Y+39	; 0x27
    2d38:	20 83       	st	Z, r18
    2d3a:	df 91       	pop	r29
    2d3c:	cf 91       	pop	r28
    2d3e:	08 95       	ret

00002d40 <__uartReceiveService>:
    2d40:	dc 01       	movw	r26, r24
    2d42:	26 2f       	mov	r18, r22
    2d44:	14 96       	adiw	r26, 0x04	; 4
    2d46:	8d 91       	ld	r24, X+
    2d48:	9c 91       	ld	r25, X
    2d4a:	15 97       	sbiw	r26, 0x05	; 5
    2d4c:	89 2b       	or	r24, r25
    2d4e:	59 f0       	breq	.+22     	; 0x2d66 <__uartReceiveService+0x26>
    2d50:	14 96       	adiw	r26, 0x04	; 4
    2d52:	ed 91       	ld	r30, X+
    2d54:	fc 91       	ld	r31, X
    2d56:	15 97       	sbiw	r26, 0x05	; 5
    2d58:	16 96       	adiw	r26, 0x06	; 6
    2d5a:	6d 91       	ld	r22, X+
    2d5c:	7c 91       	ld	r23, X
    2d5e:	17 97       	sbiw	r26, 0x07	; 7
    2d60:	82 2f       	mov	r24, r18
    2d62:	09 95       	icall
    2d64:	08 95       	ret
    2d66:	90 96       	adiw	r26, 0x20	; 32
    2d68:	ed 91       	ld	r30, X+
    2d6a:	fc 91       	ld	r31, X
    2d6c:	91 97       	sbiw	r26, 0x21	; 33
    2d6e:	cd 01       	movw	r24, r26
    2d70:	09 95       	icall
    2d72:	08 95       	ret

00002d74 <__uartGetByte>:
    2d74:	fc 01       	movw	r30, r24
    2d76:	22 a1       	ldd	r18, Z+34	; 0x22
    2d78:	33 a1       	ldd	r19, Z+35	; 0x23
    2d7a:	f9 01       	movw	r30, r18
    2d7c:	09 95       	icall
    2d7e:	08 95       	ret

00002d80 <__uartGetByteUnbuffered>:
    2d80:	fc 01       	movw	r30, r24
    2d82:	4f b7       	in	r20, 0x3f	; 63
    2d84:	f8 94       	cli
    2d86:	23 85       	ldd	r18, Z+11	; 0x0b
    2d88:	34 85       	ldd	r19, Z+12	; 0x0c
    2d8a:	8f ef       	ldi	r24, 0xFF	; 255
    2d8c:	9f ef       	ldi	r25, 0xFF	; 255
    2d8e:	94 87       	std	Z+12, r25	; 0x0c
    2d90:	83 87       	std	Z+11, r24	; 0x0b
    2d92:	4f bf       	out	0x3f, r20	; 63
    2d94:	c9 01       	movw	r24, r18
    2d96:	08 95       	ret

00002d98 <__uartReceiveUnbuffered>:
    2d98:	fc 01       	movw	r30, r24
    2d9a:	83 85       	ldd	r24, Z+11	; 0x0b
    2d9c:	94 85       	ldd	r25, Z+12	; 0x0c
    2d9e:	8f 5f       	subi	r24, 0xFF	; 255
    2da0:	9f 4f       	sbci	r25, 0xFF	; 255
    2da2:	29 f4       	brne	.+10     	; 0x2dae <__uartReceiveUnbuffered+0x16>
    2da4:	86 2f       	mov	r24, r22
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	94 87       	std	Z+12, r25	; 0x0c
    2daa:	83 87       	std	Z+11, r24	; 0x0b
    2dac:	08 95       	ret
    2dae:	80 85       	ldd	r24, Z+8	; 0x08
    2db0:	84 60       	ori	r24, 0x04	; 4
    2db2:	80 87       	std	Z+8, r24	; 0x08
    2db4:	85 ef       	ldi	r24, 0xF5	; 245
    2db6:	0e 94 29 11 	call	0x2252	; 0x2252 <setError>
    2dba:	08 95       	ret

00002dbc <_uartStartXmit>:
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	19 96       	adiw	r26, 0x09	; 9
    2dc0:	8d 91       	ld	r24, X+
    2dc2:	9c 91       	ld	r25, X
    2dc4:	1a 97       	sbiw	r26, 0x0a	; 10
    2dc6:	02 96       	adiw	r24, 0x02	; 2
    2dc8:	fc 01       	movw	r30, r24
    2dca:	25 91       	lpm	r18, Z+
    2dcc:	34 91       	lpm	r19, Z+
    2dce:	cd 01       	movw	r24, r26
    2dd0:	f9 01       	movw	r30, r18
    2dd2:	09 95       	icall
    2dd4:	08 95       	ret

00002dd6 <_uartTransmitBlockStart>:
    2dd6:	cf 93       	push	r28
    2dd8:	df 93       	push	r29
    2dda:	ec 01       	movw	r28, r24
    2ddc:	88 85       	ldd	r24, Y+8	; 0x08
    2dde:	8e 7f       	andi	r24, 0xFE	; 254
    2de0:	88 87       	std	Y+8, r24	; 0x08
    2de2:	e8 8d       	ldd	r30, Y+24	; 0x18
    2de4:	f9 8d       	ldd	r31, Y+25	; 0x19
    2de6:	30 97       	sbiw	r30, 0x00	; 0
    2de8:	21 f0       	breq	.+8      	; 0x2df2 <_uartTransmitBlockStart+0x1c>
    2dea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2dec:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2dee:	6f ef       	ldi	r22, 0xFF	; 255
    2df0:	09 95       	icall
    2df2:	e9 85       	ldd	r30, Y+9	; 0x09
    2df4:	fa 85       	ldd	r31, Y+10	; 0x0a
    2df6:	38 96       	adiw	r30, 0x08	; 8
    2df8:	25 91       	lpm	r18, Z+
    2dfa:	34 91       	lpm	r19, Z+
    2dfc:	21 15       	cp	r18, r1
    2dfe:	31 05       	cpc	r19, r1
    2e00:	19 f0       	breq	.+6      	; 0x2e08 <_uartTransmitBlockStart+0x32>
    2e02:	ce 01       	movw	r24, r28
    2e04:	f9 01       	movw	r30, r18
    2e06:	09 95       	icall
    2e08:	df 91       	pop	r29
    2e0a:	cf 91       	pop	r28
    2e0c:	08 95       	ret

00002e0e <_uartTransmitBlockEnd>:
    2e0e:	cf 93       	push	r28
    2e10:	df 93       	push	r29
    2e12:	ec 01       	movw	r28, r24
    2e14:	88 85       	ldd	r24, Y+8	; 0x08
    2e16:	81 60       	ori	r24, 0x01	; 1
    2e18:	88 87       	std	Y+8, r24	; 0x08
    2e1a:	e9 85       	ldd	r30, Y+9	; 0x09
    2e1c:	fa 85       	ldd	r31, Y+10	; 0x0a
    2e1e:	3a 96       	adiw	r30, 0x0a	; 10
    2e20:	25 91       	lpm	r18, Z+
    2e22:	34 91       	lpm	r19, Z+
    2e24:	21 15       	cp	r18, r1
    2e26:	31 05       	cpc	r19, r1
    2e28:	19 f0       	breq	.+6      	; 0x2e30 <_uartTransmitBlockEnd+0x22>
    2e2a:	ce 01       	movw	r24, r28
    2e2c:	f9 01       	movw	r30, r18
    2e2e:	09 95       	icall
    2e30:	e8 8d       	ldd	r30, Y+24	; 0x18
    2e32:	f9 8d       	ldd	r31, Y+25	; 0x19
    2e34:	30 97       	sbiw	r30, 0x00	; 0
    2e36:	21 f0       	breq	.+8      	; 0x2e40 <_uartTransmitBlockEnd+0x32>
    2e38:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e3a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e3c:	60 e0       	ldi	r22, 0x00	; 0
    2e3e:	09 95       	icall
    2e40:	df 91       	pop	r29
    2e42:	cf 91       	pop	r28
    2e44:	08 95       	ret

00002e46 <_uartSendBuffer>:
    2e46:	ef 92       	push	r14
    2e48:	ff 92       	push	r15
    2e4a:	0f 93       	push	r16
    2e4c:	1f 93       	push	r17
    2e4e:	cf 93       	push	r28
    2e50:	df 93       	push	r29
    2e52:	8c 01       	movw	r16, r24
    2e54:	7b 01       	movw	r14, r22
    2e56:	ea 01       	movw	r28, r20
    2e58:	0b c0       	rjmp	.+22     	; 0x2e70 <_uartSendBuffer+0x2a>
    2e5a:	d7 01       	movw	r26, r14
    2e5c:	6d 91       	ld	r22, X+
    2e5e:	7d 01       	movw	r14, r26
    2e60:	d8 01       	movw	r26, r16
    2e62:	5c 96       	adiw	r26, 0x1c	; 28
    2e64:	ed 91       	ld	r30, X+
    2e66:	fc 91       	ld	r31, X
    2e68:	5d 97       	sbiw	r26, 0x1d	; 29
    2e6a:	c8 01       	movw	r24, r16
    2e6c:	09 95       	icall
    2e6e:	21 97       	sbiw	r28, 0x01	; 1
    2e70:	20 97       	sbiw	r28, 0x00	; 0
    2e72:	99 f7       	brne	.-26     	; 0x2e5a <_uartSendBuffer+0x14>
    2e74:	df 91       	pop	r29
    2e76:	cf 91       	pop	r28
    2e78:	1f 91       	pop	r17
    2e7a:	0f 91       	pop	r16
    2e7c:	ff 90       	pop	r15
    2e7e:	ef 90       	pop	r14
    2e80:	08 95       	ret

00002e82 <_uartSendByte>:
    2e82:	1f 93       	push	r17
    2e84:	fc 01       	movw	r30, r24
    2e86:	16 2f       	mov	r17, r22
    2e88:	24 8d       	ldd	r18, Z+28	; 0x1c
    2e8a:	35 8d       	ldd	r19, Z+29	; 0x1d
    2e8c:	f9 01       	movw	r30, r18
    2e8e:	09 95       	icall
    2e90:	81 2f       	mov	r24, r17
    2e92:	1f 91       	pop	r17
    2e94:	08 95       	ret

00002e96 <__uartTransmitService>:
    2e96:	fc 01       	movw	r30, r24
    2e98:	26 8d       	ldd	r18, Z+30	; 0x1e
    2e9a:	37 8d       	ldd	r19, Z+31	; 0x1f
    2e9c:	f9 01       	movw	r30, r18
    2e9e:	09 95       	icall
    2ea0:	08 95       	ret

00002ea2 <__uartSendNextUnbuffered>:
    2ea2:	1f 93       	push	r17
    2ea4:	1f b7       	in	r17, 0x3f	; 63
    2ea6:	f8 94       	cli
    2ea8:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <_uartTransmitBlockEnd>
    2eac:	1f bf       	out	0x3f, r17	; 63
    2eae:	1f 91       	pop	r17
    2eb0:	08 95       	ret

00002eb2 <__uartSendUnbuffered>:
    2eb2:	0f 93       	push	r16
    2eb4:	1f 93       	push	r17
    2eb6:	cf 93       	push	r28
    2eb8:	df 93       	push	r29
    2eba:	06 2f       	mov	r16, r22
    2ebc:	ec 01       	movw	r28, r24
    2ebe:	02 c0       	rjmp	.+4      	; 0x2ec4 <__uartSendUnbuffered+0x12>
    2ec0:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <breathe>
    2ec4:	88 85       	ldd	r24, Y+8	; 0x08
    2ec6:	80 ff       	sbrs	r24, 0
    2ec8:	fb cf       	rjmp	.-10     	; 0x2ec0 <__uartSendUnbuffered+0xe>
    2eca:	1f b7       	in	r17, 0x3f	; 63
    2ecc:	f8 94       	cli
    2ece:	ce 01       	movw	r24, r28
    2ed0:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <_uartTransmitBlockStart>
    2ed4:	ce 01       	movw	r24, r28
    2ed6:	60 2f       	mov	r22, r16
    2ed8:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <_uartStartXmit>
    2edc:	1f bf       	out	0x3f, r17	; 63
    2ede:	df 91       	pop	r29
    2ee0:	cf 91       	pop	r28
    2ee2:	1f 91       	pop	r17
    2ee4:	0f 91       	pop	r16
    2ee6:	08 95       	ret

00002ee8 <uartReceivePollingMode>:
    2ee8:	dc 01       	movw	r26, r24
    2eea:	96 96       	adiw	r26, 0x26	; 38
    2eec:	ed 91       	ld	r30, X+
    2eee:	fc 91       	ld	r31, X
    2ef0:	97 97       	sbiw	r26, 0x27	; 39
    2ef2:	66 23       	and	r22, r22
    2ef4:	19 f0       	breq	.+6      	; 0x2efc <uartReceivePollingMode+0x14>
    2ef6:	80 81       	ld	r24, Z
    2ef8:	8f 77       	andi	r24, 0x7F	; 127
    2efa:	02 c0       	rjmp	.+4      	; 0x2f00 <uartReceivePollingMode+0x18>
    2efc:	80 81       	ld	r24, Z
    2efe:	80 68       	ori	r24, 0x80	; 128
    2f00:	80 83       	st	Z, r24
    2f02:	08 95       	ret

00002f04 <uartPollByte>:
    2f04:	dc 01       	movw	r26, r24
    2f06:	94 96       	adiw	r26, 0x24	; 36
    2f08:	ed 91       	ld	r30, X+
    2f0a:	fc 91       	ld	r31, X
    2f0c:	95 97       	sbiw	r26, 0x25	; 37
    2f0e:	80 81       	ld	r24, Z
    2f10:	87 fd       	sbrc	r24, 7
    2f12:	03 c0       	rjmp	.+6      	; 0x2f1a <uartPollByte+0x16>
    2f14:	2f ef       	ldi	r18, 0xFF	; 255
    2f16:	3f ef       	ldi	r19, 0xFF	; 255
    2f18:	07 c0       	rjmp	.+14     	; 0x2f28 <uartPollByte+0x24>
    2f1a:	9c 96       	adiw	r26, 0x2c	; 44
    2f1c:	ed 91       	ld	r30, X+
    2f1e:	fc 91       	ld	r31, X
    2f20:	9d 97       	sbiw	r26, 0x2d	; 45
    2f22:	80 81       	ld	r24, Z
    2f24:	28 2f       	mov	r18, r24
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	c9 01       	movw	r24, r18
    2f2a:	08 95       	ret

00002f2c <clockHasElapsed>:
    2f2c:	0f 93       	push	r16
    2f2e:	1f 93       	push	r17
    2f30:	00 e0       	ldi	r16, 0x00	; 0
    2f32:	10 e0       	ldi	r17, 0x00	; 0
    2f34:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <clockHasElapsedGetOverflow>
    2f38:	1f 91       	pop	r17
    2f3a:	0f 91       	pop	r16
    2f3c:	08 95       	ret

00002f3e <clockHasElapsedGetOverflow>:
    2f3e:	8f 92       	push	r8
    2f40:	9f 92       	push	r9
    2f42:	af 92       	push	r10
    2f44:	bf 92       	push	r11
    2f46:	cf 92       	push	r12
    2f48:	df 92       	push	r13
    2f4a:	ef 92       	push	r14
    2f4c:	ff 92       	push	r15
    2f4e:	0f 93       	push	r16
    2f50:	1f 93       	push	r17
    2f52:	cf 93       	push	r28
    2f54:	df 93       	push	r29
    2f56:	6b 01       	movw	r12, r22
    2f58:	7c 01       	movw	r14, r24
    2f5a:	49 01       	movw	r8, r18
    2f5c:	5a 01       	movw	r10, r20
    2f5e:	e8 01       	movw	r28, r16
    2f60:	0e 94 1f 0b 	call	0x163e	; 0x163e <clockGetus>
    2f64:	6c 19       	sub	r22, r12
    2f66:	7d 09       	sbc	r23, r13
    2f68:	8e 09       	sbc	r24, r14
    2f6a:	9f 09       	sbc	r25, r15
    2f6c:	68 15       	cp	r22, r8
    2f6e:	79 05       	cpc	r23, r9
    2f70:	8a 05       	cpc	r24, r10
    2f72:	9b 05       	cpc	r25, r11
    2f74:	68 f0       	brcs	.+26     	; 0x2f90 <clockHasElapsedGetOverflow+0x52>
    2f76:	01 15       	cp	r16, r1
    2f78:	11 05       	cpc	r17, r1
    2f7a:	41 f0       	breq	.+16     	; 0x2f8c <clockHasElapsedGetOverflow+0x4e>
    2f7c:	68 19       	sub	r22, r8
    2f7e:	79 09       	sbc	r23, r9
    2f80:	8a 09       	sbc	r24, r10
    2f82:	9b 09       	sbc	r25, r11
    2f84:	68 83       	st	Y, r22
    2f86:	79 83       	std	Y+1, r23	; 0x01
    2f88:	8a 83       	std	Y+2, r24	; 0x02
    2f8a:	9b 83       	std	Y+3, r25	; 0x03
    2f8c:	8f ef       	ldi	r24, 0xFF	; 255
    2f8e:	0c c0       	rjmp	.+24     	; 0x2fa8 <clockHasElapsedGetOverflow+0x6a>
    2f90:	01 15       	cp	r16, r1
    2f92:	11 05       	cpc	r17, r1
    2f94:	41 f0       	breq	.+16     	; 0x2fa6 <clockHasElapsedGetOverflow+0x68>
    2f96:	86 1a       	sub	r8, r22
    2f98:	97 0a       	sbc	r9, r23
    2f9a:	a8 0a       	sbc	r10, r24
    2f9c:	b9 0a       	sbc	r11, r25
    2f9e:	88 82       	st	Y, r8
    2fa0:	99 82       	std	Y+1, r9	; 0x01
    2fa2:	aa 82       	std	Y+2, r10	; 0x02
    2fa4:	bb 82       	std	Y+3, r11	; 0x03
    2fa6:	80 e0       	ldi	r24, 0x00	; 0
    2fa8:	df 91       	pop	r29
    2faa:	cf 91       	pop	r28
    2fac:	1f 91       	pop	r17
    2fae:	0f 91       	pop	r16
    2fb0:	ff 90       	pop	r15
    2fb2:	ef 90       	pop	r14
    2fb4:	df 90       	pop	r13
    2fb6:	cf 90       	pop	r12
    2fb8:	bf 90       	pop	r11
    2fba:	af 90       	pop	r10
    2fbc:	9f 90       	pop	r9
    2fbe:	8f 90       	pop	r8
    2fc0:	08 95       	ret

00002fc2 <breathe>:
    2fc2:	8f b7       	in	r24, 0x3f	; 63
    2fc4:	78 94       	sei
	...
    2fd2:	00 00       	nop
    2fd4:	8f bf       	out	0x3f, r24	; 63
    2fd6:	08 95       	ret

00002fd8 <pin_low>:
    2fd8:	cf 93       	push	r28
    2fda:	df 93       	push	r29
    2fdc:	9c 01       	movw	r18, r24
    2fde:	00 97       	sbiw	r24, 0x00	; 0
    2fe0:	e9 f0       	breq	.+58     	; 0x301c <pin_low+0x44>
    2fe2:	fc 01       	movw	r30, r24
    2fe4:	85 91       	lpm	r24, Z+
    2fe6:	94 91       	lpm	r25, Z+
    2fe8:	fc 01       	movw	r30, r24
    2fea:	a5 91       	lpm	r26, Z+
    2fec:	b4 91       	lpm	r27, Z+
    2fee:	02 96       	adiw	r24, 0x02	; 2
    2ff0:	fc 01       	movw	r30, r24
    2ff2:	c5 91       	lpm	r28, Z+
    2ff4:	d4 91       	lpm	r29, Z+
    2ff6:	2e 5f       	subi	r18, 0xFE	; 254
    2ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    2ffa:	f9 01       	movw	r30, r18
    2ffc:	24 91       	lpm	r18, Z+
    2ffe:	88 81       	ld	r24, Y
    3000:	82 23       	and	r24, r18
    3002:	49 f0       	breq	.+18     	; 0x3016 <pin_low+0x3e>
    3004:	9f b7       	in	r25, 0x3f	; 63
    3006:	f8 94       	cli
    3008:	8c 91       	ld	r24, X
    300a:	20 95       	com	r18
    300c:	82 23       	and	r24, r18
    300e:	8c 93       	st	X, r24
    3010:	9f bf       	out	0x3f, r25	; 63
    3012:	00 00       	nop
    3014:	03 c0       	rjmp	.+6      	; 0x301c <pin_low+0x44>
    3016:	87 ef       	ldi	r24, 0xF7	; 247
    3018:	0e 94 29 11 	call	0x2252	; 0x2252 <setError>
    301c:	df 91       	pop	r29
    301e:	cf 91       	pop	r28
    3020:	08 95       	ret

00003022 <pin_high>:
    3022:	cf 93       	push	r28
    3024:	df 93       	push	r29
    3026:	9c 01       	movw	r18, r24
    3028:	00 97       	sbiw	r24, 0x00	; 0
    302a:	e1 f0       	breq	.+56     	; 0x3064 <pin_high+0x42>
    302c:	fc 01       	movw	r30, r24
    302e:	85 91       	lpm	r24, Z+
    3030:	94 91       	lpm	r25, Z+
    3032:	fc 01       	movw	r30, r24
    3034:	a5 91       	lpm	r26, Z+
    3036:	b4 91       	lpm	r27, Z+
    3038:	02 96       	adiw	r24, 0x02	; 2
    303a:	fc 01       	movw	r30, r24
    303c:	c5 91       	lpm	r28, Z+
    303e:	d4 91       	lpm	r29, Z+
    3040:	2e 5f       	subi	r18, 0xFE	; 254
    3042:	3f 4f       	sbci	r19, 0xFF	; 255
    3044:	f9 01       	movw	r30, r18
    3046:	24 91       	lpm	r18, Z+
    3048:	88 81       	ld	r24, Y
    304a:	82 23       	and	r24, r18
    304c:	41 f0       	breq	.+16     	; 0x305e <pin_high+0x3c>
    304e:	9f b7       	in	r25, 0x3f	; 63
    3050:	f8 94       	cli
    3052:	8c 91       	ld	r24, X
    3054:	82 2b       	or	r24, r18
    3056:	8c 93       	st	X, r24
    3058:	9f bf       	out	0x3f, r25	; 63
    305a:	00 00       	nop
    305c:	03 c0       	rjmp	.+6      	; 0x3064 <pin_high+0x42>
    305e:	87 ef       	ldi	r24, 0xF7	; 247
    3060:	0e 94 29 11 	call	0x2252	; 0x2252 <setError>
    3064:	df 91       	pop	r29
    3066:	cf 91       	pop	r28
    3068:	08 95       	ret

0000306a <pin_set>:
    306a:	66 23       	and	r22, r22
    306c:	19 f0       	breq	.+6      	; 0x3074 <pin_set+0xa>
    306e:	0e 94 11 18 	call	0x3022	; 0x3022 <pin_high>
    3072:	08 95       	ret
    3074:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <pin_low>
    3078:	08 95       	ret

0000307a <__scheduleUpdate>:
	uint16_t rtn = MIN(ticks,CLOCK_TOP);
	return rtn;
}

// called under compare interrupts when there is something in the queue
static void __scheduleUpdate(void){
    307a:	2f 92       	push	r2
    307c:	3f 92       	push	r3
    307e:	4f 92       	push	r4
    3080:	5f 92       	push	r5
    3082:	6f 92       	push	r6
    3084:	7f 92       	push	r7
    3086:	8f 92       	push	r8
    3088:	9f 92       	push	r9
    308a:	af 92       	push	r10
    308c:	bf 92       	push	r11
    308e:	cf 92       	push	r12
    3090:	df 92       	push	r13
    3092:	ef 92       	push	r14
    3094:	ff 92       	push	r15
    3096:	0f 93       	push	r16
    3098:	1f 93       	push	r17
    309a:	df 93       	push	r29
    309c:	cf 93       	push	r28
    309e:	cd b7       	in	r28, 0x3d	; 61
    30a0:	de b7       	in	r29, 0x3e	; 62
    30a2:	27 97       	sbiw	r28, 0x07	; 7
    30a4:	0f b6       	in	r0, 0x3f	; 63
    30a6:	f8 94       	cli
    30a8:	de bf       	out	0x3e, r29	; 62
    30aa:	0f be       	out	0x3f, r0	; 63
    30ac:	cd bf       	out	0x3d, r28	; 61
	// Dont call me again - turn off compare interrupts
	SCHEDULER_INT_DISABLE;
    30ae:	80 91 6e 00 	lds	r24, 0x006E
    30b2:	8b 7f       	andi	r24, 0xFB	; 251
    30b4:	80 93 6e 00 	sts	0x006E, r24

	// Turn interrupts back on
	INTERRUPTABLE_SECTION{
    30b8:	2f b7       	in	r18, 0x3f	; 63
    30ba:	2f 83       	std	Y+7, r18	; 0x07
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
    30bc:	78 94       	sei
		__running = TRUE;
    30be:	8f ef       	ldi	r24, 0xFF	; 255
    30c0:	80 93 31 08 	sts	0x0831, r24
		TICK_COUNT lowest;
		do{
			int slot;
			__recheck = FALSE;
    30c4:	10 92 32 08 	sts	0x0832, r1
			JOB* job;
			lowest=0;
			for(slot=maxJobs-1, job=&__queue[slot]; slot>=0; slot--, job--){
    30c8:	80 91 7f 05 	lds	r24, 0x057F
    30cc:	48 2f       	mov	r20, r24
    30ce:	50 e0       	ldi	r21, 0x00	; 0
    30d0:	41 50       	subi	r20, 0x01	; 1
    30d2:	50 40       	sbci	r21, 0x00	; 0
    30d4:	5e 83       	std	Y+6, r21	; 0x06
    30d6:	4d 83       	std	Y+5, r20	; 0x05
    30d8:	8d e0       	ldi	r24, 0x0D	; 13
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	48 9f       	mul	r20, r24
    30de:	50 01       	movw	r10, r0
    30e0:	49 9f       	mul	r20, r25
    30e2:	b0 0c       	add	r11, r0
    30e4:	58 9f       	mul	r21, r24
    30e6:	b0 0c       	add	r11, r0
    30e8:	11 24       	eor	r1, r1
    30ea:	a4 e2       	ldi	r26, 0x24	; 36
    30ec:	b8 e0       	ldi	r27, 0x08	; 8
    30ee:	aa 0e       	add	r10, r26
    30f0:	bb 1e       	adc	r11, r27
    30f2:	66 24       	eor	r6, r6
    30f4:	77 24       	eor	r7, r7
    30f6:	43 01       	movw	r8, r6
    30f8:	56 c0       	rjmp	.+172    	; 0x31a6 <__scheduleUpdate+0x12c>
				if(job->used){
    30fa:	f5 01       	movw	r30, r10
    30fc:	80 81       	ld	r24, Z
    30fe:	88 23       	and	r24, r24
    3100:	09 f4       	brne	.+2      	; 0x3104 <__scheduleUpdate+0x8a>
    3102:	48 c0       	rjmp	.+144    	; 0x3194 <__scheduleUpdate+0x11a>
					// check if time has elapsed
					TICK_COUNT overflow;	// how many us the timer has overshot when it should have happened
					TICK_COUNT start=job->start;
    3104:	21 84       	ldd	r2, Z+9	; 0x09
    3106:	32 84       	ldd	r3, Z+10	; 0x0a
    3108:	43 84       	ldd	r4, Z+11	; 0x0b
    310a:	54 84       	ldd	r5, Z+12	; 0x0c
					TICK_COUNT delay=job->delay;
    310c:	c5 80       	ldd	r12, Z+5	; 0x05
    310e:	d6 80       	ldd	r13, Z+6	; 0x06
    3110:	e7 80       	ldd	r14, Z+7	; 0x07
    3112:	f0 84       	ldd	r15, Z+8	; 0x08
					if(clockHasElapsedGetOverflow(start, delay, &overflow)){
    3114:	c2 01       	movw	r24, r4
    3116:	b1 01       	movw	r22, r2
    3118:	a7 01       	movw	r20, r14
    311a:	96 01       	movw	r18, r12
    311c:	8e 01       	movw	r16, r28
    311e:	0f 5f       	subi	r16, 0xFF	; 255
    3120:	1f 4f       	sbci	r17, 0xFF	; 255
    3122:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <clockHasElapsedGetOverflow>
    3126:	88 23       	and	r24, r24
    3128:	19 f1       	breq	.+70     	; 0x3170 <__scheduleUpdate+0xf6>
						SchedulerCallback callback = job->callback;
    312a:	d5 01       	movw	r26, r10
    312c:	11 96       	adiw	r26, 0x01	; 1
    312e:	ed 91       	ld	r30, X+
    3130:	fc 91       	ld	r31, X
    3132:	12 97       	sbiw	r26, 0x02	; 2
						SchedulerData data = job->data;
    3134:	13 96       	adiw	r26, 0x03	; 3
    3136:	8d 91       	ld	r24, X+
    3138:	9c 91       	ld	r25, X
    313a:	14 97       	sbiw	r26, 0x04	; 4

						// Mark this job as unused. No more references shoud be made to job->xxxx
						job->used = FALSE;
    313c:	1c 92       	st	X, r1
						--__numJobs;
    313e:	20 91 33 08 	lds	r18, 0x0833
    3142:	30 91 34 08 	lds	r19, 0x0834
    3146:	21 50       	subi	r18, 0x01	; 1
    3148:	30 40       	sbci	r19, 0x00	; 0
    314a:	30 93 34 08 	sts	0x0834, r19
    314e:	20 93 33 08 	sts	0x0833, r18

						// Run the job with interrupts enabled
						callback(data,start+delay,overflow);
    3152:	c2 0c       	add	r12, r2
    3154:	d3 1c       	adc	r13, r3
    3156:	e4 1c       	adc	r14, r4
    3158:	f5 1c       	adc	r15, r5
    315a:	09 81       	ldd	r16, Y+1	; 0x01
    315c:	1a 81       	ldd	r17, Y+2	; 0x02
    315e:	2b 81       	ldd	r18, Y+3	; 0x03
    3160:	3c 81       	ldd	r19, Y+4	; 0x04
    3162:	b7 01       	movw	r22, r14
    3164:	a6 01       	movw	r20, r12
    3166:	09 95       	icall


						// Force another loop as the time taken may mean
						// something else can now run
						__recheck = TRUE;
    3168:	bf ef       	ldi	r27, 0xFF	; 255
    316a:	b0 93 32 08 	sts	0x0832, r27
    316e:	12 c0       	rjmp	.+36     	; 0x3194 <__scheduleUpdate+0x11a>
					}else{
					   // overflow has the remaining number of microseconds to wait
					   if(lowest==0 || overflow < lowest){
    3170:	61 14       	cp	r6, r1
    3172:	71 04       	cpc	r7, r1
    3174:	81 04       	cpc	r8, r1
    3176:	91 04       	cpc	r9, r1
    3178:	49 f0       	breq	.+18     	; 0x318c <__scheduleUpdate+0x112>
    317a:	89 81       	ldd	r24, Y+1	; 0x01
    317c:	9a 81       	ldd	r25, Y+2	; 0x02
    317e:	ab 81       	ldd	r26, Y+3	; 0x03
    3180:	bc 81       	ldd	r27, Y+4	; 0x04
    3182:	86 15       	cp	r24, r6
    3184:	97 05       	cpc	r25, r7
    3186:	a8 05       	cpc	r26, r8
    3188:	b9 05       	cpc	r27, r9
    318a:	20 f4       	brcc	.+8      	; 0x3194 <__scheduleUpdate+0x11a>
						   lowest = overflow;
    318c:	69 80       	ldd	r6, Y+1	; 0x01
    318e:	7a 80       	ldd	r7, Y+2	; 0x02
    3190:	8b 80       	ldd	r8, Y+3	; 0x03
    3192:	9c 80       	ldd	r9, Y+4	; 0x04
		do{
			int slot;
			__recheck = FALSE;
			JOB* job;
			lowest=0;
			for(slot=maxJobs-1, job=&__queue[slot]; slot>=0; slot--, job--){
    3194:	ed 81       	ldd	r30, Y+5	; 0x05
    3196:	fe 81       	ldd	r31, Y+6	; 0x06
    3198:	31 97       	sbiw	r30, 0x01	; 1
    319a:	fe 83       	std	Y+6, r31	; 0x06
    319c:	ed 83       	std	Y+5, r30	; 0x05
    319e:	23 ef       	ldi	r18, 0xF3	; 243
    31a0:	3f ef       	ldi	r19, 0xFF	; 255
    31a2:	a2 0e       	add	r10, r18
    31a4:	b3 1e       	adc	r11, r19
    31a6:	4d 81       	ldd	r20, Y+5	; 0x05
    31a8:	5e 81       	ldd	r21, Y+6	; 0x06
    31aa:	4f 5f       	subi	r20, 0xFF	; 255
    31ac:	5f 4f       	sbci	r21, 0xFF	; 255
    31ae:	09 f0       	breq	.+2      	; 0x31b2 <__scheduleUpdate+0x138>
    31b0:	a4 cf       	rjmp	.-184    	; 0x30fa <__scheduleUpdate+0x80>
						   lowest = overflow;
					   }
					}
				}
			}
		}while( __recheck);
    31b2:	80 91 32 08 	lds	r24, 0x0832
    31b6:	88 23       	and	r24, r24
    31b8:	09 f0       	breq	.+2      	; 0x31bc <__scheduleUpdate+0x142>
    31ba:	84 cf       	rjmp	.-248    	; 0x30c4 <__scheduleUpdate+0x4a>
		__running=FALSE;
    31bc:	10 92 31 08 	sts	0x0831, r1

		if(__numJobs > 0){
    31c0:	80 91 33 08 	lds	r24, 0x0833
    31c4:	90 91 34 08 	lds	r25, 0x0834
    31c8:	18 16       	cp	r1, r24
    31ca:	19 06       	cpc	r1, r25
    31cc:	d4 f4       	brge	.+52     	; 0x3202 <__scheduleUpdate+0x188>
			// Decide when we need to interrupt again
			uint16_t compare = calcTicks(lowest) + CLOCK_COUNTER;
    31ce:	26 b5       	in	r18, 0x26	; 38
    31d0:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t rtn = MIN(ticks,CLOCK_TOP);
	return rtn;
}

// called under compare interrupts when there is something in the queue
static void __scheduleUpdate(void){
    31d2:	c9 01       	movw	r24, r18
    31d4:	6a ef       	ldi	r22, 0xFA	; 250
    31d6:	70 e0       	ldi	r23, 0x00	; 0
    31d8:	0e 94 25 21 	call	0x424a	; 0x424a <__udivmodhi4>
    31dc:	86 e0       	ldi	r24, 0x06	; 6
    31de:	9f ef       	ldi	r25, 0xFF	; 255
    31e0:	dc 01       	movw	r26, r24
    31e2:	6a 9f       	mul	r22, r26
    31e4:	c0 01       	movw	r24, r0
    31e6:	6b 9f       	mul	r22, r27
    31e8:	90 0d       	add	r25, r0
    31ea:	7a 9f       	mul	r23, r26
    31ec:	90 0d       	add	r25, r0
    31ee:	11 24       	eor	r1, r1
			uint16_t compare = calcTicks(lowest) + CLOCK_COUNTER;
			while(compare >= CLOCK_TOP){
				compare -= CLOCK_TOP;
			}
			// Set when next interrupt should occur
			SCHEDULER_THRESHOLD = compare;
    31f0:	82 0f       	add	r24, r18
    31f2:	93 1f       	adc	r25, r19
    31f4:	88 bd       	out	0x28, r24	; 40
			// Clear any pending interrupt
			SCHEDULER_INT_CLEAR;
    31f6:	aa 9a       	sbi	0x15, 2	; 21
			// Look for new interrupts
			SCHEDULER_INT_ENABLE;
    31f8:	80 91 6e 00 	lds	r24, 0x006E
    31fc:	84 60       	ori	r24, 0x04	; 4
    31fe:	80 93 6e 00 	sts	0x006E, r24
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
    3202:	bf 81       	ldd	r27, Y+7	; 0x07
    3204:	bf bf       	out	0x3f, r27	; 63
		}

	} // Restore previous interrupt enable
}
    3206:	27 96       	adiw	r28, 0x07	; 7
    3208:	0f b6       	in	r0, 0x3f	; 63
    320a:	f8 94       	cli
    320c:	de bf       	out	0x3e, r29	; 62
    320e:	0f be       	out	0x3f, r0	; 63
    3210:	cd bf       	out	0x3d, r28	; 61
    3212:	cf 91       	pop	r28
    3214:	df 91       	pop	r29
    3216:	1f 91       	pop	r17
    3218:	0f 91       	pop	r16
    321a:	ff 90       	pop	r15
    321c:	ef 90       	pop	r14
    321e:	df 90       	pop	r13
    3220:	cf 90       	pop	r12
    3222:	bf 90       	pop	r11
    3224:	af 90       	pop	r10
    3226:	9f 90       	pop	r9
    3228:	8f 90       	pop	r8
    322a:	7f 90       	pop	r7
    322c:	6f 90       	pop	r6
    322e:	5f 90       	pop	r5
    3230:	4f 90       	pop	r4
    3232:	3f 90       	pop	r3
    3234:	2f 90       	pop	r2
    3236:	08 95       	ret

00003238 <__vector_22>:
}



// ISR for scheduler match - check if another job needs to run
ISR(TIMER0_COMPB_vect) {
    3238:	1f 92       	push	r1
    323a:	0f 92       	push	r0
    323c:	0f b6       	in	r0, 0x3f	; 63
    323e:	0f 92       	push	r0
    3240:	11 24       	eor	r1, r1
    3242:	2f 93       	push	r18
    3244:	3f 93       	push	r19
    3246:	4f 93       	push	r20
    3248:	5f 93       	push	r21
    324a:	6f 93       	push	r22
    324c:	7f 93       	push	r23
    324e:	8f 93       	push	r24
    3250:	9f 93       	push	r25
    3252:	af 93       	push	r26
    3254:	bf 93       	push	r27
    3256:	ef 93       	push	r30
    3258:	ff 93       	push	r31
	__scheduleUpdate();
    325a:	0e 94 3d 18 	call	0x307a	; 0x307a <__scheduleUpdate>
}
    325e:	ff 91       	pop	r31
    3260:	ef 91       	pop	r30
    3262:	bf 91       	pop	r27
    3264:	af 91       	pop	r26
    3266:	9f 91       	pop	r25
    3268:	8f 91       	pop	r24
    326a:	7f 91       	pop	r23
    326c:	6f 91       	pop	r22
    326e:	5f 91       	pop	r21
    3270:	4f 91       	pop	r20
    3272:	3f 91       	pop	r19
    3274:	2f 91       	pop	r18
    3276:	0f 90       	pop	r0
    3278:	0f be       	out	0x3f, r0	; 63
    327a:	0f 90       	pop	r0
    327c:	1f 90       	pop	r1
    327e:	18 95       	reti

00003280 <scheduleJob>:
// schedule a new job
// callback Is the function to be run at a later date
// data is a block of data to be passed into the callback
// start (in us) Is the start time of the delay
// delay (in us) Is the amount to delay by
void scheduleJob(SchedulerCallback callback, SchedulerData data, TICK_COUNT start, TICK_COUNT delay){
    3280:	2f 92       	push	r2
    3282:	3f 92       	push	r3
    3284:	4f 92       	push	r4
    3286:	5f 92       	push	r5
    3288:	6f 92       	push	r6
    328a:	7f 92       	push	r7
    328c:	8f 92       	push	r8
    328e:	9f 92       	push	r9
    3290:	af 92       	push	r10
    3292:	bf 92       	push	r11
    3294:	cf 92       	push	r12
    3296:	df 92       	push	r13
    3298:	ef 92       	push	r14
    329a:	ff 92       	push	r15
    329c:	0f 93       	push	r16
    329e:	1f 93       	push	r17
    32a0:	df 93       	push	r29
    32a2:	cf 93       	push	r28
    32a4:	00 d0       	rcall	.+0      	; 0x32a6 <scheduleJob+0x26>
    32a6:	00 d0       	rcall	.+0      	; 0x32a8 <scheduleJob+0x28>
    32a8:	cd b7       	in	r28, 0x3d	; 61
    32aa:	de b7       	in	r29, 0x3e	; 62
    32ac:	1c 01       	movw	r2, r24
    32ae:	2b 01       	movw	r4, r22
    32b0:	49 01       	movw	r8, r18
    32b2:	5a 01       	movw	r10, r20
    32b4:	67 01       	movw	r12, r14
    32b6:	78 01       	movw	r14, r16
	boolean doItNow = FALSE;

 	if(delay < 1000U){
    32b8:	88 ee       	ldi	r24, 0xE8	; 232
    32ba:	c8 16       	cp	r12, r24
    32bc:	83 e0       	ldi	r24, 0x03	; 3
    32be:	d8 06       	cpc	r13, r24
    32c0:	80 e0       	ldi	r24, 0x00	; 0
    32c2:	e8 06       	cpc	r14, r24
    32c4:	80 e0       	ldi	r24, 0x00	; 0
    32c6:	f8 06       	cpc	r15, r24
    32c8:	38 f4       	brcc	.+14     	; 0x32d8 <scheduleJob+0x58>
		// it needs to happen now as the delay is less than the heartbeat timer interrupt of 1ms
		if(__running){
    32ca:	80 91 31 08 	lds	r24, 0x0831
    32ce:	88 23       	and	r24, r24
    32d0:	c1 f1       	breq	.+112    	; 0x3342 <scheduleJob+0xc2>
			// make sure we do another loop of __scheduleUpdate to find it
			__recheck=TRUE;
    32d2:	8f ef       	ldi	r24, 0xFF	; 255
    32d4:	80 93 32 08 	sts	0x0832, r24

	if(!doItNow){
		int slot;
		// queue it up
		boolean found=FALSE;
		CRITICAL_SECTION{
    32d8:	6f b7       	in	r22, 0x3f	; 63
#endif  /* C++ */
#endif


#ifndef _WINDOWS_
static __inline__ uint8_t __iCliRetVal(void){ cli(); return 1; }
    32da:	f8 94       	cli
			for(slot=0; slot < maxJobs; slot++){
    32dc:	80 91 7f 05 	lds	r24, 0x057F
    32e0:	48 2f       	mov	r20, r24
    32e2:	50 e0       	ldi	r21, 0x00	; 0
    32e4:	a4 e2       	ldi	r26, 0x24	; 36
    32e6:	b8 e0       	ldi	r27, 0x08	; 8
    32e8:	20 e0       	ldi	r18, 0x00	; 0
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	20 c0       	rjmp	.+64     	; 0x332e <scheduleJob+0xae>

	if(!doItNow){
		int slot;
		// queue it up
		boolean found=FALSE;
		CRITICAL_SECTION{
    32ee:	fd 01       	movw	r30, r26
			for(slot=0; slot < maxJobs; slot++){
				JOB* job = &__queue[slot];
				if(!job->used){
    32f0:	8c 91       	ld	r24, X
    32f2:	1d 96       	adiw	r26, 0x0d	; 13
    32f4:	88 23       	and	r24, r24
    32f6:	c9 f4       	brne	.+50     	; 0x332a <scheduleJob+0xaa>
					job->used = TRUE;
    32f8:	8f ef       	ldi	r24, 0xFF	; 255
    32fa:	80 83       	st	Z, r24
					job->callback = callback;
    32fc:	32 82       	std	Z+2, r3	; 0x02
    32fe:	21 82       	std	Z+1, r2	; 0x01
					job->data = data;
    3300:	54 82       	std	Z+4, r5	; 0x04
    3302:	43 82       	std	Z+3, r4	; 0x03
					job->start=start;
    3304:	81 86       	std	Z+9, r8	; 0x09
    3306:	92 86       	std	Z+10, r9	; 0x0a
    3308:	a3 86       	std	Z+11, r10	; 0x0b
    330a:	b4 86       	std	Z+12, r11	; 0x0c
					job->delay=delay;
    330c:	c5 82       	std	Z+5, r12	; 0x05
    330e:	d6 82       	std	Z+6, r13	; 0x06
    3310:	e7 82       	std	Z+7, r14	; 0x07
    3312:	f0 86       	std	Z+8, r15	; 0x08
					found=TRUE;
					__numJobs++;
    3314:	80 91 33 08 	lds	r24, 0x0833
    3318:	90 91 34 08 	lds	r25, 0x0834
    331c:	01 96       	adiw	r24, 0x01	; 1
    331e:	90 93 34 08 	sts	0x0834, r25
    3322:	80 93 33 08 	sts	0x0833, r24
    3326:	8f ef       	ldi	r24, 0xFF	; 255
    3328:	06 c0       	rjmp	.+12     	; 0x3336 <scheduleJob+0xb6>
	if(!doItNow){
		int slot;
		// queue it up
		boolean found=FALSE;
		CRITICAL_SECTION{
			for(slot=0; slot < maxJobs; slot++){
    332a:	2f 5f       	subi	r18, 0xFF	; 255
    332c:	3f 4f       	sbci	r19, 0xFF	; 255
    332e:	24 17       	cp	r18, r20
    3330:	35 07       	cpc	r19, r21
    3332:	ec f2       	brlt	.-70     	; 0x32ee <scheduleJob+0x6e>
    3334:	80 e0       	ldi	r24, 0x00	; 0
static __inline__ uint8_t __iSeiRetVal(void){ sei(); return 1; }
static __inline__ void __iRestore(const  uint8_t *__s){ SREG = *__s; __asm__ volatile ("" ::: "memory");}
    3336:	6f bf       	out	0x3f, r22	; 63
					break;
				}
			}
		}

		if(!found){
    3338:	88 23       	and	r24, r24
    333a:	f1 f4       	brne	.+60     	; 0x3378 <scheduleJob+0xf8>
			// the queue is exhausted
			setError(SCHEDULER_EXHAUSTED);
    333c:	8f ef       	ldi	r24, 0xFF	; 255
    333e:	0e 94 29 11 	call	0x2252	; 0x2252 <setError>
	if(doItNow){
		// we need to do it now
		TICK_COUNT overflow;

		// wait for expiry
		while(!clockHasElapsedGetOverflow(start, delay, &overflow));
    3342:	3e 01       	movw	r6, r28
    3344:	08 94       	sec
    3346:	61 1c       	adc	r6, r1
    3348:	71 1c       	adc	r7, r1
    334a:	c5 01       	movw	r24, r10
    334c:	b4 01       	movw	r22, r8
    334e:	a7 01       	movw	r20, r14
    3350:	96 01       	movw	r18, r12
    3352:	83 01       	movw	r16, r6
    3354:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <clockHasElapsedGetOverflow>
    3358:	88 23       	and	r24, r24
    335a:	b9 f3       	breq	.-18     	; 0x334a <scheduleJob+0xca>

		// call the queued routine
		callback(data,start+delay,overflow);
    335c:	c8 0c       	add	r12, r8
    335e:	d9 1c       	adc	r13, r9
    3360:	ea 1c       	adc	r14, r10
    3362:	fb 1c       	adc	r15, r11
    3364:	09 81       	ldd	r16, Y+1	; 0x01
    3366:	1a 81       	ldd	r17, Y+2	; 0x02
    3368:	2b 81       	ldd	r18, Y+3	; 0x03
    336a:	3c 81       	ldd	r19, Y+4	; 0x04
    336c:	c2 01       	movw	r24, r4
    336e:	b7 01       	movw	r22, r14
    3370:	a6 01       	movw	r20, r12
    3372:	f1 01       	movw	r30, r2
    3374:	09 95       	icall
    3376:	06 c0       	rjmp	.+12     	; 0x3384 <scheduleJob+0x104>
	}else{
		if(!__running){
    3378:	80 91 31 08 	lds	r24, 0x0831
    337c:	88 23       	and	r24, r24
    337e:	11 f4       	brne	.+4      	; 0x3384 <scheduleJob+0x104>
			__scheduleUpdate();
    3380:	0e 94 3d 18 	call	0x307a	; 0x307a <__scheduleUpdate>
		}
	}
}
    3384:	0f 90       	pop	r0
    3386:	0f 90       	pop	r0
    3388:	0f 90       	pop	r0
    338a:	0f 90       	pop	r0
    338c:	cf 91       	pop	r28
    338e:	df 91       	pop	r29
    3390:	1f 91       	pop	r17
    3392:	0f 91       	pop	r16
    3394:	ff 90       	pop	r15
    3396:	ef 90       	pop	r14
    3398:	df 90       	pop	r13
    339a:	cf 90       	pop	r12
    339c:	bf 90       	pop	r11
    339e:	af 90       	pop	r10
    33a0:	9f 90       	pop	r9
    33a2:	8f 90       	pop	r8
    33a4:	7f 90       	pop	r7
    33a6:	6f 90       	pop	r6
    33a8:	5f 90       	pop	r5
    33aa:	4f 90       	pop	r4
    33ac:	3f 90       	pop	r3
    33ae:	2f 90       	pop	r2
    33b0:	08 95       	ret

000033b2 <vfprintf>:
    33b2:	ab e0       	ldi	r26, 0x0B	; 11
    33b4:	b0 e0       	ldi	r27, 0x00	; 0
    33b6:	ef ed       	ldi	r30, 0xDF	; 223
    33b8:	f9 e1       	ldi	r31, 0x19	; 25
    33ba:	0c 94 7a 21 	jmp	0x42f4	; 0x42f4 <__prologue_saves__+0x8>
    33be:	5c 01       	movw	r10, r24
    33c0:	4b 01       	movw	r8, r22
    33c2:	7a 01       	movw	r14, r20
    33c4:	fc 01       	movw	r30, r24
    33c6:	17 82       	std	Z+7, r1	; 0x07
    33c8:	16 82       	std	Z+6, r1	; 0x06
    33ca:	83 81       	ldd	r24, Z+3	; 0x03
    33cc:	81 fd       	sbrc	r24, 1
    33ce:	08 c0       	rjmp	.+16     	; 0x33e0 <vfprintf+0x2e>
    33d0:	6f ef       	ldi	r22, 0xFF	; 255
    33d2:	7f ef       	ldi	r23, 0xFF	; 255
    33d4:	08 c1       	rjmp	.+528    	; 0x35e6 <vfprintf+0x234>
    33d6:	42 e0       	ldi	r20, 0x02	; 2
    33d8:	50 e0       	ldi	r21, 0x00	; 0
    33da:	e4 0e       	add	r14, r20
    33dc:	f5 1e       	adc	r15, r21
    33de:	04 c0       	rjmp	.+8      	; 0x33e8 <vfprintf+0x36>
    33e0:	3e 01       	movw	r6, r28
    33e2:	08 94       	sec
    33e4:	61 1c       	adc	r6, r1
    33e6:	71 1c       	adc	r7, r1
    33e8:	f5 01       	movw	r30, r10
    33ea:	d3 80       	ldd	r13, Z+3	; 0x03
    33ec:	f4 01       	movw	r30, r8
    33ee:	d3 fc       	sbrc	r13, 3
    33f0:	85 91       	lpm	r24, Z+
    33f2:	d3 fe       	sbrs	r13, 3
    33f4:	81 91       	ld	r24, Z+
    33f6:	4f 01       	movw	r8, r30
    33f8:	88 23       	and	r24, r24
    33fa:	09 f4       	brne	.+2      	; 0x33fe <vfprintf+0x4c>
    33fc:	f1 c0       	rjmp	.+482    	; 0x35e0 <vfprintf+0x22e>
    33fe:	85 32       	cpi	r24, 0x25	; 37
    3400:	59 f4       	brne	.+22     	; 0x3418 <vfprintf+0x66>
    3402:	d3 fc       	sbrc	r13, 3
    3404:	65 91       	lpm	r22, Z+
    3406:	d3 fe       	sbrs	r13, 3
    3408:	61 91       	ld	r22, Z+
    340a:	4f 01       	movw	r8, r30
    340c:	65 32       	cpi	r22, 0x25	; 37
    340e:	19 f0       	breq	.+6      	; 0x3416 <vfprintf+0x64>
    3410:	06 2f       	mov	r16, r22
    3412:	10 e0       	ldi	r17, 0x00	; 0
    3414:	1b c0       	rjmp	.+54     	; 0x344c <vfprintf+0x9a>
    3416:	85 e2       	ldi	r24, 0x25	; 37
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	2b c0       	rjmp	.+86     	; 0x3472 <vfprintf+0xc0>
    341c:	00 23       	and	r16, r16
    341e:	09 f4       	brne	.+2      	; 0x3422 <vfprintf+0x70>
    3420:	df c0       	rjmp	.+446    	; 0x35e0 <vfprintf+0x22e>
    3422:	8b ee       	ldi	r24, 0xEB	; 235
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	60 2f       	mov	r22, r16
    3428:	70 e0       	ldi	r23, 0x00	; 0
    342a:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <strchr_P>
    342e:	89 2b       	or	r24, r25
    3430:	39 f4       	brne	.+14     	; 0x3440 <vfprintf+0x8e>
    3432:	03 32       	cpi	r16, 0x23	; 35
    3434:	11 f4       	brne	.+4      	; 0x343a <vfprintf+0x88>
    3436:	10 61       	ori	r17, 0x10	; 16
    3438:	03 c0       	rjmp	.+6      	; 0x3440 <vfprintf+0x8e>
    343a:	0c 36       	cpi	r16, 0x6C	; 108
    343c:	61 f4       	brne	.+24     	; 0x3456 <vfprintf+0xa4>
    343e:	10 68       	ori	r17, 0x80	; 128
    3440:	f4 01       	movw	r30, r8
    3442:	d3 fc       	sbrc	r13, 3
    3444:	05 91       	lpm	r16, Z+
    3446:	d3 fe       	sbrs	r13, 3
    3448:	01 91       	ld	r16, Z+
    344a:	4f 01       	movw	r8, r30
    344c:	17 ff       	sbrs	r17, 7
    344e:	e6 cf       	rjmp	.-52     	; 0x341c <vfprintf+0x6a>
    3450:	00 23       	and	r16, r16
    3452:	09 f4       	brne	.+2      	; 0x3456 <vfprintf+0xa4>
    3454:	c5 c0       	rjmp	.+394    	; 0x35e0 <vfprintf+0x22e>
    3456:	84 ee       	ldi	r24, 0xE4	; 228
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	60 2f       	mov	r22, r16
    345c:	70 e0       	ldi	r23, 0x00	; 0
    345e:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <strchr_P>
    3462:	89 2b       	or	r24, r25
    3464:	51 f0       	breq	.+20     	; 0x347a <vfprintf+0xc8>
    3466:	44 e0       	ldi	r20, 0x04	; 4
    3468:	50 e0       	ldi	r21, 0x00	; 0
    346a:	e4 0e       	add	r14, r20
    346c:	f5 1e       	adc	r15, r21
    346e:	8f e3       	ldi	r24, 0x3F	; 63
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	b5 01       	movw	r22, r10
    3474:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <fputc>
    3478:	b7 cf       	rjmp	.-146    	; 0x33e8 <vfprintf+0x36>
    347a:	03 36       	cpi	r16, 0x63	; 99
    347c:	29 f0       	breq	.+10     	; 0x3488 <vfprintf+0xd6>
    347e:	03 37       	cpi	r16, 0x73	; 115
    3480:	79 f0       	breq	.+30     	; 0x34a0 <vfprintf+0xee>
    3482:	03 35       	cpi	r16, 0x53	; 83
    3484:	f1 f4       	brne	.+60     	; 0x34c2 <vfprintf+0x110>
    3486:	0b c0       	rjmp	.+22     	; 0x349e <vfprintf+0xec>
    3488:	87 01       	movw	r16, r14
    348a:	0e 5f       	subi	r16, 0xFE	; 254
    348c:	1f 4f       	sbci	r17, 0xFF	; 255
    348e:	f7 01       	movw	r30, r14
    3490:	80 81       	ld	r24, Z
    3492:	91 81       	ldd	r25, Z+1	; 0x01
    3494:	b5 01       	movw	r22, r10
    3496:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <fputc>
    349a:	78 01       	movw	r14, r16
    349c:	a5 cf       	rjmp	.-182    	; 0x33e8 <vfprintf+0x36>
    349e:	11 60       	ori	r17, 0x01	; 1
    34a0:	f7 01       	movw	r30, r14
    34a2:	c0 80       	ld	r12, Z
    34a4:	d1 80       	ldd	r13, Z+1	; 0x01
    34a6:	04 c0       	rjmp	.+8      	; 0x34b0 <vfprintf+0xfe>
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	b5 01       	movw	r22, r10
    34ac:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <fputc>
    34b0:	f6 01       	movw	r30, r12
    34b2:	10 fd       	sbrc	r17, 0
    34b4:	85 91       	lpm	r24, Z+
    34b6:	10 ff       	sbrs	r17, 0
    34b8:	81 91       	ld	r24, Z+
    34ba:	6f 01       	movw	r12, r30
    34bc:	88 23       	and	r24, r24
    34be:	a1 f7       	brne	.-24     	; 0x34a8 <vfprintf+0xf6>
    34c0:	8a cf       	rjmp	.-236    	; 0x33d6 <vfprintf+0x24>
    34c2:	04 36       	cpi	r16, 0x64	; 100
    34c4:	11 f0       	breq	.+4      	; 0x34ca <vfprintf+0x118>
    34c6:	09 36       	cpi	r16, 0x69	; 105
    34c8:	39 f5       	brne	.+78     	; 0x3518 <vfprintf+0x166>
    34ca:	17 ff       	sbrs	r17, 7
    34cc:	08 c0       	rjmp	.+16     	; 0x34de <vfprintf+0x12c>
    34ce:	f7 01       	movw	r30, r14
    34d0:	20 81       	ld	r18, Z
    34d2:	31 81       	ldd	r19, Z+1	; 0x01
    34d4:	42 81       	ldd	r20, Z+2	; 0x02
    34d6:	53 81       	ldd	r21, Z+3	; 0x03
    34d8:	84 e0       	ldi	r24, 0x04	; 4
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	0a c0       	rjmp	.+20     	; 0x34f2 <vfprintf+0x140>
    34de:	f7 01       	movw	r30, r14
    34e0:	80 81       	ld	r24, Z
    34e2:	91 81       	ldd	r25, Z+1	; 0x01
    34e4:	9c 01       	movw	r18, r24
    34e6:	44 27       	eor	r20, r20
    34e8:	37 fd       	sbrc	r19, 7
    34ea:	40 95       	com	r20
    34ec:	54 2f       	mov	r21, r20
    34ee:	82 e0       	ldi	r24, 0x02	; 2
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	e8 0e       	add	r14, r24
    34f4:	f9 1e       	adc	r15, r25
    34f6:	1f 7e       	andi	r17, 0xEF	; 239
    34f8:	57 ff       	sbrs	r21, 7
    34fa:	08 c0       	rjmp	.+16     	; 0x350c <vfprintf+0x15a>
    34fc:	50 95       	com	r21
    34fe:	40 95       	com	r20
    3500:	30 95       	com	r19
    3502:	21 95       	neg	r18
    3504:	3f 4f       	sbci	r19, 0xFF	; 255
    3506:	4f 4f       	sbci	r20, 0xFF	; 255
    3508:	5f 4f       	sbci	r21, 0xFF	; 255
    350a:	10 64       	ori	r17, 0x40	; 64
    350c:	ca 01       	movw	r24, r20
    350e:	b9 01       	movw	r22, r18
    3510:	a3 01       	movw	r20, r6
    3512:	2a e0       	ldi	r18, 0x0A	; 10
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	34 c0       	rjmp	.+104    	; 0x3580 <vfprintf+0x1ce>
    3518:	00 37       	cpi	r16, 0x70	; 112
    351a:	a9 f0       	breq	.+42     	; 0x3546 <vfprintf+0x194>
    351c:	01 37       	cpi	r16, 0x71	; 113
    351e:	30 f4       	brcc	.+12     	; 0x352c <vfprintf+0x17a>
    3520:	08 35       	cpi	r16, 0x58	; 88
    3522:	b1 f0       	breq	.+44     	; 0x3550 <vfprintf+0x19e>
    3524:	0f 36       	cpi	r16, 0x6F	; 111
    3526:	09 f0       	breq	.+2      	; 0x352a <vfprintf+0x178>
    3528:	5b c0       	rjmp	.+182    	; 0x35e0 <vfprintf+0x22e>
    352a:	06 c0       	rjmp	.+12     	; 0x3538 <vfprintf+0x186>
    352c:	05 37       	cpi	r16, 0x75	; 117
    352e:	39 f0       	breq	.+14     	; 0x353e <vfprintf+0x18c>
    3530:	08 37       	cpi	r16, 0x78	; 120
    3532:	09 f0       	breq	.+2      	; 0x3536 <vfprintf+0x184>
    3534:	55 c0       	rjmp	.+170    	; 0x35e0 <vfprintf+0x22e>
    3536:	08 c0       	rjmp	.+16     	; 0x3548 <vfprintf+0x196>
    3538:	28 e0       	ldi	r18, 0x08	; 8
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	0c c0       	rjmp	.+24     	; 0x3556 <vfprintf+0x1a4>
    353e:	1f 7e       	andi	r17, 0xEF	; 239
    3540:	2a e0       	ldi	r18, 0x0A	; 10
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	08 c0       	rjmp	.+16     	; 0x3556 <vfprintf+0x1a4>
    3546:	10 61       	ori	r17, 0x10	; 16
    3548:	14 62       	ori	r17, 0x24	; 36
    354a:	20 e1       	ldi	r18, 0x10	; 16
    354c:	30 e0       	ldi	r19, 0x00	; 0
    354e:	03 c0       	rjmp	.+6      	; 0x3556 <vfprintf+0x1a4>
    3550:	14 60       	ori	r17, 0x04	; 4
    3552:	20 e1       	ldi	r18, 0x10	; 16
    3554:	32 e0       	ldi	r19, 0x02	; 2
    3556:	17 ff       	sbrs	r17, 7
    3558:	08 c0       	rjmp	.+16     	; 0x356a <vfprintf+0x1b8>
    355a:	f7 01       	movw	r30, r14
    355c:	60 81       	ld	r22, Z
    355e:	71 81       	ldd	r23, Z+1	; 0x01
    3560:	82 81       	ldd	r24, Z+2	; 0x02
    3562:	93 81       	ldd	r25, Z+3	; 0x03
    3564:	44 e0       	ldi	r20, 0x04	; 4
    3566:	50 e0       	ldi	r21, 0x00	; 0
    3568:	08 c0       	rjmp	.+16     	; 0x357a <vfprintf+0x1c8>
    356a:	f7 01       	movw	r30, r14
    356c:	80 81       	ld	r24, Z
    356e:	91 81       	ldd	r25, Z+1	; 0x01
    3570:	bc 01       	movw	r22, r24
    3572:	80 e0       	ldi	r24, 0x00	; 0
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	42 e0       	ldi	r20, 0x02	; 2
    3578:	50 e0       	ldi	r21, 0x00	; 0
    357a:	e4 0e       	add	r14, r20
    357c:	f5 1e       	adc	r15, r21
    357e:	a3 01       	movw	r20, r6
    3580:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <__ultoa_invert>
    3584:	d8 2e       	mov	r13, r24
    3586:	d6 18       	sub	r13, r6
    3588:	01 2f       	mov	r16, r17
    358a:	10 e0       	ldi	r17, 0x00	; 0
    358c:	06 ff       	sbrs	r16, 6
    358e:	05 c0       	rjmp	.+10     	; 0x359a <vfprintf+0x1e8>
    3590:	8d e2       	ldi	r24, 0x2D	; 45
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	b5 01       	movw	r22, r10
    3596:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <fputc>
    359a:	04 ff       	sbrs	r16, 4
    359c:	15 c0       	rjmp	.+42     	; 0x35c8 <vfprintf+0x216>
    359e:	fe 01       	movw	r30, r28
    35a0:	ed 0d       	add	r30, r13
    35a2:	f1 1d       	adc	r31, r1
    35a4:	80 81       	ld	r24, Z
    35a6:	80 33       	cpi	r24, 0x30	; 48
    35a8:	79 f0       	breq	.+30     	; 0x35c8 <vfprintf+0x216>
    35aa:	80 e3       	ldi	r24, 0x30	; 48
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	b5 01       	movw	r22, r10
    35b0:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <fputc>
    35b4:	02 ff       	sbrs	r16, 2
    35b6:	08 c0       	rjmp	.+16     	; 0x35c8 <vfprintf+0x216>
    35b8:	00 72       	andi	r16, 0x20	; 32
    35ba:	10 70       	andi	r17, 0x00	; 0
    35bc:	c8 01       	movw	r24, r16
    35be:	88 5a       	subi	r24, 0xA8	; 168
    35c0:	9f 4f       	sbci	r25, 0xFF	; 255
    35c2:	b5 01       	movw	r22, r10
    35c4:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <fputc>
    35c8:	da 94       	dec	r13
    35ca:	f3 01       	movw	r30, r6
    35cc:	ed 0d       	add	r30, r13
    35ce:	f1 1d       	adc	r31, r1
    35d0:	80 81       	ld	r24, Z
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	b5 01       	movw	r22, r10
    35d6:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <fputc>
    35da:	dd 20       	and	r13, r13
    35dc:	a9 f7       	brne	.-22     	; 0x35c8 <vfprintf+0x216>
    35de:	04 cf       	rjmp	.-504    	; 0x33e8 <vfprintf+0x36>
    35e0:	f5 01       	movw	r30, r10
    35e2:	66 81       	ldd	r22, Z+6	; 0x06
    35e4:	77 81       	ldd	r23, Z+7	; 0x07
    35e6:	cb 01       	movw	r24, r22
    35e8:	2b 96       	adiw	r28, 0x0b	; 11
    35ea:	ee e0       	ldi	r30, 0x0E	; 14
    35ec:	0c 94 96 21 	jmp	0x432c	; 0x432c <__epilogue_restores__+0x8>

000035f0 <__subsf3>:
    35f0:	50 58       	subi	r21, 0x80	; 128

000035f2 <__addsf3>:
    35f2:	bb 27       	eor	r27, r27
    35f4:	aa 27       	eor	r26, r26
    35f6:	0e d0       	rcall	.+28     	; 0x3614 <__addsf3x>
    35f8:	e5 c0       	rjmp	.+458    	; 0x37c4 <__fp_round>
    35fa:	d6 d0       	rcall	.+428    	; 0x37a8 <__fp_pscA>
    35fc:	30 f0       	brcs	.+12     	; 0x360a <__addsf3+0x18>
    35fe:	db d0       	rcall	.+438    	; 0x37b6 <__fp_pscB>
    3600:	20 f0       	brcs	.+8      	; 0x360a <__addsf3+0x18>
    3602:	31 f4       	brne	.+12     	; 0x3610 <__addsf3+0x1e>
    3604:	9f 3f       	cpi	r25, 0xFF	; 255
    3606:	11 f4       	brne	.+4      	; 0x360c <__addsf3+0x1a>
    3608:	1e f4       	brtc	.+6      	; 0x3610 <__addsf3+0x1e>
    360a:	cb c0       	rjmp	.+406    	; 0x37a2 <__fp_nan>
    360c:	0e f4       	brtc	.+2      	; 0x3610 <__addsf3+0x1e>
    360e:	e0 95       	com	r30
    3610:	e7 fb       	bst	r30, 7
    3612:	c1 c0       	rjmp	.+386    	; 0x3796 <__fp_inf>

00003614 <__addsf3x>:
    3614:	e9 2f       	mov	r30, r25
    3616:	e7 d0       	rcall	.+462    	; 0x37e6 <__fp_split3>
    3618:	80 f3       	brcs	.-32     	; 0x35fa <__addsf3+0x8>
    361a:	ba 17       	cp	r27, r26
    361c:	62 07       	cpc	r22, r18
    361e:	73 07       	cpc	r23, r19
    3620:	84 07       	cpc	r24, r20
    3622:	95 07       	cpc	r25, r21
    3624:	18 f0       	brcs	.+6      	; 0x362c <__addsf3x+0x18>
    3626:	71 f4       	brne	.+28     	; 0x3644 <__addsf3x+0x30>
    3628:	9e f5       	brtc	.+102    	; 0x3690 <__addsf3x+0x7c>
    362a:	ff c0       	rjmp	.+510    	; 0x382a <__fp_zero>
    362c:	0e f4       	brtc	.+2      	; 0x3630 <__addsf3x+0x1c>
    362e:	e0 95       	com	r30
    3630:	0b 2e       	mov	r0, r27
    3632:	ba 2f       	mov	r27, r26
    3634:	a0 2d       	mov	r26, r0
    3636:	0b 01       	movw	r0, r22
    3638:	b9 01       	movw	r22, r18
    363a:	90 01       	movw	r18, r0
    363c:	0c 01       	movw	r0, r24
    363e:	ca 01       	movw	r24, r20
    3640:	a0 01       	movw	r20, r0
    3642:	11 24       	eor	r1, r1
    3644:	ff 27       	eor	r31, r31
    3646:	59 1b       	sub	r21, r25
    3648:	99 f0       	breq	.+38     	; 0x3670 <__addsf3x+0x5c>
    364a:	59 3f       	cpi	r21, 0xF9	; 249
    364c:	50 f4       	brcc	.+20     	; 0x3662 <__addsf3x+0x4e>
    364e:	50 3e       	cpi	r21, 0xE0	; 224
    3650:	68 f1       	brcs	.+90     	; 0x36ac <__addsf3x+0x98>
    3652:	1a 16       	cp	r1, r26
    3654:	f0 40       	sbci	r31, 0x00	; 0
    3656:	a2 2f       	mov	r26, r18
    3658:	23 2f       	mov	r18, r19
    365a:	34 2f       	mov	r19, r20
    365c:	44 27       	eor	r20, r20
    365e:	58 5f       	subi	r21, 0xF8	; 248
    3660:	f3 cf       	rjmp	.-26     	; 0x3648 <__addsf3x+0x34>
    3662:	46 95       	lsr	r20
    3664:	37 95       	ror	r19
    3666:	27 95       	ror	r18
    3668:	a7 95       	ror	r26
    366a:	f0 40       	sbci	r31, 0x00	; 0
    366c:	53 95       	inc	r21
    366e:	c9 f7       	brne	.-14     	; 0x3662 <__addsf3x+0x4e>
    3670:	7e f4       	brtc	.+30     	; 0x3690 <__addsf3x+0x7c>
    3672:	1f 16       	cp	r1, r31
    3674:	ba 0b       	sbc	r27, r26
    3676:	62 0b       	sbc	r22, r18
    3678:	73 0b       	sbc	r23, r19
    367a:	84 0b       	sbc	r24, r20
    367c:	ba f0       	brmi	.+46     	; 0x36ac <__addsf3x+0x98>
    367e:	91 50       	subi	r25, 0x01	; 1
    3680:	a1 f0       	breq	.+40     	; 0x36aa <__addsf3x+0x96>
    3682:	ff 0f       	add	r31, r31
    3684:	bb 1f       	adc	r27, r27
    3686:	66 1f       	adc	r22, r22
    3688:	77 1f       	adc	r23, r23
    368a:	88 1f       	adc	r24, r24
    368c:	c2 f7       	brpl	.-16     	; 0x367e <__addsf3x+0x6a>
    368e:	0e c0       	rjmp	.+28     	; 0x36ac <__addsf3x+0x98>
    3690:	ba 0f       	add	r27, r26
    3692:	62 1f       	adc	r22, r18
    3694:	73 1f       	adc	r23, r19
    3696:	84 1f       	adc	r24, r20
    3698:	48 f4       	brcc	.+18     	; 0x36ac <__addsf3x+0x98>
    369a:	87 95       	ror	r24
    369c:	77 95       	ror	r23
    369e:	67 95       	ror	r22
    36a0:	b7 95       	ror	r27
    36a2:	f7 95       	ror	r31
    36a4:	9e 3f       	cpi	r25, 0xFE	; 254
    36a6:	08 f0       	brcs	.+2      	; 0x36aa <__addsf3x+0x96>
    36a8:	b3 cf       	rjmp	.-154    	; 0x3610 <__addsf3+0x1e>
    36aa:	93 95       	inc	r25
    36ac:	88 0f       	add	r24, r24
    36ae:	08 f0       	brcs	.+2      	; 0x36b2 <__addsf3x+0x9e>
    36b0:	99 27       	eor	r25, r25
    36b2:	ee 0f       	add	r30, r30
    36b4:	97 95       	ror	r25
    36b6:	87 95       	ror	r24
    36b8:	08 95       	ret

000036ba <__fixsfsi>:
    36ba:	04 d0       	rcall	.+8      	; 0x36c4 <__fixunssfsi>
    36bc:	68 94       	set
    36be:	b1 11       	cpse	r27, r1
    36c0:	b5 c0       	rjmp	.+362    	; 0x382c <__fp_szero>
    36c2:	08 95       	ret

000036c4 <__fixunssfsi>:
    36c4:	98 d0       	rcall	.+304    	; 0x37f6 <__fp_splitA>
    36c6:	88 f0       	brcs	.+34     	; 0x36ea <__fixunssfsi+0x26>
    36c8:	9f 57       	subi	r25, 0x7F	; 127
    36ca:	90 f0       	brcs	.+36     	; 0x36f0 <__fixunssfsi+0x2c>
    36cc:	b9 2f       	mov	r27, r25
    36ce:	99 27       	eor	r25, r25
    36d0:	b7 51       	subi	r27, 0x17	; 23
    36d2:	a0 f0       	brcs	.+40     	; 0x36fc <__fixunssfsi+0x38>
    36d4:	d1 f0       	breq	.+52     	; 0x370a <__fixunssfsi+0x46>
    36d6:	66 0f       	add	r22, r22
    36d8:	77 1f       	adc	r23, r23
    36da:	88 1f       	adc	r24, r24
    36dc:	99 1f       	adc	r25, r25
    36de:	1a f0       	brmi	.+6      	; 0x36e6 <__fixunssfsi+0x22>
    36e0:	ba 95       	dec	r27
    36e2:	c9 f7       	brne	.-14     	; 0x36d6 <__fixunssfsi+0x12>
    36e4:	12 c0       	rjmp	.+36     	; 0x370a <__fixunssfsi+0x46>
    36e6:	b1 30       	cpi	r27, 0x01	; 1
    36e8:	81 f0       	breq	.+32     	; 0x370a <__fixunssfsi+0x46>
    36ea:	9f d0       	rcall	.+318    	; 0x382a <__fp_zero>
    36ec:	b1 e0       	ldi	r27, 0x01	; 1
    36ee:	08 95       	ret
    36f0:	9c c0       	rjmp	.+312    	; 0x382a <__fp_zero>
    36f2:	67 2f       	mov	r22, r23
    36f4:	78 2f       	mov	r23, r24
    36f6:	88 27       	eor	r24, r24
    36f8:	b8 5f       	subi	r27, 0xF8	; 248
    36fa:	39 f0       	breq	.+14     	; 0x370a <__fixunssfsi+0x46>
    36fc:	b9 3f       	cpi	r27, 0xF9	; 249
    36fe:	cc f3       	brlt	.-14     	; 0x36f2 <__fixunssfsi+0x2e>
    3700:	86 95       	lsr	r24
    3702:	77 95       	ror	r23
    3704:	67 95       	ror	r22
    3706:	b3 95       	inc	r27
    3708:	d9 f7       	brne	.-10     	; 0x3700 <__fixunssfsi+0x3c>
    370a:	3e f4       	brtc	.+14     	; 0x371a <__fixunssfsi+0x56>
    370c:	90 95       	com	r25
    370e:	80 95       	com	r24
    3710:	70 95       	com	r23
    3712:	61 95       	neg	r22
    3714:	7f 4f       	sbci	r23, 0xFF	; 255
    3716:	8f 4f       	sbci	r24, 0xFF	; 255
    3718:	9f 4f       	sbci	r25, 0xFF	; 255
    371a:	08 95       	ret

0000371c <__floatunsisf>:
    371c:	e8 94       	clt
    371e:	09 c0       	rjmp	.+18     	; 0x3732 <__floatsisf+0x12>

00003720 <__floatsisf>:
    3720:	97 fb       	bst	r25, 7
    3722:	3e f4       	brtc	.+14     	; 0x3732 <__floatsisf+0x12>
    3724:	90 95       	com	r25
    3726:	80 95       	com	r24
    3728:	70 95       	com	r23
    372a:	61 95       	neg	r22
    372c:	7f 4f       	sbci	r23, 0xFF	; 255
    372e:	8f 4f       	sbci	r24, 0xFF	; 255
    3730:	9f 4f       	sbci	r25, 0xFF	; 255
    3732:	99 23       	and	r25, r25
    3734:	a9 f0       	breq	.+42     	; 0x3760 <__floatsisf+0x40>
    3736:	f9 2f       	mov	r31, r25
    3738:	96 e9       	ldi	r25, 0x96	; 150
    373a:	bb 27       	eor	r27, r27
    373c:	93 95       	inc	r25
    373e:	f6 95       	lsr	r31
    3740:	87 95       	ror	r24
    3742:	77 95       	ror	r23
    3744:	67 95       	ror	r22
    3746:	b7 95       	ror	r27
    3748:	f1 11       	cpse	r31, r1
    374a:	f8 cf       	rjmp	.-16     	; 0x373c <__floatsisf+0x1c>
    374c:	fa f4       	brpl	.+62     	; 0x378c <__floatsisf+0x6c>
    374e:	bb 0f       	add	r27, r27
    3750:	11 f4       	brne	.+4      	; 0x3756 <__floatsisf+0x36>
    3752:	60 ff       	sbrs	r22, 0
    3754:	1b c0       	rjmp	.+54     	; 0x378c <__floatsisf+0x6c>
    3756:	6f 5f       	subi	r22, 0xFF	; 255
    3758:	7f 4f       	sbci	r23, 0xFF	; 255
    375a:	8f 4f       	sbci	r24, 0xFF	; 255
    375c:	9f 4f       	sbci	r25, 0xFF	; 255
    375e:	16 c0       	rjmp	.+44     	; 0x378c <__floatsisf+0x6c>
    3760:	88 23       	and	r24, r24
    3762:	11 f0       	breq	.+4      	; 0x3768 <__floatsisf+0x48>
    3764:	96 e9       	ldi	r25, 0x96	; 150
    3766:	11 c0       	rjmp	.+34     	; 0x378a <__floatsisf+0x6a>
    3768:	77 23       	and	r23, r23
    376a:	21 f0       	breq	.+8      	; 0x3774 <__floatsisf+0x54>
    376c:	9e e8       	ldi	r25, 0x8E	; 142
    376e:	87 2f       	mov	r24, r23
    3770:	76 2f       	mov	r23, r22
    3772:	05 c0       	rjmp	.+10     	; 0x377e <__floatsisf+0x5e>
    3774:	66 23       	and	r22, r22
    3776:	71 f0       	breq	.+28     	; 0x3794 <__floatsisf+0x74>
    3778:	96 e8       	ldi	r25, 0x86	; 134
    377a:	86 2f       	mov	r24, r22
    377c:	70 e0       	ldi	r23, 0x00	; 0
    377e:	60 e0       	ldi	r22, 0x00	; 0
    3780:	2a f0       	brmi	.+10     	; 0x378c <__floatsisf+0x6c>
    3782:	9a 95       	dec	r25
    3784:	66 0f       	add	r22, r22
    3786:	77 1f       	adc	r23, r23
    3788:	88 1f       	adc	r24, r24
    378a:	da f7       	brpl	.-10     	; 0x3782 <__floatsisf+0x62>
    378c:	88 0f       	add	r24, r24
    378e:	96 95       	lsr	r25
    3790:	87 95       	ror	r24
    3792:	97 f9       	bld	r25, 7
    3794:	08 95       	ret

00003796 <__fp_inf>:
    3796:	97 f9       	bld	r25, 7
    3798:	9f 67       	ori	r25, 0x7F	; 127
    379a:	80 e8       	ldi	r24, 0x80	; 128
    379c:	70 e0       	ldi	r23, 0x00	; 0
    379e:	60 e0       	ldi	r22, 0x00	; 0
    37a0:	08 95       	ret

000037a2 <__fp_nan>:
    37a2:	9f ef       	ldi	r25, 0xFF	; 255
    37a4:	80 ec       	ldi	r24, 0xC0	; 192
    37a6:	08 95       	ret

000037a8 <__fp_pscA>:
    37a8:	00 24       	eor	r0, r0
    37aa:	0a 94       	dec	r0
    37ac:	16 16       	cp	r1, r22
    37ae:	17 06       	cpc	r1, r23
    37b0:	18 06       	cpc	r1, r24
    37b2:	09 06       	cpc	r0, r25
    37b4:	08 95       	ret

000037b6 <__fp_pscB>:
    37b6:	00 24       	eor	r0, r0
    37b8:	0a 94       	dec	r0
    37ba:	12 16       	cp	r1, r18
    37bc:	13 06       	cpc	r1, r19
    37be:	14 06       	cpc	r1, r20
    37c0:	05 06       	cpc	r0, r21
    37c2:	08 95       	ret

000037c4 <__fp_round>:
    37c4:	09 2e       	mov	r0, r25
    37c6:	03 94       	inc	r0
    37c8:	00 0c       	add	r0, r0
    37ca:	11 f4       	brne	.+4      	; 0x37d0 <__fp_round+0xc>
    37cc:	88 23       	and	r24, r24
    37ce:	52 f0       	brmi	.+20     	; 0x37e4 <__fp_round+0x20>
    37d0:	bb 0f       	add	r27, r27
    37d2:	40 f4       	brcc	.+16     	; 0x37e4 <__fp_round+0x20>
    37d4:	bf 2b       	or	r27, r31
    37d6:	11 f4       	brne	.+4      	; 0x37dc <__fp_round+0x18>
    37d8:	60 ff       	sbrs	r22, 0
    37da:	04 c0       	rjmp	.+8      	; 0x37e4 <__fp_round+0x20>
    37dc:	6f 5f       	subi	r22, 0xFF	; 255
    37de:	7f 4f       	sbci	r23, 0xFF	; 255
    37e0:	8f 4f       	sbci	r24, 0xFF	; 255
    37e2:	9f 4f       	sbci	r25, 0xFF	; 255
    37e4:	08 95       	ret

000037e6 <__fp_split3>:
    37e6:	57 fd       	sbrc	r21, 7
    37e8:	90 58       	subi	r25, 0x80	; 128
    37ea:	44 0f       	add	r20, r20
    37ec:	55 1f       	adc	r21, r21
    37ee:	59 f0       	breq	.+22     	; 0x3806 <__fp_splitA+0x10>
    37f0:	5f 3f       	cpi	r21, 0xFF	; 255
    37f2:	71 f0       	breq	.+28     	; 0x3810 <__fp_splitA+0x1a>
    37f4:	47 95       	ror	r20

000037f6 <__fp_splitA>:
    37f6:	88 0f       	add	r24, r24
    37f8:	97 fb       	bst	r25, 7
    37fa:	99 1f       	adc	r25, r25
    37fc:	61 f0       	breq	.+24     	; 0x3816 <__fp_splitA+0x20>
    37fe:	9f 3f       	cpi	r25, 0xFF	; 255
    3800:	79 f0       	breq	.+30     	; 0x3820 <__fp_splitA+0x2a>
    3802:	87 95       	ror	r24
    3804:	08 95       	ret
    3806:	12 16       	cp	r1, r18
    3808:	13 06       	cpc	r1, r19
    380a:	14 06       	cpc	r1, r20
    380c:	55 1f       	adc	r21, r21
    380e:	f2 cf       	rjmp	.-28     	; 0x37f4 <__fp_split3+0xe>
    3810:	46 95       	lsr	r20
    3812:	f1 df       	rcall	.-30     	; 0x37f6 <__fp_splitA>
    3814:	08 c0       	rjmp	.+16     	; 0x3826 <__fp_splitA+0x30>
    3816:	16 16       	cp	r1, r22
    3818:	17 06       	cpc	r1, r23
    381a:	18 06       	cpc	r1, r24
    381c:	99 1f       	adc	r25, r25
    381e:	f1 cf       	rjmp	.-30     	; 0x3802 <__fp_splitA+0xc>
    3820:	86 95       	lsr	r24
    3822:	71 05       	cpc	r23, r1
    3824:	61 05       	cpc	r22, r1
    3826:	08 94       	sec
    3828:	08 95       	ret

0000382a <__fp_zero>:
    382a:	e8 94       	clt

0000382c <__fp_szero>:
    382c:	bb 27       	eor	r27, r27
    382e:	66 27       	eor	r22, r22
    3830:	77 27       	eor	r23, r23
    3832:	cb 01       	movw	r24, r22
    3834:	97 f9       	bld	r25, 7
    3836:	08 95       	ret

00003838 <__mulsf3>:
    3838:	0b d0       	rcall	.+22     	; 0x3850 <__mulsf3x>
    383a:	c4 cf       	rjmp	.-120    	; 0x37c4 <__fp_round>
    383c:	b5 df       	rcall	.-150    	; 0x37a8 <__fp_pscA>
    383e:	28 f0       	brcs	.+10     	; 0x384a <__mulsf3+0x12>
    3840:	ba df       	rcall	.-140    	; 0x37b6 <__fp_pscB>
    3842:	18 f0       	brcs	.+6      	; 0x384a <__mulsf3+0x12>
    3844:	95 23       	and	r25, r21
    3846:	09 f0       	breq	.+2      	; 0x384a <__mulsf3+0x12>
    3848:	a6 cf       	rjmp	.-180    	; 0x3796 <__fp_inf>
    384a:	ab cf       	rjmp	.-170    	; 0x37a2 <__fp_nan>
    384c:	11 24       	eor	r1, r1
    384e:	ee cf       	rjmp	.-36     	; 0x382c <__fp_szero>

00003850 <__mulsf3x>:
    3850:	ca df       	rcall	.-108    	; 0x37e6 <__fp_split3>
    3852:	a0 f3       	brcs	.-24     	; 0x383c <__mulsf3+0x4>

00003854 <__mulsf3_pse>:
    3854:	95 9f       	mul	r25, r21
    3856:	d1 f3       	breq	.-12     	; 0x384c <__mulsf3+0x14>
    3858:	95 0f       	add	r25, r21
    385a:	50 e0       	ldi	r21, 0x00	; 0
    385c:	55 1f       	adc	r21, r21
    385e:	62 9f       	mul	r22, r18
    3860:	f0 01       	movw	r30, r0
    3862:	72 9f       	mul	r23, r18
    3864:	bb 27       	eor	r27, r27
    3866:	f0 0d       	add	r31, r0
    3868:	b1 1d       	adc	r27, r1
    386a:	63 9f       	mul	r22, r19
    386c:	aa 27       	eor	r26, r26
    386e:	f0 0d       	add	r31, r0
    3870:	b1 1d       	adc	r27, r1
    3872:	aa 1f       	adc	r26, r26
    3874:	64 9f       	mul	r22, r20
    3876:	66 27       	eor	r22, r22
    3878:	b0 0d       	add	r27, r0
    387a:	a1 1d       	adc	r26, r1
    387c:	66 1f       	adc	r22, r22
    387e:	82 9f       	mul	r24, r18
    3880:	22 27       	eor	r18, r18
    3882:	b0 0d       	add	r27, r0
    3884:	a1 1d       	adc	r26, r1
    3886:	62 1f       	adc	r22, r18
    3888:	73 9f       	mul	r23, r19
    388a:	b0 0d       	add	r27, r0
    388c:	a1 1d       	adc	r26, r1
    388e:	62 1f       	adc	r22, r18
    3890:	83 9f       	mul	r24, r19
    3892:	a0 0d       	add	r26, r0
    3894:	61 1d       	adc	r22, r1
    3896:	22 1f       	adc	r18, r18
    3898:	74 9f       	mul	r23, r20
    389a:	33 27       	eor	r19, r19
    389c:	a0 0d       	add	r26, r0
    389e:	61 1d       	adc	r22, r1
    38a0:	23 1f       	adc	r18, r19
    38a2:	84 9f       	mul	r24, r20
    38a4:	60 0d       	add	r22, r0
    38a6:	21 1d       	adc	r18, r1
    38a8:	82 2f       	mov	r24, r18
    38aa:	76 2f       	mov	r23, r22
    38ac:	6a 2f       	mov	r22, r26
    38ae:	11 24       	eor	r1, r1
    38b0:	9f 57       	subi	r25, 0x7F	; 127
    38b2:	50 40       	sbci	r21, 0x00	; 0
    38b4:	8a f0       	brmi	.+34     	; 0x38d8 <__mulsf3_pse+0x84>
    38b6:	e1 f0       	breq	.+56     	; 0x38f0 <__mulsf3_pse+0x9c>
    38b8:	88 23       	and	r24, r24
    38ba:	4a f0       	brmi	.+18     	; 0x38ce <__mulsf3_pse+0x7a>
    38bc:	ee 0f       	add	r30, r30
    38be:	ff 1f       	adc	r31, r31
    38c0:	bb 1f       	adc	r27, r27
    38c2:	66 1f       	adc	r22, r22
    38c4:	77 1f       	adc	r23, r23
    38c6:	88 1f       	adc	r24, r24
    38c8:	91 50       	subi	r25, 0x01	; 1
    38ca:	50 40       	sbci	r21, 0x00	; 0
    38cc:	a9 f7       	brne	.-22     	; 0x38b8 <__mulsf3_pse+0x64>
    38ce:	9e 3f       	cpi	r25, 0xFE	; 254
    38d0:	51 05       	cpc	r21, r1
    38d2:	70 f0       	brcs	.+28     	; 0x38f0 <__mulsf3_pse+0x9c>
    38d4:	60 cf       	rjmp	.-320    	; 0x3796 <__fp_inf>
    38d6:	aa cf       	rjmp	.-172    	; 0x382c <__fp_szero>
    38d8:	5f 3f       	cpi	r21, 0xFF	; 255
    38da:	ec f3       	brlt	.-6      	; 0x38d6 <__mulsf3_pse+0x82>
    38dc:	98 3e       	cpi	r25, 0xE8	; 232
    38de:	dc f3       	brlt	.-10     	; 0x38d6 <__mulsf3_pse+0x82>
    38e0:	86 95       	lsr	r24
    38e2:	77 95       	ror	r23
    38e4:	67 95       	ror	r22
    38e6:	b7 95       	ror	r27
    38e8:	f7 95       	ror	r31
    38ea:	e7 95       	ror	r30
    38ec:	9f 5f       	subi	r25, 0xFF	; 255
    38ee:	c1 f7       	brne	.-16     	; 0x38e0 <__mulsf3_pse+0x8c>
    38f0:	fe 2b       	or	r31, r30
    38f2:	88 0f       	add	r24, r24
    38f4:	91 1d       	adc	r25, r1
    38f6:	96 95       	lsr	r25
    38f8:	87 95       	ror	r24
    38fa:	97 f9       	bld	r25, 7
    38fc:	08 95       	ret

000038fe <dtostrf>:
    38fe:	ef 92       	push	r14
    3900:	ff 92       	push	r15
    3902:	0f 93       	push	r16
    3904:	1f 93       	push	r17
    3906:	f2 2f       	mov	r31, r18
    3908:	f0 2e       	mov	r15, r16
    390a:	47 fd       	sbrc	r20, 7
    390c:	02 c0       	rjmp	.+4      	; 0x3912 <dtostrf+0x14>
    390e:	e4 e0       	ldi	r30, 0x04	; 4
    3910:	01 c0       	rjmp	.+2      	; 0x3914 <dtostrf+0x16>
    3912:	e4 e1       	ldi	r30, 0x14	; 20
    3914:	24 2f       	mov	r18, r20
    3916:	33 27       	eor	r19, r19
    3918:	27 fd       	sbrc	r18, 7
    391a:	30 95       	com	r19
    391c:	37 ff       	sbrs	r19, 7
    391e:	03 c0       	rjmp	.+6      	; 0x3926 <dtostrf+0x28>
    3920:	30 95       	com	r19
    3922:	21 95       	neg	r18
    3924:	3f 4f       	sbci	r19, 0xFF	; 255
    3926:	4f 2d       	mov	r20, r15
    3928:	51 2f       	mov	r21, r17
    392a:	0f 2f       	mov	r16, r31
    392c:	ee 2e       	mov	r14, r30
    392e:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <dtoa_prf>
    3932:	8f 2d       	mov	r24, r15
    3934:	91 2f       	mov	r25, r17
    3936:	1f 91       	pop	r17
    3938:	0f 91       	pop	r16
    393a:	ff 90       	pop	r15
    393c:	ef 90       	pop	r14
    393e:	08 95       	ret

00003940 <malloc>:
    3940:	cf 93       	push	r28
    3942:	df 93       	push	r29
    3944:	bc 01       	movw	r22, r24
    3946:	82 30       	cpi	r24, 0x02	; 2
    3948:	91 05       	cpc	r25, r1
    394a:	10 f4       	brcc	.+4      	; 0x3950 <malloc+0x10>
    394c:	62 e0       	ldi	r22, 0x02	; 2
    394e:	70 e0       	ldi	r23, 0x00	; 0
    3950:	a0 91 3f 08 	lds	r26, 0x083F
    3954:	b0 91 40 08 	lds	r27, 0x0840
    3958:	ed 01       	movw	r28, r26
    395a:	e0 e0       	ldi	r30, 0x00	; 0
    395c:	f0 e0       	ldi	r31, 0x00	; 0
    395e:	40 e0       	ldi	r20, 0x00	; 0
    3960:	50 e0       	ldi	r21, 0x00	; 0
    3962:	21 c0       	rjmp	.+66     	; 0x39a6 <malloc+0x66>
    3964:	88 81       	ld	r24, Y
    3966:	99 81       	ldd	r25, Y+1	; 0x01
    3968:	86 17       	cp	r24, r22
    396a:	97 07       	cpc	r25, r23
    396c:	69 f4       	brne	.+26     	; 0x3988 <malloc+0x48>
    396e:	8a 81       	ldd	r24, Y+2	; 0x02
    3970:	9b 81       	ldd	r25, Y+3	; 0x03
    3972:	30 97       	sbiw	r30, 0x00	; 0
    3974:	19 f0       	breq	.+6      	; 0x397c <malloc+0x3c>
    3976:	93 83       	std	Z+3, r25	; 0x03
    3978:	82 83       	std	Z+2, r24	; 0x02
    397a:	04 c0       	rjmp	.+8      	; 0x3984 <malloc+0x44>
    397c:	90 93 40 08 	sts	0x0840, r25
    3980:	80 93 3f 08 	sts	0x083F, r24
    3984:	fe 01       	movw	r30, r28
    3986:	34 c0       	rjmp	.+104    	; 0x39f0 <malloc+0xb0>
    3988:	68 17       	cp	r22, r24
    398a:	79 07       	cpc	r23, r25
    398c:	38 f4       	brcc	.+14     	; 0x399c <malloc+0x5c>
    398e:	41 15       	cp	r20, r1
    3990:	51 05       	cpc	r21, r1
    3992:	19 f0       	breq	.+6      	; 0x399a <malloc+0x5a>
    3994:	84 17       	cp	r24, r20
    3996:	95 07       	cpc	r25, r21
    3998:	08 f4       	brcc	.+2      	; 0x399c <malloc+0x5c>
    399a:	ac 01       	movw	r20, r24
    399c:	fe 01       	movw	r30, r28
    399e:	8a 81       	ldd	r24, Y+2	; 0x02
    39a0:	9b 81       	ldd	r25, Y+3	; 0x03
    39a2:	9c 01       	movw	r18, r24
    39a4:	e9 01       	movw	r28, r18
    39a6:	20 97       	sbiw	r28, 0x00	; 0
    39a8:	e9 f6       	brne	.-70     	; 0x3964 <malloc+0x24>
    39aa:	41 15       	cp	r20, r1
    39ac:	51 05       	cpc	r21, r1
    39ae:	a9 f1       	breq	.+106    	; 0x3a1a <malloc+0xda>
    39b0:	ca 01       	movw	r24, r20
    39b2:	86 1b       	sub	r24, r22
    39b4:	97 0b       	sbc	r25, r23
    39b6:	04 97       	sbiw	r24, 0x04	; 4
    39b8:	08 f4       	brcc	.+2      	; 0x39bc <malloc+0x7c>
    39ba:	ba 01       	movw	r22, r20
    39bc:	e0 e0       	ldi	r30, 0x00	; 0
    39be:	f0 e0       	ldi	r31, 0x00	; 0
    39c0:	2a c0       	rjmp	.+84     	; 0x3a16 <malloc+0xd6>
    39c2:	8d 91       	ld	r24, X+
    39c4:	9c 91       	ld	r25, X
    39c6:	11 97       	sbiw	r26, 0x01	; 1
    39c8:	84 17       	cp	r24, r20
    39ca:	95 07       	cpc	r25, r21
    39cc:	f9 f4       	brne	.+62     	; 0x3a0c <malloc+0xcc>
    39ce:	64 17       	cp	r22, r20
    39d0:	75 07       	cpc	r23, r21
    39d2:	81 f4       	brne	.+32     	; 0x39f4 <malloc+0xb4>
    39d4:	12 96       	adiw	r26, 0x02	; 2
    39d6:	8d 91       	ld	r24, X+
    39d8:	9c 91       	ld	r25, X
    39da:	13 97       	sbiw	r26, 0x03	; 3
    39dc:	30 97       	sbiw	r30, 0x00	; 0
    39de:	19 f0       	breq	.+6      	; 0x39e6 <malloc+0xa6>
    39e0:	93 83       	std	Z+3, r25	; 0x03
    39e2:	82 83       	std	Z+2, r24	; 0x02
    39e4:	04 c0       	rjmp	.+8      	; 0x39ee <malloc+0xae>
    39e6:	90 93 40 08 	sts	0x0840, r25
    39ea:	80 93 3f 08 	sts	0x083F, r24
    39ee:	fd 01       	movw	r30, r26
    39f0:	32 96       	adiw	r30, 0x02	; 2
    39f2:	4f c0       	rjmp	.+158    	; 0x3a92 <malloc+0x152>
    39f4:	ca 01       	movw	r24, r20
    39f6:	86 1b       	sub	r24, r22
    39f8:	97 0b       	sbc	r25, r23
    39fa:	fd 01       	movw	r30, r26
    39fc:	e8 0f       	add	r30, r24
    39fe:	f9 1f       	adc	r31, r25
    3a00:	61 93       	st	Z+, r22
    3a02:	71 93       	st	Z+, r23
    3a04:	02 97       	sbiw	r24, 0x02	; 2
    3a06:	8d 93       	st	X+, r24
    3a08:	9c 93       	st	X, r25
    3a0a:	43 c0       	rjmp	.+134    	; 0x3a92 <malloc+0x152>
    3a0c:	fd 01       	movw	r30, r26
    3a0e:	82 81       	ldd	r24, Z+2	; 0x02
    3a10:	93 81       	ldd	r25, Z+3	; 0x03
    3a12:	9c 01       	movw	r18, r24
    3a14:	d9 01       	movw	r26, r18
    3a16:	10 97       	sbiw	r26, 0x00	; 0
    3a18:	a1 f6       	brne	.-88     	; 0x39c2 <malloc+0x82>
    3a1a:	80 91 3d 08 	lds	r24, 0x083D
    3a1e:	90 91 3e 08 	lds	r25, 0x083E
    3a22:	89 2b       	or	r24, r25
    3a24:	41 f4       	brne	.+16     	; 0x3a36 <malloc+0xf6>
    3a26:	80 91 82 05 	lds	r24, 0x0582
    3a2a:	90 91 83 05 	lds	r25, 0x0583
    3a2e:	90 93 3e 08 	sts	0x083E, r25
    3a32:	80 93 3d 08 	sts	0x083D, r24
    3a36:	40 91 84 05 	lds	r20, 0x0584
    3a3a:	50 91 85 05 	lds	r21, 0x0585
    3a3e:	41 15       	cp	r20, r1
    3a40:	51 05       	cpc	r21, r1
    3a42:	41 f4       	brne	.+16     	; 0x3a54 <malloc+0x114>
    3a44:	4d b7       	in	r20, 0x3d	; 61
    3a46:	5e b7       	in	r21, 0x3e	; 62
    3a48:	80 91 80 05 	lds	r24, 0x0580
    3a4c:	90 91 81 05 	lds	r25, 0x0581
    3a50:	48 1b       	sub	r20, r24
    3a52:	59 0b       	sbc	r21, r25
    3a54:	20 91 3d 08 	lds	r18, 0x083D
    3a58:	30 91 3e 08 	lds	r19, 0x083E
    3a5c:	24 17       	cp	r18, r20
    3a5e:	35 07       	cpc	r19, r21
    3a60:	b0 f4       	brcc	.+44     	; 0x3a8e <malloc+0x14e>
    3a62:	ca 01       	movw	r24, r20
    3a64:	82 1b       	sub	r24, r18
    3a66:	93 0b       	sbc	r25, r19
    3a68:	86 17       	cp	r24, r22
    3a6a:	97 07       	cpc	r25, r23
    3a6c:	80 f0       	brcs	.+32     	; 0x3a8e <malloc+0x14e>
    3a6e:	ab 01       	movw	r20, r22
    3a70:	4e 5f       	subi	r20, 0xFE	; 254
    3a72:	5f 4f       	sbci	r21, 0xFF	; 255
    3a74:	84 17       	cp	r24, r20
    3a76:	95 07       	cpc	r25, r21
    3a78:	50 f0       	brcs	.+20     	; 0x3a8e <malloc+0x14e>
    3a7a:	42 0f       	add	r20, r18
    3a7c:	53 1f       	adc	r21, r19
    3a7e:	50 93 3e 08 	sts	0x083E, r21
    3a82:	40 93 3d 08 	sts	0x083D, r20
    3a86:	f9 01       	movw	r30, r18
    3a88:	61 93       	st	Z+, r22
    3a8a:	71 93       	st	Z+, r23
    3a8c:	02 c0       	rjmp	.+4      	; 0x3a92 <malloc+0x152>
    3a8e:	e0 e0       	ldi	r30, 0x00	; 0
    3a90:	f0 e0       	ldi	r31, 0x00	; 0
    3a92:	cf 01       	movw	r24, r30
    3a94:	df 91       	pop	r29
    3a96:	cf 91       	pop	r28
    3a98:	08 95       	ret

00003a9a <free>:
    3a9a:	cf 93       	push	r28
    3a9c:	df 93       	push	r29
    3a9e:	00 97       	sbiw	r24, 0x00	; 0
    3aa0:	09 f4       	brne	.+2      	; 0x3aa4 <free+0xa>
    3aa2:	50 c0       	rjmp	.+160    	; 0x3b44 <free+0xaa>
    3aa4:	ec 01       	movw	r28, r24
    3aa6:	22 97       	sbiw	r28, 0x02	; 2
    3aa8:	1b 82       	std	Y+3, r1	; 0x03
    3aaa:	1a 82       	std	Y+2, r1	; 0x02
    3aac:	a0 91 3f 08 	lds	r26, 0x083F
    3ab0:	b0 91 40 08 	lds	r27, 0x0840
    3ab4:	10 97       	sbiw	r26, 0x00	; 0
    3ab6:	09 f1       	breq	.+66     	; 0x3afa <free+0x60>
    3ab8:	40 e0       	ldi	r20, 0x00	; 0
    3aba:	50 e0       	ldi	r21, 0x00	; 0
    3abc:	ac 17       	cp	r26, r28
    3abe:	bd 07       	cpc	r27, r29
    3ac0:	08 f1       	brcs	.+66     	; 0x3b04 <free+0x6a>
    3ac2:	bb 83       	std	Y+3, r27	; 0x03
    3ac4:	aa 83       	std	Y+2, r26	; 0x02
    3ac6:	fe 01       	movw	r30, r28
    3ac8:	21 91       	ld	r18, Z+
    3aca:	31 91       	ld	r19, Z+
    3acc:	e2 0f       	add	r30, r18
    3ace:	f3 1f       	adc	r31, r19
    3ad0:	ae 17       	cp	r26, r30
    3ad2:	bf 07       	cpc	r27, r31
    3ad4:	79 f4       	brne	.+30     	; 0x3af4 <free+0x5a>
    3ad6:	8d 91       	ld	r24, X+
    3ad8:	9c 91       	ld	r25, X
    3ada:	11 97       	sbiw	r26, 0x01	; 1
    3adc:	28 0f       	add	r18, r24
    3ade:	39 1f       	adc	r19, r25
    3ae0:	2e 5f       	subi	r18, 0xFE	; 254
    3ae2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ae4:	39 83       	std	Y+1, r19	; 0x01
    3ae6:	28 83       	st	Y, r18
    3ae8:	12 96       	adiw	r26, 0x02	; 2
    3aea:	8d 91       	ld	r24, X+
    3aec:	9c 91       	ld	r25, X
    3aee:	13 97       	sbiw	r26, 0x03	; 3
    3af0:	9b 83       	std	Y+3, r25	; 0x03
    3af2:	8a 83       	std	Y+2, r24	; 0x02
    3af4:	41 15       	cp	r20, r1
    3af6:	51 05       	cpc	r21, r1
    3af8:	71 f4       	brne	.+28     	; 0x3b16 <free+0x7c>
    3afa:	d0 93 40 08 	sts	0x0840, r29
    3afe:	c0 93 3f 08 	sts	0x083F, r28
    3b02:	20 c0       	rjmp	.+64     	; 0x3b44 <free+0xaa>
    3b04:	12 96       	adiw	r26, 0x02	; 2
    3b06:	8d 91       	ld	r24, X+
    3b08:	9c 91       	ld	r25, X
    3b0a:	13 97       	sbiw	r26, 0x03	; 3
    3b0c:	ad 01       	movw	r20, r26
    3b0e:	00 97       	sbiw	r24, 0x00	; 0
    3b10:	11 f0       	breq	.+4      	; 0x3b16 <free+0x7c>
    3b12:	dc 01       	movw	r26, r24
    3b14:	d3 cf       	rjmp	.-90     	; 0x3abc <free+0x22>
    3b16:	fa 01       	movw	r30, r20
    3b18:	d3 83       	std	Z+3, r29	; 0x03
    3b1a:	c2 83       	std	Z+2, r28	; 0x02
    3b1c:	21 91       	ld	r18, Z+
    3b1e:	31 91       	ld	r19, Z+
    3b20:	e2 0f       	add	r30, r18
    3b22:	f3 1f       	adc	r31, r19
    3b24:	ce 17       	cp	r28, r30
    3b26:	df 07       	cpc	r29, r31
    3b28:	69 f4       	brne	.+26     	; 0x3b44 <free+0xaa>
    3b2a:	88 81       	ld	r24, Y
    3b2c:	99 81       	ldd	r25, Y+1	; 0x01
    3b2e:	28 0f       	add	r18, r24
    3b30:	39 1f       	adc	r19, r25
    3b32:	2e 5f       	subi	r18, 0xFE	; 254
    3b34:	3f 4f       	sbci	r19, 0xFF	; 255
    3b36:	fa 01       	movw	r30, r20
    3b38:	31 83       	std	Z+1, r19	; 0x01
    3b3a:	20 83       	st	Z, r18
    3b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b3e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b40:	93 83       	std	Z+3, r25	; 0x03
    3b42:	82 83       	std	Z+2, r24	; 0x02
    3b44:	df 91       	pop	r29
    3b46:	cf 91       	pop	r28
    3b48:	08 95       	ret

00003b4a <exit>:
    3b4a:	f8 94       	cli
    3b4c:	0c 94 b3 21 	jmp	0x4366	; 0x4366 <_exit>

00003b50 <strchr_P>:
    3b50:	fc 01       	movw	r30, r24
    3b52:	05 90       	lpm	r0, Z+
    3b54:	06 16       	cp	r0, r22
    3b56:	21 f0       	breq	.+8      	; 0x3b60 <strchr_P+0x10>
    3b58:	00 20       	and	r0, r0
    3b5a:	d9 f7       	brne	.-10     	; 0x3b52 <strchr_P+0x2>
    3b5c:	c0 01       	movw	r24, r0
    3b5e:	08 95       	ret
    3b60:	31 97       	sbiw	r30, 0x01	; 1
    3b62:	cf 01       	movw	r24, r30
    3b64:	08 95       	ret

00003b66 <memcpy>:
    3b66:	fb 01       	movw	r30, r22
    3b68:	dc 01       	movw	r26, r24
    3b6a:	02 c0       	rjmp	.+4      	; 0x3b70 <memcpy+0xa>
    3b6c:	01 90       	ld	r0, Z+
    3b6e:	0d 92       	st	X+, r0
    3b70:	41 50       	subi	r20, 0x01	; 1
    3b72:	50 40       	sbci	r21, 0x00	; 0
    3b74:	d8 f7       	brcc	.-10     	; 0x3b6c <memcpy+0x6>
    3b76:	08 95       	ret

00003b78 <ltoa>:
    3b78:	fa 01       	movw	r30, r20
    3b7a:	cf 93       	push	r28
    3b7c:	ff 93       	push	r31
    3b7e:	ef 93       	push	r30
    3b80:	22 30       	cpi	r18, 0x02	; 2
    3b82:	44 f1       	brlt	.+80     	; 0x3bd4 <ltoa+0x5c>
    3b84:	25 32       	cpi	r18, 0x25	; 37
    3b86:	34 f5       	brge	.+76     	; 0x3bd4 <ltoa+0x5c>
    3b88:	c2 2f       	mov	r28, r18
    3b8a:	e8 94       	clt
    3b8c:	ca 30       	cpi	r28, 0x0A	; 10
    3b8e:	49 f4       	brne	.+18     	; 0x3ba2 <ltoa+0x2a>
    3b90:	97 fb       	bst	r25, 7
    3b92:	3e f4       	brtc	.+14     	; 0x3ba2 <ltoa+0x2a>
    3b94:	90 95       	com	r25
    3b96:	80 95       	com	r24
    3b98:	70 95       	com	r23
    3b9a:	61 95       	neg	r22
    3b9c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b9e:	8f 4f       	sbci	r24, 0xFF	; 255
    3ba0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ba2:	2c 2f       	mov	r18, r28
    3ba4:	33 27       	eor	r19, r19
    3ba6:	44 27       	eor	r20, r20
    3ba8:	55 27       	eor	r21, r21
    3baa:	ff 93       	push	r31
    3bac:	ef 93       	push	r30
    3bae:	0e 94 39 21 	call	0x4272	; 0x4272 <__udivmodsi4>
    3bb2:	ef 91       	pop	r30
    3bb4:	ff 91       	pop	r31
    3bb6:	60 5d       	subi	r22, 0xD0	; 208
    3bb8:	6a 33       	cpi	r22, 0x3A	; 58
    3bba:	0c f0       	brlt	.+2      	; 0x3bbe <ltoa+0x46>
    3bbc:	69 5d       	subi	r22, 0xD9	; 217
    3bbe:	61 93       	st	Z+, r22
    3bc0:	b9 01       	movw	r22, r18
    3bc2:	ca 01       	movw	r24, r20
    3bc4:	60 50       	subi	r22, 0x00	; 0
    3bc6:	70 40       	sbci	r23, 0x00	; 0
    3bc8:	80 40       	sbci	r24, 0x00	; 0
    3bca:	90 40       	sbci	r25, 0x00	; 0
    3bcc:	51 f7       	brne	.-44     	; 0x3ba2 <ltoa+0x2a>
    3bce:	16 f4       	brtc	.+4      	; 0x3bd4 <ltoa+0x5c>
    3bd0:	cd e2       	ldi	r28, 0x2D	; 45
    3bd2:	c1 93       	st	Z+, r28
    3bd4:	10 82       	st	Z, r1
    3bd6:	8f 91       	pop	r24
    3bd8:	9f 91       	pop	r25
    3bda:	cf 91       	pop	r28
    3bdc:	0c 94 f6 20 	jmp	0x41ec	; 0x41ec <strrev>

00003be0 <ultoa>:
    3be0:	fa 01       	movw	r30, r20
    3be2:	cf 93       	push	r28
    3be4:	ff 93       	push	r31
    3be6:	ef 93       	push	r30
    3be8:	22 30       	cpi	r18, 0x02	; 2
    3bea:	cc f0       	brlt	.+50     	; 0x3c1e <ultoa+0x3e>
    3bec:	25 32       	cpi	r18, 0x25	; 37
    3bee:	bc f4       	brge	.+46     	; 0x3c1e <ultoa+0x3e>
    3bf0:	c2 2f       	mov	r28, r18
    3bf2:	2c 2f       	mov	r18, r28
    3bf4:	33 27       	eor	r19, r19
    3bf6:	44 27       	eor	r20, r20
    3bf8:	55 27       	eor	r21, r21
    3bfa:	ff 93       	push	r31
    3bfc:	ef 93       	push	r30
    3bfe:	0e 94 39 21 	call	0x4272	; 0x4272 <__udivmodsi4>
    3c02:	ef 91       	pop	r30
    3c04:	ff 91       	pop	r31
    3c06:	60 5d       	subi	r22, 0xD0	; 208
    3c08:	6a 33       	cpi	r22, 0x3A	; 58
    3c0a:	0c f0       	brlt	.+2      	; 0x3c0e <ultoa+0x2e>
    3c0c:	69 5d       	subi	r22, 0xD9	; 217
    3c0e:	61 93       	st	Z+, r22
    3c10:	b9 01       	movw	r22, r18
    3c12:	ca 01       	movw	r24, r20
    3c14:	60 50       	subi	r22, 0x00	; 0
    3c16:	70 40       	sbci	r23, 0x00	; 0
    3c18:	80 40       	sbci	r24, 0x00	; 0
    3c1a:	90 40       	sbci	r25, 0x00	; 0
    3c1c:	51 f7       	brne	.-44     	; 0x3bf2 <ultoa+0x12>
    3c1e:	10 82       	st	Z, r1
    3c20:	8f 91       	pop	r24
    3c22:	9f 91       	pop	r25
    3c24:	cf 91       	pop	r28
    3c26:	0c 94 f6 20 	jmp	0x41ec	; 0x41ec <strrev>

00003c2a <fprintf_P>:
    3c2a:	a0 e0       	ldi	r26, 0x00	; 0
    3c2c:	b0 e0       	ldi	r27, 0x00	; 0
    3c2e:	eb e1       	ldi	r30, 0x1B	; 27
    3c30:	fe e1       	ldi	r31, 0x1E	; 30
    3c32:	0c 94 84 21 	jmp	0x4308	; 0x4308 <__prologue_saves__+0x1c>
    3c36:	0f 81       	ldd	r16, Y+7	; 0x07
    3c38:	18 85       	ldd	r17, Y+8	; 0x08
    3c3a:	9e 01       	movw	r18, r28
    3c3c:	25 5f       	subi	r18, 0xF5	; 245
    3c3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c40:	f8 01       	movw	r30, r16
    3c42:	83 81       	ldd	r24, Z+3	; 0x03
    3c44:	88 60       	ori	r24, 0x08	; 8
    3c46:	83 83       	std	Z+3, r24	; 0x03
    3c48:	c8 01       	movw	r24, r16
    3c4a:	69 85       	ldd	r22, Y+9	; 0x09
    3c4c:	7a 85       	ldd	r23, Y+10	; 0x0a
    3c4e:	a9 01       	movw	r20, r18
    3c50:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <vfprintf>
    3c54:	f8 01       	movw	r30, r16
    3c56:	23 81       	ldd	r18, Z+3	; 0x03
    3c58:	27 7f       	andi	r18, 0xF7	; 247
    3c5a:	23 83       	std	Z+3, r18	; 0x03
    3c5c:	20 96       	adiw	r28, 0x00	; 0
    3c5e:	e4 e0       	ldi	r30, 0x04	; 4
    3c60:	0c 94 a0 21 	jmp	0x4340	; 0x4340 <__epilogue_restores__+0x1c>

00003c64 <fputc>:
    3c64:	0f 93       	push	r16
    3c66:	1f 93       	push	r17
    3c68:	cf 93       	push	r28
    3c6a:	df 93       	push	r29
    3c6c:	8c 01       	movw	r16, r24
    3c6e:	eb 01       	movw	r28, r22
    3c70:	8b 81       	ldd	r24, Y+3	; 0x03
    3c72:	81 ff       	sbrs	r24, 1
    3c74:	1b c0       	rjmp	.+54     	; 0x3cac <fputc+0x48>
    3c76:	82 ff       	sbrs	r24, 2
    3c78:	0d c0       	rjmp	.+26     	; 0x3c94 <fputc+0x30>
    3c7a:	2e 81       	ldd	r18, Y+6	; 0x06
    3c7c:	3f 81       	ldd	r19, Y+7	; 0x07
    3c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    3c80:	9d 81       	ldd	r25, Y+5	; 0x05
    3c82:	28 17       	cp	r18, r24
    3c84:	39 07       	cpc	r19, r25
    3c86:	64 f4       	brge	.+24     	; 0x3ca0 <fputc+0x3c>
    3c88:	e8 81       	ld	r30, Y
    3c8a:	f9 81       	ldd	r31, Y+1	; 0x01
    3c8c:	01 93       	st	Z+, r16
    3c8e:	f9 83       	std	Y+1, r31	; 0x01
    3c90:	e8 83       	st	Y, r30
    3c92:	06 c0       	rjmp	.+12     	; 0x3ca0 <fputc+0x3c>
    3c94:	e8 85       	ldd	r30, Y+8	; 0x08
    3c96:	f9 85       	ldd	r31, Y+9	; 0x09
    3c98:	80 2f       	mov	r24, r16
    3c9a:	09 95       	icall
    3c9c:	89 2b       	or	r24, r25
    3c9e:	31 f4       	brne	.+12     	; 0x3cac <fputc+0x48>
    3ca0:	8e 81       	ldd	r24, Y+6	; 0x06
    3ca2:	9f 81       	ldd	r25, Y+7	; 0x07
    3ca4:	01 96       	adiw	r24, 0x01	; 1
    3ca6:	9f 83       	std	Y+7, r25	; 0x07
    3ca8:	8e 83       	std	Y+6, r24	; 0x06
    3caa:	02 c0       	rjmp	.+4      	; 0x3cb0 <fputc+0x4c>
    3cac:	0f ef       	ldi	r16, 0xFF	; 255
    3cae:	1f ef       	ldi	r17, 0xFF	; 255
    3cb0:	c8 01       	movw	r24, r16
    3cb2:	df 91       	pop	r29
    3cb4:	cf 91       	pop	r28
    3cb6:	1f 91       	pop	r17
    3cb8:	0f 91       	pop	r16
    3cba:	08 95       	ret

00003cbc <__ultoa_invert>:
    3cbc:	fa 01       	movw	r30, r20
    3cbe:	aa 27       	eor	r26, r26
    3cc0:	28 30       	cpi	r18, 0x08	; 8
    3cc2:	51 f1       	breq	.+84     	; 0x3d18 <__ultoa_invert+0x5c>
    3cc4:	20 31       	cpi	r18, 0x10	; 16
    3cc6:	81 f1       	breq	.+96     	; 0x3d28 <__ultoa_invert+0x6c>
    3cc8:	e8 94       	clt
    3cca:	6f 93       	push	r22
    3ccc:	6e 7f       	andi	r22, 0xFE	; 254
    3cce:	6e 5f       	subi	r22, 0xFE	; 254
    3cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    3cd2:	8f 4f       	sbci	r24, 0xFF	; 255
    3cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    3cd6:	af 4f       	sbci	r26, 0xFF	; 255
    3cd8:	b1 e0       	ldi	r27, 0x01	; 1
    3cda:	3e d0       	rcall	.+124    	; 0x3d58 <__ultoa_invert+0x9c>
    3cdc:	b4 e0       	ldi	r27, 0x04	; 4
    3cde:	3c d0       	rcall	.+120    	; 0x3d58 <__ultoa_invert+0x9c>
    3ce0:	67 0f       	add	r22, r23
    3ce2:	78 1f       	adc	r23, r24
    3ce4:	89 1f       	adc	r24, r25
    3ce6:	9a 1f       	adc	r25, r26
    3ce8:	a1 1d       	adc	r26, r1
    3cea:	68 0f       	add	r22, r24
    3cec:	79 1f       	adc	r23, r25
    3cee:	8a 1f       	adc	r24, r26
    3cf0:	91 1d       	adc	r25, r1
    3cf2:	a1 1d       	adc	r26, r1
    3cf4:	6a 0f       	add	r22, r26
    3cf6:	71 1d       	adc	r23, r1
    3cf8:	81 1d       	adc	r24, r1
    3cfa:	91 1d       	adc	r25, r1
    3cfc:	a1 1d       	adc	r26, r1
    3cfe:	20 d0       	rcall	.+64     	; 0x3d40 <__ultoa_invert+0x84>
    3d00:	09 f4       	brne	.+2      	; 0x3d04 <__ultoa_invert+0x48>
    3d02:	68 94       	set
    3d04:	3f 91       	pop	r19
    3d06:	2a e0       	ldi	r18, 0x0A	; 10
    3d08:	26 9f       	mul	r18, r22
    3d0a:	11 24       	eor	r1, r1
    3d0c:	30 19       	sub	r19, r0
    3d0e:	30 5d       	subi	r19, 0xD0	; 208
    3d10:	31 93       	st	Z+, r19
    3d12:	de f6       	brtc	.-74     	; 0x3cca <__ultoa_invert+0xe>
    3d14:	cf 01       	movw	r24, r30
    3d16:	08 95       	ret
    3d18:	46 2f       	mov	r20, r22
    3d1a:	47 70       	andi	r20, 0x07	; 7
    3d1c:	40 5d       	subi	r20, 0xD0	; 208
    3d1e:	41 93       	st	Z+, r20
    3d20:	b3 e0       	ldi	r27, 0x03	; 3
    3d22:	0f d0       	rcall	.+30     	; 0x3d42 <__ultoa_invert+0x86>
    3d24:	c9 f7       	brne	.-14     	; 0x3d18 <__ultoa_invert+0x5c>
    3d26:	f6 cf       	rjmp	.-20     	; 0x3d14 <__ultoa_invert+0x58>
    3d28:	46 2f       	mov	r20, r22
    3d2a:	4f 70       	andi	r20, 0x0F	; 15
    3d2c:	40 5d       	subi	r20, 0xD0	; 208
    3d2e:	4a 33       	cpi	r20, 0x3A	; 58
    3d30:	18 f0       	brcs	.+6      	; 0x3d38 <__ultoa_invert+0x7c>
    3d32:	49 5d       	subi	r20, 0xD9	; 217
    3d34:	31 fd       	sbrc	r19, 1
    3d36:	40 52       	subi	r20, 0x20	; 32
    3d38:	41 93       	st	Z+, r20
    3d3a:	02 d0       	rcall	.+4      	; 0x3d40 <__ultoa_invert+0x84>
    3d3c:	a9 f7       	brne	.-22     	; 0x3d28 <__ultoa_invert+0x6c>
    3d3e:	ea cf       	rjmp	.-44     	; 0x3d14 <__ultoa_invert+0x58>
    3d40:	b4 e0       	ldi	r27, 0x04	; 4
    3d42:	a6 95       	lsr	r26
    3d44:	97 95       	ror	r25
    3d46:	87 95       	ror	r24
    3d48:	77 95       	ror	r23
    3d4a:	67 95       	ror	r22
    3d4c:	ba 95       	dec	r27
    3d4e:	c9 f7       	brne	.-14     	; 0x3d42 <__ultoa_invert+0x86>
    3d50:	00 97       	sbiw	r24, 0x00	; 0
    3d52:	61 05       	cpc	r22, r1
    3d54:	71 05       	cpc	r23, r1
    3d56:	08 95       	ret
    3d58:	9b 01       	movw	r18, r22
    3d5a:	ac 01       	movw	r20, r24
    3d5c:	0a 2e       	mov	r0, r26
    3d5e:	06 94       	lsr	r0
    3d60:	57 95       	ror	r21
    3d62:	47 95       	ror	r20
    3d64:	37 95       	ror	r19
    3d66:	27 95       	ror	r18
    3d68:	ba 95       	dec	r27
    3d6a:	c9 f7       	brne	.-14     	; 0x3d5e <__ultoa_invert+0xa2>
    3d6c:	62 0f       	add	r22, r18
    3d6e:	73 1f       	adc	r23, r19
    3d70:	84 1f       	adc	r24, r20
    3d72:	95 1f       	adc	r25, r21
    3d74:	a0 1d       	adc	r26, r0
    3d76:	08 95       	ret

00003d78 <dtoa_prf>:
    3d78:	a9 e0       	ldi	r26, 0x09	; 9
    3d7a:	b0 e0       	ldi	r27, 0x00	; 0
    3d7c:	e2 ec       	ldi	r30, 0xC2	; 194
    3d7e:	fe e1       	ldi	r31, 0x1E	; 30
    3d80:	0c 94 7a 21 	jmp	0x42f4	; 0x42f4 <__prologue_saves__+0x8>
    3d84:	6a 01       	movw	r12, r20
    3d86:	12 2f       	mov	r17, r18
    3d88:	a0 2e       	mov	r10, r16
    3d8a:	be 2c       	mov	r11, r14
    3d8c:	2b e3       	ldi	r18, 0x3B	; 59
    3d8e:	20 17       	cp	r18, r16
    3d90:	18 f4       	brcc	.+6      	; 0x3d98 <dtoa_prf+0x20>
    3d92:	2c e3       	ldi	r18, 0x3C	; 60
    3d94:	92 2e       	mov	r9, r18
    3d96:	02 c0       	rjmp	.+4      	; 0x3d9c <dtoa_prf+0x24>
    3d98:	90 2e       	mov	r9, r16
    3d9a:	93 94       	inc	r9
    3d9c:	ae 01       	movw	r20, r28
    3d9e:	4f 5f       	subi	r20, 0xFF	; 255
    3da0:	5f 4f       	sbci	r21, 0xFF	; 255
    3da2:	27 e0       	ldi	r18, 0x07	; 7
    3da4:	09 2d       	mov	r16, r9
    3da6:	0e 94 1e 20 	call	0x403c	; 0x403c <__ftoa_engine>
    3daa:	bc 01       	movw	r22, r24
    3dac:	89 81       	ldd	r24, Y+1	; 0x01
    3dae:	e8 2e       	mov	r14, r24
    3db0:	ff 24       	eor	r15, r15
    3db2:	c7 01       	movw	r24, r14
    3db4:	89 70       	andi	r24, 0x09	; 9
    3db6:	90 70       	andi	r25, 0x00	; 0
    3db8:	01 97       	sbiw	r24, 0x01	; 1
    3dba:	11 f4       	brne	.+4      	; 0x3dc0 <dtoa_prf+0x48>
    3dbc:	ad e2       	ldi	r26, 0x2D	; 45
    3dbe:	09 c0       	rjmp	.+18     	; 0x3dd2 <dtoa_prf+0x5a>
    3dc0:	b1 fe       	sbrs	r11, 1
    3dc2:	02 c0       	rjmp	.+4      	; 0x3dc8 <dtoa_prf+0x50>
    3dc4:	ab e2       	ldi	r26, 0x2B	; 43
    3dc6:	05 c0       	rjmp	.+10     	; 0x3dd2 <dtoa_prf+0x5a>
    3dc8:	b0 fc       	sbrc	r11, 0
    3dca:	02 c0       	rjmp	.+4      	; 0x3dd0 <dtoa_prf+0x58>
    3dcc:	a0 e0       	ldi	r26, 0x00	; 0
    3dce:	01 c0       	rjmp	.+2      	; 0x3dd2 <dtoa_prf+0x5a>
    3dd0:	a0 e2       	ldi	r26, 0x20	; 32
    3dd2:	e3 fe       	sbrs	r14, 3
    3dd4:	3b c0       	rjmp	.+118    	; 0x3e4c <dtoa_prf+0xd4>
    3dd6:	aa 23       	and	r26, r26
    3dd8:	11 f4       	brne	.+4      	; 0x3dde <dtoa_prf+0x66>
    3dda:	23 e0       	ldi	r18, 0x03	; 3
    3ddc:	01 c0       	rjmp	.+2      	; 0x3de0 <dtoa_prf+0x68>
    3dde:	24 e0       	ldi	r18, 0x04	; 4
    3de0:	21 17       	cp	r18, r17
    3de2:	10 f0       	brcs	.+4      	; 0x3de8 <dtoa_prf+0x70>
    3de4:	20 e0       	ldi	r18, 0x00	; 0
    3de6:	02 c0       	rjmp	.+4      	; 0x3dec <dtoa_prf+0x74>
    3de8:	12 1b       	sub	r17, r18
    3dea:	21 2f       	mov	r18, r17
    3dec:	eb 2c       	mov	r14, r11
    3dee:	b4 fe       	sbrs	r11, 4
    3df0:	02 c0       	rjmp	.+4      	; 0x3df6 <dtoa_prf+0x7e>
    3df2:	32 2f       	mov	r19, r18
    3df4:	0a c0       	rjmp	.+20     	; 0x3e0a <dtoa_prf+0x92>
    3df6:	f6 01       	movw	r30, r12
    3df8:	32 2f       	mov	r19, r18
    3dfa:	80 e2       	ldi	r24, 0x20	; 32
    3dfc:	02 c0       	rjmp	.+4      	; 0x3e02 <dtoa_prf+0x8a>
    3dfe:	81 93       	st	Z+, r24
    3e00:	31 50       	subi	r19, 0x01	; 1
    3e02:	33 23       	and	r19, r19
    3e04:	e1 f7       	brne	.-8      	; 0x3dfe <dtoa_prf+0x86>
    3e06:	c2 0e       	add	r12, r18
    3e08:	d1 1c       	adc	r13, r1
    3e0a:	aa 23       	and	r26, r26
    3e0c:	19 f0       	breq	.+6      	; 0x3e14 <dtoa_prf+0x9c>
    3e0e:	f6 01       	movw	r30, r12
    3e10:	a1 93       	st	Z+, r26
    3e12:	6f 01       	movw	r12, r30
    3e14:	f6 01       	movw	r30, r12
    3e16:	31 96       	adiw	r30, 0x01	; 1
    3e18:	e2 fe       	sbrs	r14, 2
    3e1a:	05 c0       	rjmp	.+10     	; 0x3e26 <dtoa_prf+0xae>
    3e1c:	9e e4       	ldi	r25, 0x4E	; 78
    3e1e:	d6 01       	movw	r26, r12
    3e20:	9c 93       	st	X, r25
    3e22:	81 e4       	ldi	r24, 0x41	; 65
    3e24:	04 c0       	rjmp	.+8      	; 0x3e2e <dtoa_prf+0xb6>
    3e26:	9e e6       	ldi	r25, 0x6E	; 110
    3e28:	d6 01       	movw	r26, r12
    3e2a:	9c 93       	st	X, r25
    3e2c:	81 e6       	ldi	r24, 0x61	; 97
    3e2e:	11 96       	adiw	r26, 0x01	; 1
    3e30:	8c 93       	st	X, r24
    3e32:	91 83       	std	Z+1, r25	; 0x01
    3e34:	32 96       	adiw	r30, 0x02	; 2
    3e36:	df 01       	movw	r26, r30
    3e38:	83 2f       	mov	r24, r19
    3e3a:	90 e2       	ldi	r25, 0x20	; 32
    3e3c:	02 c0       	rjmp	.+4      	; 0x3e42 <dtoa_prf+0xca>
    3e3e:	9d 93       	st	X+, r25
    3e40:	81 50       	subi	r24, 0x01	; 1
    3e42:	88 23       	and	r24, r24
    3e44:	e1 f7       	brne	.-8      	; 0x3e3e <dtoa_prf+0xc6>
    3e46:	e3 0f       	add	r30, r19
    3e48:	f1 1d       	adc	r31, r1
    3e4a:	40 c0       	rjmp	.+128    	; 0x3ecc <dtoa_prf+0x154>
    3e4c:	e2 fe       	sbrs	r14, 2
    3e4e:	42 c0       	rjmp	.+132    	; 0x3ed4 <dtoa_prf+0x15c>
    3e50:	aa 23       	and	r26, r26
    3e52:	11 f4       	brne	.+4      	; 0x3e58 <dtoa_prf+0xe0>
    3e54:	23 e0       	ldi	r18, 0x03	; 3
    3e56:	01 c0       	rjmp	.+2      	; 0x3e5a <dtoa_prf+0xe2>
    3e58:	24 e0       	ldi	r18, 0x04	; 4
    3e5a:	21 17       	cp	r18, r17
    3e5c:	10 f0       	brcs	.+4      	; 0x3e62 <dtoa_prf+0xea>
    3e5e:	20 e0       	ldi	r18, 0x00	; 0
    3e60:	02 c0       	rjmp	.+4      	; 0x3e66 <dtoa_prf+0xee>
    3e62:	12 1b       	sub	r17, r18
    3e64:	21 2f       	mov	r18, r17
    3e66:	eb 2c       	mov	r14, r11
    3e68:	b4 fe       	sbrs	r11, 4
    3e6a:	02 c0       	rjmp	.+4      	; 0x3e70 <dtoa_prf+0xf8>
    3e6c:	92 2f       	mov	r25, r18
    3e6e:	0a c0       	rjmp	.+20     	; 0x3e84 <dtoa_prf+0x10c>
    3e70:	f6 01       	movw	r30, r12
    3e72:	92 2f       	mov	r25, r18
    3e74:	80 e2       	ldi	r24, 0x20	; 32
    3e76:	02 c0       	rjmp	.+4      	; 0x3e7c <dtoa_prf+0x104>
    3e78:	81 93       	st	Z+, r24
    3e7a:	91 50       	subi	r25, 0x01	; 1
    3e7c:	99 23       	and	r25, r25
    3e7e:	e1 f7       	brne	.-8      	; 0x3e78 <dtoa_prf+0x100>
    3e80:	c2 0e       	add	r12, r18
    3e82:	d1 1c       	adc	r13, r1
    3e84:	aa 23       	and	r26, r26
    3e86:	19 f0       	breq	.+6      	; 0x3e8e <dtoa_prf+0x116>
    3e88:	f6 01       	movw	r30, r12
    3e8a:	a1 93       	st	Z+, r26
    3e8c:	6f 01       	movw	r12, r30
    3e8e:	f6 01       	movw	r30, r12
    3e90:	31 96       	adiw	r30, 0x01	; 1
    3e92:	e2 fe       	sbrs	r14, 2
    3e94:	08 c0       	rjmp	.+16     	; 0x3ea6 <dtoa_prf+0x12e>
    3e96:	89 e4       	ldi	r24, 0x49	; 73
    3e98:	d6 01       	movw	r26, r12
    3e9a:	8c 93       	st	X, r24
    3e9c:	8e e4       	ldi	r24, 0x4E	; 78
    3e9e:	11 96       	adiw	r26, 0x01	; 1
    3ea0:	8c 93       	st	X, r24
    3ea2:	86 e4       	ldi	r24, 0x46	; 70
    3ea4:	07 c0       	rjmp	.+14     	; 0x3eb4 <dtoa_prf+0x13c>
    3ea6:	89 e6       	ldi	r24, 0x69	; 105
    3ea8:	d6 01       	movw	r26, r12
    3eaa:	8c 93       	st	X, r24
    3eac:	8e e6       	ldi	r24, 0x6E	; 110
    3eae:	11 96       	adiw	r26, 0x01	; 1
    3eb0:	8c 93       	st	X, r24
    3eb2:	86 e6       	ldi	r24, 0x66	; 102
    3eb4:	81 83       	std	Z+1, r24	; 0x01
    3eb6:	32 96       	adiw	r30, 0x02	; 2
    3eb8:	df 01       	movw	r26, r30
    3eba:	89 2f       	mov	r24, r25
    3ebc:	20 e2       	ldi	r18, 0x20	; 32
    3ebe:	02 c0       	rjmp	.+4      	; 0x3ec4 <dtoa_prf+0x14c>
    3ec0:	2d 93       	st	X+, r18
    3ec2:	81 50       	subi	r24, 0x01	; 1
    3ec4:	88 23       	and	r24, r24
    3ec6:	e1 f7       	brne	.-8      	; 0x3ec0 <dtoa_prf+0x148>
    3ec8:	e9 0f       	add	r30, r25
    3eca:	f1 1d       	adc	r31, r1
    3ecc:	10 82       	st	Z, r1
    3ece:	2e ef       	ldi	r18, 0xFE	; 254
    3ed0:	3f ef       	ldi	r19, 0xFF	; 255
    3ed2:	af c0       	rjmp	.+350    	; 0x4032 <dtoa_prf+0x2ba>
    3ed4:	16 16       	cp	r1, r22
    3ed6:	17 06       	cpc	r1, r23
    3ed8:	1c f0       	brlt	.+6      	; 0x3ee0 <dtoa_prf+0x168>
    3eda:	41 e0       	ldi	r20, 0x01	; 1
    3edc:	50 e0       	ldi	r21, 0x00	; 0
    3ede:	03 c0       	rjmp	.+6      	; 0x3ee6 <dtoa_prf+0x16e>
    3ee0:	ab 01       	movw	r20, r22
    3ee2:	4f 5f       	subi	r20, 0xFF	; 255
    3ee4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ee6:	aa 20       	and	r10, r10
    3ee8:	19 f4       	brne	.+6      	; 0x3ef0 <dtoa_prf+0x178>
    3eea:	80 e0       	ldi	r24, 0x00	; 0
    3eec:	90 e0       	ldi	r25, 0x00	; 0
    3eee:	03 c0       	rjmp	.+6      	; 0x3ef6 <dtoa_prf+0x17e>
    3ef0:	8a 2d       	mov	r24, r10
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	01 96       	adiw	r24, 0x01	; 1
    3ef6:	20 e0       	ldi	r18, 0x00	; 0
    3ef8:	30 e0       	ldi	r19, 0x00	; 0
    3efa:	aa 23       	and	r26, r26
    3efc:	11 f0       	breq	.+4      	; 0x3f02 <dtoa_prf+0x18a>
    3efe:	21 e0       	ldi	r18, 0x01	; 1
    3f00:	30 e0       	ldi	r19, 0x00	; 0
    3f02:	24 0f       	add	r18, r20
    3f04:	35 1f       	adc	r19, r21
    3f06:	28 0f       	add	r18, r24
    3f08:	39 1f       	adc	r19, r25
    3f0a:	81 2f       	mov	r24, r17
    3f0c:	90 e0       	ldi	r25, 0x00	; 0
    3f0e:	28 17       	cp	r18, r24
    3f10:	39 07       	cpc	r19, r25
    3f12:	14 f0       	brlt	.+4      	; 0x3f18 <dtoa_prf+0x1a0>
    3f14:	20 e0       	ldi	r18, 0x00	; 0
    3f16:	02 c0       	rjmp	.+4      	; 0x3f1c <dtoa_prf+0x1a4>
    3f18:	12 1b       	sub	r17, r18
    3f1a:	21 2f       	mov	r18, r17
    3f1c:	4b 2d       	mov	r20, r11
    3f1e:	50 e0       	ldi	r21, 0x00	; 0
    3f20:	ca 01       	movw	r24, r20
    3f22:	80 71       	andi	r24, 0x10	; 16
    3f24:	90 70       	andi	r25, 0x00	; 0
    3f26:	b4 fc       	sbrc	r11, 4
    3f28:	0d c0       	rjmp	.+26     	; 0x3f44 <dtoa_prf+0x1cc>
    3f2a:	b3 fc       	sbrc	r11, 3
    3f2c:	0b c0       	rjmp	.+22     	; 0x3f44 <dtoa_prf+0x1cc>
    3f2e:	f6 01       	movw	r30, r12
    3f30:	32 2f       	mov	r19, r18
    3f32:	40 e2       	ldi	r20, 0x20	; 32
    3f34:	02 c0       	rjmp	.+4      	; 0x3f3a <dtoa_prf+0x1c2>
    3f36:	41 93       	st	Z+, r20
    3f38:	31 50       	subi	r19, 0x01	; 1
    3f3a:	33 23       	and	r19, r19
    3f3c:	e1 f7       	brne	.-8      	; 0x3f36 <dtoa_prf+0x1be>
    3f3e:	c2 0e       	add	r12, r18
    3f40:	d1 1c       	adc	r13, r1
    3f42:	01 c0       	rjmp	.+2      	; 0x3f46 <dtoa_prf+0x1ce>
    3f44:	32 2f       	mov	r19, r18
    3f46:	aa 23       	and	r26, r26
    3f48:	19 f0       	breq	.+6      	; 0x3f50 <dtoa_prf+0x1d8>
    3f4a:	f6 01       	movw	r30, r12
    3f4c:	a1 93       	st	Z+, r26
    3f4e:	6f 01       	movw	r12, r30
    3f50:	89 2b       	or	r24, r25
    3f52:	11 f0       	breq	.+4      	; 0x3f58 <dtoa_prf+0x1e0>
    3f54:	13 2f       	mov	r17, r19
    3f56:	0a c0       	rjmp	.+20     	; 0x3f6c <dtoa_prf+0x1f4>
    3f58:	f6 01       	movw	r30, r12
    3f5a:	13 2f       	mov	r17, r19
    3f5c:	80 e3       	ldi	r24, 0x30	; 48
    3f5e:	02 c0       	rjmp	.+4      	; 0x3f64 <dtoa_prf+0x1ec>
    3f60:	81 93       	st	Z+, r24
    3f62:	11 50       	subi	r17, 0x01	; 1
    3f64:	11 23       	and	r17, r17
    3f66:	e1 f7       	brne	.-8      	; 0x3f60 <dtoa_prf+0x1e8>
    3f68:	c3 0e       	add	r12, r19
    3f6a:	d1 1c       	adc	r13, r1
    3f6c:	09 2d       	mov	r16, r9
    3f6e:	06 0f       	add	r16, r22
    3f70:	ba 80       	ldd	r11, Y+2	; 0x02
    3f72:	90 e1       	ldi	r25, 0x10	; 16
    3f74:	89 2e       	mov	r8, r25
    3f76:	91 2c       	mov	r9, r1
    3f78:	8e 20       	and	r8, r14
    3f7a:	9f 20       	and	r9, r15
    3f7c:	e4 fe       	sbrs	r14, 4
    3f7e:	04 c0       	rjmp	.+8      	; 0x3f88 <dtoa_prf+0x210>
    3f80:	f1 e3       	ldi	r31, 0x31	; 49
    3f82:	bf 16       	cp	r11, r31
    3f84:	09 f4       	brne	.+2      	; 0x3f88 <dtoa_prf+0x210>
    3f86:	01 50       	subi	r16, 0x01	; 1
    3f88:	10 16       	cp	r1, r16
    3f8a:	14 f0       	brlt	.+4      	; 0x3f90 <dtoa_prf+0x218>
    3f8c:	01 e0       	ldi	r16, 0x01	; 1
    3f8e:	03 c0       	rjmp	.+6      	; 0x3f96 <dtoa_prf+0x21e>
    3f90:	09 30       	cpi	r16, 0x09	; 9
    3f92:	08 f0       	brcs	.+2      	; 0x3f96 <dtoa_prf+0x21e>
    3f94:	08 e0       	ldi	r16, 0x08	; 8
    3f96:	9b 01       	movw	r18, r22
    3f98:	77 ff       	sbrs	r23, 7
    3f9a:	02 c0       	rjmp	.+4      	; 0x3fa0 <dtoa_prf+0x228>
    3f9c:	20 e0       	ldi	r18, 0x00	; 0
    3f9e:	30 e0       	ldi	r19, 0x00	; 0
    3fa0:	cb 01       	movw	r24, r22
    3fa2:	01 96       	adiw	r24, 0x01	; 1
    3fa4:	82 1b       	sub	r24, r18
    3fa6:	93 0b       	sbc	r25, r19
    3fa8:	fe 01       	movw	r30, r28
    3faa:	31 96       	adiw	r30, 0x01	; 1
    3fac:	e8 0f       	add	r30, r24
    3fae:	f9 1f       	adc	r31, r25
    3fb0:	8e e2       	ldi	r24, 0x2E	; 46
    3fb2:	f8 2e       	mov	r15, r24
    3fb4:	3b 01       	movw	r6, r22
    3fb6:	60 1a       	sub	r6, r16
    3fb8:	71 08       	sbc	r7, r1
    3fba:	8a 2d       	mov	r24, r10
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	44 27       	eor	r20, r20
    3fc0:	55 27       	eor	r21, r21
    3fc2:	48 1b       	sub	r20, r24
    3fc4:	59 0b       	sbc	r21, r25
    3fc6:	8f ef       	ldi	r24, 0xFF	; 255
    3fc8:	2f 3f       	cpi	r18, 0xFF	; 255
    3fca:	38 07       	cpc	r19, r24
    3fcc:	19 f4       	brne	.+6      	; 0x3fd4 <dtoa_prf+0x25c>
    3fce:	d6 01       	movw	r26, r12
    3fd0:	fd 92       	st	X+, r15
    3fd2:	6d 01       	movw	r12, r26
    3fd4:	62 17       	cp	r22, r18
    3fd6:	73 07       	cpc	r23, r19
    3fd8:	2c f0       	brlt	.+10     	; 0x3fe4 <dtoa_prf+0x26c>
    3fda:	62 16       	cp	r6, r18
    3fdc:	73 06       	cpc	r7, r19
    3fde:	14 f4       	brge	.+4      	; 0x3fe4 <dtoa_prf+0x26c>
    3fe0:	80 81       	ld	r24, Z
    3fe2:	01 c0       	rjmp	.+2      	; 0x3fe6 <dtoa_prf+0x26e>
    3fe4:	80 e3       	ldi	r24, 0x30	; 48
    3fe6:	21 50       	subi	r18, 0x01	; 1
    3fe8:	30 40       	sbci	r19, 0x00	; 0
    3fea:	31 96       	adiw	r30, 0x01	; 1
    3fec:	24 17       	cp	r18, r20
    3fee:	35 07       	cpc	r19, r21
    3ff0:	24 f0       	brlt	.+8      	; 0x3ffa <dtoa_prf+0x282>
    3ff2:	d6 01       	movw	r26, r12
    3ff4:	8d 93       	st	X+, r24
    3ff6:	6d 01       	movw	r12, r26
    3ff8:	e6 cf       	rjmp	.-52     	; 0x3fc6 <dtoa_prf+0x24e>
    3ffa:	26 17       	cp	r18, r22
    3ffc:	37 07       	cpc	r19, r23
    3ffe:	49 f4       	brne	.+18     	; 0x4012 <dtoa_prf+0x29a>
    4000:	b5 e3       	ldi	r27, 0x35	; 53
    4002:	bb 15       	cp	r27, r11
    4004:	28 f0       	brcs	.+10     	; 0x4010 <dtoa_prf+0x298>
    4006:	bb 16       	cp	r11, r27
    4008:	21 f4       	brne	.+8      	; 0x4012 <dtoa_prf+0x29a>
    400a:	81 14       	cp	r8, r1
    400c:	91 04       	cpc	r9, r1
    400e:	09 f4       	brne	.+2      	; 0x4012 <dtoa_prf+0x29a>
    4010:	81 e3       	ldi	r24, 0x31	; 49
    4012:	f6 01       	movw	r30, r12
    4014:	81 93       	st	Z+, r24
    4016:	d6 01       	movw	r26, r12
    4018:	81 2f       	mov	r24, r17
    401a:	90 e2       	ldi	r25, 0x20	; 32
    401c:	02 c0       	rjmp	.+4      	; 0x4022 <dtoa_prf+0x2aa>
    401e:	9c 93       	st	X, r25
    4020:	81 50       	subi	r24, 0x01	; 1
    4022:	11 96       	adiw	r26, 0x01	; 1
    4024:	88 23       	and	r24, r24
    4026:	d9 f7       	brne	.-10     	; 0x401e <dtoa_prf+0x2a6>
    4028:	e1 0f       	add	r30, r17
    402a:	f1 1d       	adc	r31, r1
    402c:	10 82       	st	Z, r1
    402e:	20 e0       	ldi	r18, 0x00	; 0
    4030:	30 e0       	ldi	r19, 0x00	; 0
    4032:	c9 01       	movw	r24, r18
    4034:	29 96       	adiw	r28, 0x09	; 9
    4036:	ee e0       	ldi	r30, 0x0E	; 14
    4038:	0c 94 96 21 	jmp	0x432c	; 0x432c <__epilogue_restores__+0x8>

0000403c <__ftoa_engine>:
    403c:	28 30       	cpi	r18, 0x08	; 8
    403e:	08 f0       	brcs	.+2      	; 0x4042 <__ftoa_engine+0x6>
    4040:	27 e0       	ldi	r18, 0x07	; 7
    4042:	33 27       	eor	r19, r19
    4044:	da 01       	movw	r26, r20
    4046:	99 0f       	add	r25, r25
    4048:	31 1d       	adc	r19, r1
    404a:	87 fd       	sbrc	r24, 7
    404c:	91 60       	ori	r25, 0x01	; 1
    404e:	00 96       	adiw	r24, 0x00	; 0
    4050:	61 05       	cpc	r22, r1
    4052:	71 05       	cpc	r23, r1
    4054:	39 f4       	brne	.+14     	; 0x4064 <__ftoa_engine+0x28>
    4056:	32 60       	ori	r19, 0x02	; 2
    4058:	2e 5f       	subi	r18, 0xFE	; 254
    405a:	3d 93       	st	X+, r19
    405c:	30 e3       	ldi	r19, 0x30	; 48
    405e:	2a 95       	dec	r18
    4060:	e1 f7       	brne	.-8      	; 0x405a <__ftoa_engine+0x1e>
    4062:	08 95       	ret
    4064:	9f 3f       	cpi	r25, 0xFF	; 255
    4066:	30 f0       	brcs	.+12     	; 0x4074 <__ftoa_engine+0x38>
    4068:	80 38       	cpi	r24, 0x80	; 128
    406a:	71 05       	cpc	r23, r1
    406c:	61 05       	cpc	r22, r1
    406e:	09 f0       	breq	.+2      	; 0x4072 <__ftoa_engine+0x36>
    4070:	3c 5f       	subi	r19, 0xFC	; 252
    4072:	3c 5f       	subi	r19, 0xFC	; 252
    4074:	3d 93       	st	X+, r19
    4076:	91 30       	cpi	r25, 0x01	; 1
    4078:	08 f0       	brcs	.+2      	; 0x407c <__ftoa_engine+0x40>
    407a:	80 68       	ori	r24, 0x80	; 128
    407c:	91 1d       	adc	r25, r1
    407e:	df 93       	push	r29
    4080:	cf 93       	push	r28
    4082:	1f 93       	push	r17
    4084:	0f 93       	push	r16
    4086:	ff 92       	push	r15
    4088:	ef 92       	push	r14
    408a:	19 2f       	mov	r17, r25
    408c:	98 7f       	andi	r25, 0xF8	; 248
    408e:	96 95       	lsr	r25
    4090:	e9 2f       	mov	r30, r25
    4092:	96 95       	lsr	r25
    4094:	96 95       	lsr	r25
    4096:	e9 0f       	add	r30, r25
    4098:	ff 27       	eor	r31, r31
    409a:	e5 56       	subi	r30, 0x65	; 101
    409c:	fb 4f       	sbci	r31, 0xFB	; 251
    409e:	99 27       	eor	r25, r25
    40a0:	33 27       	eor	r19, r19
    40a2:	ee 24       	eor	r14, r14
    40a4:	ff 24       	eor	r15, r15
    40a6:	a7 01       	movw	r20, r14
    40a8:	e7 01       	movw	r28, r14
    40aa:	05 90       	lpm	r0, Z+
    40ac:	08 94       	sec
    40ae:	07 94       	ror	r0
    40b0:	28 f4       	brcc	.+10     	; 0x40bc <__ftoa_engine+0x80>
    40b2:	36 0f       	add	r19, r22
    40b4:	e7 1e       	adc	r14, r23
    40b6:	f8 1e       	adc	r15, r24
    40b8:	49 1f       	adc	r20, r25
    40ba:	51 1d       	adc	r21, r1
    40bc:	66 0f       	add	r22, r22
    40be:	77 1f       	adc	r23, r23
    40c0:	88 1f       	adc	r24, r24
    40c2:	99 1f       	adc	r25, r25
    40c4:	06 94       	lsr	r0
    40c6:	a1 f7       	brne	.-24     	; 0x40b0 <__ftoa_engine+0x74>
    40c8:	05 90       	lpm	r0, Z+
    40ca:	07 94       	ror	r0
    40cc:	28 f4       	brcc	.+10     	; 0x40d8 <__ftoa_engine+0x9c>
    40ce:	e7 0e       	add	r14, r23
    40d0:	f8 1e       	adc	r15, r24
    40d2:	49 1f       	adc	r20, r25
    40d4:	56 1f       	adc	r21, r22
    40d6:	c1 1d       	adc	r28, r1
    40d8:	77 0f       	add	r23, r23
    40da:	88 1f       	adc	r24, r24
    40dc:	99 1f       	adc	r25, r25
    40de:	66 1f       	adc	r22, r22
    40e0:	06 94       	lsr	r0
    40e2:	a1 f7       	brne	.-24     	; 0x40cc <__ftoa_engine+0x90>
    40e4:	05 90       	lpm	r0, Z+
    40e6:	07 94       	ror	r0
    40e8:	28 f4       	brcc	.+10     	; 0x40f4 <__ftoa_engine+0xb8>
    40ea:	f8 0e       	add	r15, r24
    40ec:	49 1f       	adc	r20, r25
    40ee:	56 1f       	adc	r21, r22
    40f0:	c7 1f       	adc	r28, r23
    40f2:	d1 1d       	adc	r29, r1
    40f4:	88 0f       	add	r24, r24
    40f6:	99 1f       	adc	r25, r25
    40f8:	66 1f       	adc	r22, r22
    40fa:	77 1f       	adc	r23, r23
    40fc:	06 94       	lsr	r0
    40fe:	a1 f7       	brne	.-24     	; 0x40e8 <__ftoa_engine+0xac>
    4100:	05 90       	lpm	r0, Z+
    4102:	07 94       	ror	r0
    4104:	20 f4       	brcc	.+8      	; 0x410e <__ftoa_engine+0xd2>
    4106:	49 0f       	add	r20, r25
    4108:	56 1f       	adc	r21, r22
    410a:	c7 1f       	adc	r28, r23
    410c:	d8 1f       	adc	r29, r24
    410e:	99 0f       	add	r25, r25
    4110:	66 1f       	adc	r22, r22
    4112:	77 1f       	adc	r23, r23
    4114:	88 1f       	adc	r24, r24
    4116:	06 94       	lsr	r0
    4118:	a9 f7       	brne	.-22     	; 0x4104 <__ftoa_engine+0xc8>
    411a:	84 91       	lpm	r24, Z+
    411c:	10 95       	com	r17
    411e:	17 70       	andi	r17, 0x07	; 7
    4120:	41 f0       	breq	.+16     	; 0x4132 <__ftoa_engine+0xf6>
    4122:	d6 95       	lsr	r29
    4124:	c7 95       	ror	r28
    4126:	57 95       	ror	r21
    4128:	47 95       	ror	r20
    412a:	f7 94       	ror	r15
    412c:	e7 94       	ror	r14
    412e:	1a 95       	dec	r17
    4130:	c1 f7       	brne	.-16     	; 0x4122 <__ftoa_engine+0xe6>
    4132:	e1 e4       	ldi	r30, 0x41	; 65
    4134:	f4 e0       	ldi	r31, 0x04	; 4
    4136:	68 94       	set
    4138:	15 90       	lpm	r1, Z+
    413a:	15 91       	lpm	r17, Z+
    413c:	35 91       	lpm	r19, Z+
    413e:	65 91       	lpm	r22, Z+
    4140:	95 91       	lpm	r25, Z+
    4142:	05 90       	lpm	r0, Z+
    4144:	7f e2       	ldi	r23, 0x2F	; 47
    4146:	73 95       	inc	r23
    4148:	e1 18       	sub	r14, r1
    414a:	f1 0a       	sbc	r15, r17
    414c:	43 0b       	sbc	r20, r19
    414e:	56 0b       	sbc	r21, r22
    4150:	c9 0b       	sbc	r28, r25
    4152:	d0 09       	sbc	r29, r0
    4154:	c0 f7       	brcc	.-16     	; 0x4146 <__ftoa_engine+0x10a>
    4156:	e1 0c       	add	r14, r1
    4158:	f1 1e       	adc	r15, r17
    415a:	43 1f       	adc	r20, r19
    415c:	56 1f       	adc	r21, r22
    415e:	c9 1f       	adc	r28, r25
    4160:	d0 1d       	adc	r29, r0
    4162:	7e f4       	brtc	.+30     	; 0x4182 <__ftoa_engine+0x146>
    4164:	70 33       	cpi	r23, 0x30	; 48
    4166:	11 f4       	brne	.+4      	; 0x416c <__ftoa_engine+0x130>
    4168:	8a 95       	dec	r24
    416a:	e6 cf       	rjmp	.-52     	; 0x4138 <__ftoa_engine+0xfc>
    416c:	e8 94       	clt
    416e:	01 50       	subi	r16, 0x01	; 1
    4170:	30 f0       	brcs	.+12     	; 0x417e <__ftoa_engine+0x142>
    4172:	08 0f       	add	r16, r24
    4174:	0a f4       	brpl	.+2      	; 0x4178 <__ftoa_engine+0x13c>
    4176:	00 27       	eor	r16, r16
    4178:	02 17       	cp	r16, r18
    417a:	08 f4       	brcc	.+2      	; 0x417e <__ftoa_engine+0x142>
    417c:	20 2f       	mov	r18, r16
    417e:	23 95       	inc	r18
    4180:	02 2f       	mov	r16, r18
    4182:	7a 33       	cpi	r23, 0x3A	; 58
    4184:	28 f0       	brcs	.+10     	; 0x4190 <__ftoa_engine+0x154>
    4186:	79 e3       	ldi	r23, 0x39	; 57
    4188:	7d 93       	st	X+, r23
    418a:	2a 95       	dec	r18
    418c:	e9 f7       	brne	.-6      	; 0x4188 <__ftoa_engine+0x14c>
    418e:	10 c0       	rjmp	.+32     	; 0x41b0 <__ftoa_engine+0x174>
    4190:	7d 93       	st	X+, r23
    4192:	2a 95       	dec	r18
    4194:	89 f6       	brne	.-94     	; 0x4138 <__ftoa_engine+0xfc>
    4196:	06 94       	lsr	r0
    4198:	97 95       	ror	r25
    419a:	67 95       	ror	r22
    419c:	37 95       	ror	r19
    419e:	17 95       	ror	r17
    41a0:	17 94       	ror	r1
    41a2:	e1 18       	sub	r14, r1
    41a4:	f1 0a       	sbc	r15, r17
    41a6:	43 0b       	sbc	r20, r19
    41a8:	56 0b       	sbc	r21, r22
    41aa:	c9 0b       	sbc	r28, r25
    41ac:	d0 09       	sbc	r29, r0
    41ae:	98 f0       	brcs	.+38     	; 0x41d6 <__ftoa_engine+0x19a>
    41b0:	23 95       	inc	r18
    41b2:	7e 91       	ld	r23, -X
    41b4:	73 95       	inc	r23
    41b6:	7a 33       	cpi	r23, 0x3A	; 58
    41b8:	08 f0       	brcs	.+2      	; 0x41bc <__ftoa_engine+0x180>
    41ba:	70 e3       	ldi	r23, 0x30	; 48
    41bc:	7c 93       	st	X, r23
    41be:	20 13       	cpse	r18, r16
    41c0:	b8 f7       	brcc	.-18     	; 0x41b0 <__ftoa_engine+0x174>
    41c2:	7e 91       	ld	r23, -X
    41c4:	70 61       	ori	r23, 0x10	; 16
    41c6:	7d 93       	st	X+, r23
    41c8:	30 f0       	brcs	.+12     	; 0x41d6 <__ftoa_engine+0x19a>
    41ca:	83 95       	inc	r24
    41cc:	71 e3       	ldi	r23, 0x31	; 49
    41ce:	7d 93       	st	X+, r23
    41d0:	70 e3       	ldi	r23, 0x30	; 48
    41d2:	2a 95       	dec	r18
    41d4:	e1 f7       	brne	.-8      	; 0x41ce <__ftoa_engine+0x192>
    41d6:	11 24       	eor	r1, r1
    41d8:	ef 90       	pop	r14
    41da:	ff 90       	pop	r15
    41dc:	0f 91       	pop	r16
    41de:	1f 91       	pop	r17
    41e0:	cf 91       	pop	r28
    41e2:	df 91       	pop	r29
    41e4:	99 27       	eor	r25, r25
    41e6:	87 fd       	sbrc	r24, 7
    41e8:	90 95       	com	r25
    41ea:	08 95       	ret

000041ec <strrev>:
    41ec:	dc 01       	movw	r26, r24
    41ee:	fc 01       	movw	r30, r24
    41f0:	67 2f       	mov	r22, r23
    41f2:	71 91       	ld	r23, Z+
    41f4:	77 23       	and	r23, r23
    41f6:	e1 f7       	brne	.-8      	; 0x41f0 <strrev+0x4>
    41f8:	32 97       	sbiw	r30, 0x02	; 2
    41fa:	04 c0       	rjmp	.+8      	; 0x4204 <strrev+0x18>
    41fc:	7c 91       	ld	r23, X
    41fe:	6d 93       	st	X+, r22
    4200:	70 83       	st	Z, r23
    4202:	62 91       	ld	r22, -Z
    4204:	ae 17       	cp	r26, r30
    4206:	bf 07       	cpc	r27, r31
    4208:	c8 f3       	brcs	.-14     	; 0x41fc <strrev+0x10>
    420a:	08 95       	ret

0000420c <__mulsi3>:
    420c:	62 9f       	mul	r22, r18
    420e:	d0 01       	movw	r26, r0
    4210:	73 9f       	mul	r23, r19
    4212:	f0 01       	movw	r30, r0
    4214:	82 9f       	mul	r24, r18
    4216:	e0 0d       	add	r30, r0
    4218:	f1 1d       	adc	r31, r1
    421a:	64 9f       	mul	r22, r20
    421c:	e0 0d       	add	r30, r0
    421e:	f1 1d       	adc	r31, r1
    4220:	92 9f       	mul	r25, r18
    4222:	f0 0d       	add	r31, r0
    4224:	83 9f       	mul	r24, r19
    4226:	f0 0d       	add	r31, r0
    4228:	74 9f       	mul	r23, r20
    422a:	f0 0d       	add	r31, r0
    422c:	65 9f       	mul	r22, r21
    422e:	f0 0d       	add	r31, r0
    4230:	99 27       	eor	r25, r25
    4232:	72 9f       	mul	r23, r18
    4234:	b0 0d       	add	r27, r0
    4236:	e1 1d       	adc	r30, r1
    4238:	f9 1f       	adc	r31, r25
    423a:	63 9f       	mul	r22, r19
    423c:	b0 0d       	add	r27, r0
    423e:	e1 1d       	adc	r30, r1
    4240:	f9 1f       	adc	r31, r25
    4242:	bd 01       	movw	r22, r26
    4244:	cf 01       	movw	r24, r30
    4246:	11 24       	eor	r1, r1
    4248:	08 95       	ret

0000424a <__udivmodhi4>:
    424a:	aa 1b       	sub	r26, r26
    424c:	bb 1b       	sub	r27, r27
    424e:	51 e1       	ldi	r21, 0x11	; 17
    4250:	07 c0       	rjmp	.+14     	; 0x4260 <__udivmodhi4_ep>

00004252 <__udivmodhi4_loop>:
    4252:	aa 1f       	adc	r26, r26
    4254:	bb 1f       	adc	r27, r27
    4256:	a6 17       	cp	r26, r22
    4258:	b7 07       	cpc	r27, r23
    425a:	10 f0       	brcs	.+4      	; 0x4260 <__udivmodhi4_ep>
    425c:	a6 1b       	sub	r26, r22
    425e:	b7 0b       	sbc	r27, r23

00004260 <__udivmodhi4_ep>:
    4260:	88 1f       	adc	r24, r24
    4262:	99 1f       	adc	r25, r25
    4264:	5a 95       	dec	r21
    4266:	a9 f7       	brne	.-22     	; 0x4252 <__udivmodhi4_loop>
    4268:	80 95       	com	r24
    426a:	90 95       	com	r25
    426c:	bc 01       	movw	r22, r24
    426e:	cd 01       	movw	r24, r26
    4270:	08 95       	ret

00004272 <__udivmodsi4>:
    4272:	a1 e2       	ldi	r26, 0x21	; 33
    4274:	1a 2e       	mov	r1, r26
    4276:	aa 1b       	sub	r26, r26
    4278:	bb 1b       	sub	r27, r27
    427a:	fd 01       	movw	r30, r26
    427c:	0d c0       	rjmp	.+26     	; 0x4298 <__udivmodsi4_ep>

0000427e <__udivmodsi4_loop>:
    427e:	aa 1f       	adc	r26, r26
    4280:	bb 1f       	adc	r27, r27
    4282:	ee 1f       	adc	r30, r30
    4284:	ff 1f       	adc	r31, r31
    4286:	a2 17       	cp	r26, r18
    4288:	b3 07       	cpc	r27, r19
    428a:	e4 07       	cpc	r30, r20
    428c:	f5 07       	cpc	r31, r21
    428e:	20 f0       	brcs	.+8      	; 0x4298 <__udivmodsi4_ep>
    4290:	a2 1b       	sub	r26, r18
    4292:	b3 0b       	sbc	r27, r19
    4294:	e4 0b       	sbc	r30, r20
    4296:	f5 0b       	sbc	r31, r21

00004298 <__udivmodsi4_ep>:
    4298:	66 1f       	adc	r22, r22
    429a:	77 1f       	adc	r23, r23
    429c:	88 1f       	adc	r24, r24
    429e:	99 1f       	adc	r25, r25
    42a0:	1a 94       	dec	r1
    42a2:	69 f7       	brne	.-38     	; 0x427e <__udivmodsi4_loop>
    42a4:	60 95       	com	r22
    42a6:	70 95       	com	r23
    42a8:	80 95       	com	r24
    42aa:	90 95       	com	r25
    42ac:	9b 01       	movw	r18, r22
    42ae:	ac 01       	movw	r20, r24
    42b0:	bd 01       	movw	r22, r26
    42b2:	cf 01       	movw	r24, r30
    42b4:	08 95       	ret

000042b6 <__divmodsi4>:
    42b6:	97 fb       	bst	r25, 7
    42b8:	09 2e       	mov	r0, r25
    42ba:	05 26       	eor	r0, r21
    42bc:	0e d0       	rcall	.+28     	; 0x42da <__divmodsi4_neg1>
    42be:	57 fd       	sbrc	r21, 7
    42c0:	04 d0       	rcall	.+8      	; 0x42ca <__divmodsi4_neg2>
    42c2:	d7 df       	rcall	.-82     	; 0x4272 <__udivmodsi4>
    42c4:	0a d0       	rcall	.+20     	; 0x42da <__divmodsi4_neg1>
    42c6:	00 1c       	adc	r0, r0
    42c8:	38 f4       	brcc	.+14     	; 0x42d8 <__divmodsi4_exit>

000042ca <__divmodsi4_neg2>:
    42ca:	50 95       	com	r21
    42cc:	40 95       	com	r20
    42ce:	30 95       	com	r19
    42d0:	21 95       	neg	r18
    42d2:	3f 4f       	sbci	r19, 0xFF	; 255
    42d4:	4f 4f       	sbci	r20, 0xFF	; 255
    42d6:	5f 4f       	sbci	r21, 0xFF	; 255

000042d8 <__divmodsi4_exit>:
    42d8:	08 95       	ret

000042da <__divmodsi4_neg1>:
    42da:	f6 f7       	brtc	.-4      	; 0x42d8 <__divmodsi4_exit>
    42dc:	90 95       	com	r25
    42de:	80 95       	com	r24
    42e0:	70 95       	com	r23
    42e2:	61 95       	neg	r22
    42e4:	7f 4f       	sbci	r23, 0xFF	; 255
    42e6:	8f 4f       	sbci	r24, 0xFF	; 255
    42e8:	9f 4f       	sbci	r25, 0xFF	; 255
    42ea:	08 95       	ret

000042ec <__prologue_saves__>:
    42ec:	2f 92       	push	r2
    42ee:	3f 92       	push	r3
    42f0:	4f 92       	push	r4
    42f2:	5f 92       	push	r5
    42f4:	6f 92       	push	r6
    42f6:	7f 92       	push	r7
    42f8:	8f 92       	push	r8
    42fa:	9f 92       	push	r9
    42fc:	af 92       	push	r10
    42fe:	bf 92       	push	r11
    4300:	cf 92       	push	r12
    4302:	df 92       	push	r13
    4304:	ef 92       	push	r14
    4306:	ff 92       	push	r15
    4308:	0f 93       	push	r16
    430a:	1f 93       	push	r17
    430c:	cf 93       	push	r28
    430e:	df 93       	push	r29
    4310:	cd b7       	in	r28, 0x3d	; 61
    4312:	de b7       	in	r29, 0x3e	; 62
    4314:	ca 1b       	sub	r28, r26
    4316:	db 0b       	sbc	r29, r27
    4318:	0f b6       	in	r0, 0x3f	; 63
    431a:	f8 94       	cli
    431c:	de bf       	out	0x3e, r29	; 62
    431e:	0f be       	out	0x3f, r0	; 63
    4320:	cd bf       	out	0x3d, r28	; 61
    4322:	09 94       	ijmp

00004324 <__epilogue_restores__>:
    4324:	2a 88       	ldd	r2, Y+18	; 0x12
    4326:	39 88       	ldd	r3, Y+17	; 0x11
    4328:	48 88       	ldd	r4, Y+16	; 0x10
    432a:	5f 84       	ldd	r5, Y+15	; 0x0f
    432c:	6e 84       	ldd	r6, Y+14	; 0x0e
    432e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4330:	8c 84       	ldd	r8, Y+12	; 0x0c
    4332:	9b 84       	ldd	r9, Y+11	; 0x0b
    4334:	aa 84       	ldd	r10, Y+10	; 0x0a
    4336:	b9 84       	ldd	r11, Y+9	; 0x09
    4338:	c8 84       	ldd	r12, Y+8	; 0x08
    433a:	df 80       	ldd	r13, Y+7	; 0x07
    433c:	ee 80       	ldd	r14, Y+6	; 0x06
    433e:	fd 80       	ldd	r15, Y+5	; 0x05
    4340:	0c 81       	ldd	r16, Y+4	; 0x04
    4342:	1b 81       	ldd	r17, Y+3	; 0x03
    4344:	aa 81       	ldd	r26, Y+2	; 0x02
    4346:	b9 81       	ldd	r27, Y+1	; 0x01
    4348:	ce 0f       	add	r28, r30
    434a:	d1 1d       	adc	r29, r1
    434c:	0f b6       	in	r0, 0x3f	; 63
    434e:	f8 94       	cli
    4350:	de bf       	out	0x3e, r29	; 62
    4352:	0f be       	out	0x3f, r0	; 63
    4354:	cd bf       	out	0x3d, r28	; 61
    4356:	ed 01       	movw	r28, r26
    4358:	08 95       	ret

0000435a <__tablejump2__>:
    435a:	ee 0f       	add	r30, r30
    435c:	ff 1f       	adc	r31, r31

0000435e <__tablejump__>:
    435e:	05 90       	lpm	r0, Z+
    4360:	f4 91       	lpm	r31, Z+
    4362:	e0 2d       	mov	r30, r0
    4364:	09 94       	ijmp

00004366 <_exit>:
    4366:	f8 94       	cli

00004368 <__stop_program>:
    4368:	ff cf       	rjmp	.-2      	; 0x4368 <__stop_program>
